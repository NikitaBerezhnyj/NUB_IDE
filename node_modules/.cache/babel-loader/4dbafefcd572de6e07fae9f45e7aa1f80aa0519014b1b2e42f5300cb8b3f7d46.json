{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Read and write to the system clipboard.\n *\n * This package is also accessible with `window.__TAURI__.clipboard` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.clipboard`](https://tauri.app/v1/api/config/#allowlistconfig.clipboard) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"clipboard\": {\n *         \"all\": true, // enable all Clipboard APIs\n *         \"writeText\": true,\n *         \"readText\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * @module\n */\n/**\n * Writes plain text to the clipboard.\n * @example\n * ```typescript\n * import { writeText, readText } from '@tauri-apps/api/clipboard';\n * await writeText('Tauri is awesome!');\n * assert(await readText(), 'Tauri is awesome!');\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0.\n */\nasync function writeText(text) {\n  return invokeTauriCommand({\n    __tauriModule: 'Clipboard',\n    message: {\n      cmd: 'writeText',\n      data: text\n    }\n  });\n}\n/**\n * Gets the clipboard content as plain text.\n * @example\n * ```typescript\n * import { readText } from '@tauri-apps/api/clipboard';\n * const clipboardText = await readText();\n * ```\n * @since 1.0.0.\n */\nasync function readText() {\n  return invokeTauriCommand({\n    __tauriModule: 'Clipboard',\n    message: {\n      cmd: 'readText',\n      // if data is not set, `serde` will ignore the custom deserializer\n      // that is set when the API is not allowlisted\n      data: null\n    }\n  });\n}\nexport { readText, writeText };","map":{"version":3,"names":["invokeTauriCommand","writeText","text","__tauriModule","message","cmd","data","readText"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/node_modules/@tauri-apps/api/clipboard.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Read and write to the system clipboard.\n *\n * This package is also accessible with `window.__TAURI__.clipboard` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.clipboard`](https://tauri.app/v1/api/config/#allowlistconfig.clipboard) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"clipboard\": {\n *         \"all\": true, // enable all Clipboard APIs\n *         \"writeText\": true,\n *         \"readText\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * @module\n */\n/**\n * Writes plain text to the clipboard.\n * @example\n * ```typescript\n * import { writeText, readText } from '@tauri-apps/api/clipboard';\n * await writeText('Tauri is awesome!');\n * assert(await readText(), 'Tauri is awesome!');\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0.\n */\nasync function writeText(text) {\n    return invokeTauriCommand({\n        __tauriModule: 'Clipboard',\n        message: {\n            cmd: 'writeText',\n            data: text\n        }\n    });\n}\n/**\n * Gets the clipboard content as plain text.\n * @example\n * ```typescript\n * import { readText } from '@tauri-apps/api/clipboard';\n * const clipboardText = await readText();\n * ```\n * @since 1.0.0.\n */\nasync function readText() {\n    return invokeTauriCommand({\n        __tauriModule: 'Clipboard',\n        message: {\n            cmd: 'readText',\n            // if data is not set, `serde` will ignore the custom deserializer\n            // that is set when the API is not allowlisted\n            data: null\n        }\n    });\n}\n\nexport { readText, writeText };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,SAASA,CAACC,IAAI,EAAE;EAC3B,OAAOF,kBAAkB,CAAC;IACtBG,aAAa,EAAE,WAAW;IAC1BC,OAAO,EAAE;MACLC,GAAG,EAAE,WAAW;MAChBC,IAAI,EAAEJ;IACV;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeK,QAAQA,CAAA,EAAG;EACtB,OAAOP,kBAAkB,CAAC;IACtBG,aAAa,EAAE,WAAW;IAC1BC,OAAO,EAAE;MACLC,GAAG,EAAE,UAAU;MACf;MACA;MACAC,IAAI,EAAE;IACV;EACJ,CAAC,CAAC;AACN;AAEA,SAASC,QAAQ,EAAEN,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}