{"ast":null,"code":"import { listen as listen$1, once as once$1, emit as emit$1 } from './helpers/event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n  TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n  TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n  TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n  TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n  TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n  TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n  TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n  TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n  TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n  TauriEvent[\"WINDOW_FILE_DROP\"] = \"tauri://file-drop\";\n  TauriEvent[\"WINDOW_FILE_DROP_HOVER\"] = \"tauri://file-drop-hover\";\n  TauriEvent[\"WINDOW_FILE_DROP_CANCELLED\"] = \"tauri://file-drop-cancelled\";\n  TauriEvent[\"MENU\"] = \"tauri://menu\";\n  TauriEvent[\"CHECK_UPDATE\"] = \"tauri://update\";\n  TauriEvent[\"UPDATE_AVAILABLE\"] = \"tauri://update-available\";\n  TauriEvent[\"INSTALL_UPDATE\"] = \"tauri://update-install\";\n  TauriEvent[\"STATUS_UPDATE\"] = \"tauri://update-status\";\n  TauriEvent[\"DOWNLOAD_PROGRESS\"] = \"tauri://update-download-progress\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Listen to an event. The event can be either global or window-specific.\n * See {@link Event.windowLabel} to check the event source.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error in window ${event.windowLabel}, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler) {\n  return listen$1(event, null, handler);\n}\n/**\n * Listen to an one-off event. See {@link listen} for more information.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler) {\n  return once$1(event, null, handler);\n}\n/**\n * Emits an event to the backend and all Tauri windows.\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n  return emit$1(event, undefined, payload);\n}\nexport { TauriEvent, emit, listen, once };","map":{"version":3,"names":["listen","listen$1","once","once$1","emit","emit$1","TauriEvent","event","handler","payload","undefined"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/node_modules/@tauri-apps/api/event.js"],"sourcesContent":["import { listen as listen$1, once as once$1, emit as emit$1 } from './helpers/event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_FILE_DROP\"] = \"tauri://file-drop\";\n    TauriEvent[\"WINDOW_FILE_DROP_HOVER\"] = \"tauri://file-drop-hover\";\n    TauriEvent[\"WINDOW_FILE_DROP_CANCELLED\"] = \"tauri://file-drop-cancelled\";\n    TauriEvent[\"MENU\"] = \"tauri://menu\";\n    TauriEvent[\"CHECK_UPDATE\"] = \"tauri://update\";\n    TauriEvent[\"UPDATE_AVAILABLE\"] = \"tauri://update-available\";\n    TauriEvent[\"INSTALL_UPDATE\"] = \"tauri://update-install\";\n    TauriEvent[\"STATUS_UPDATE\"] = \"tauri://update-status\";\n    TauriEvent[\"DOWNLOAD_PROGRESS\"] = \"tauri://update-download-progress\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Listen to an event. The event can be either global or window-specific.\n * See {@link Event.windowLabel} to check the event source.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error in window ${event.windowLabel}, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler) {\n    return listen$1(event, null, handler);\n}\n/**\n * Listen to an one-off event. See {@link listen} for more information.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler) {\n    return once$1(event, null, handler);\n}\n/**\n * Emits an event to the backend and all Tauri windows.\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    return emit$1(event, undefined, payload);\n}\n\nexport { TauriEvent, emit, listen, once };\n"],"mappings":"AAAA,SAASA,MAAM,IAAIC,QAAQ,EAAEC,IAAI,IAAIC,MAAM,EAAEC,IAAI,IAAIC,MAAM,QAAQ,oBAAoB;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU;AACd,CAAC,UAAUA,UAAU,EAAE;EACnBA,UAAU,CAAC,gBAAgB,CAAC,GAAG,gBAAgB;EAC/CA,UAAU,CAAC,cAAc,CAAC,GAAG,cAAc;EAC3CA,UAAU,CAAC,wBAAwB,CAAC,GAAG,yBAAyB;EAChEA,UAAU,CAAC,gBAAgB,CAAC,GAAG,wBAAwB;EACvDA,UAAU,CAAC,kBAAkB,CAAC,GAAG,mBAAmB;EACpDA,UAAU,CAAC,cAAc,CAAC,GAAG,eAAe;EAC5CA,UAAU,CAAC,aAAa,CAAC,GAAG,cAAc;EAC1CA,UAAU,CAAC,6BAA6B,CAAC,GAAG,sBAAsB;EAClEA,UAAU,CAAC,sBAAsB,CAAC,GAAG,uBAAuB;EAC5DA,UAAU,CAAC,kBAAkB,CAAC,GAAG,mBAAmB;EACpDA,UAAU,CAAC,wBAAwB,CAAC,GAAG,yBAAyB;EAChEA,UAAU,CAAC,4BAA4B,CAAC,GAAG,6BAA6B;EACxEA,UAAU,CAAC,MAAM,CAAC,GAAG,cAAc;EACnCA,UAAU,CAAC,cAAc,CAAC,GAAG,gBAAgB;EAC7CA,UAAU,CAAC,kBAAkB,CAAC,GAAG,0BAA0B;EAC3DA,UAAU,CAAC,gBAAgB,CAAC,GAAG,wBAAwB;EACvDA,UAAU,CAAC,eAAe,CAAC,GAAG,uBAAuB;EACrDA,UAAU,CAAC,mBAAmB,CAAC,GAAG,kCAAkC;AACxE,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeN,MAAMA,CAACO,KAAK,EAAEC,OAAO,EAAE;EAClC,OAAOP,QAAQ,CAACM,KAAK,EAAE,IAAI,EAAEC,OAAO,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeN,IAAIA,CAACK,KAAK,EAAEC,OAAO,EAAE;EAChC,OAAOL,MAAM,CAACI,KAAK,EAAE,IAAI,EAAEC,OAAO,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,IAAIA,CAACG,KAAK,EAAEE,OAAO,EAAE;EAChC,OAAOJ,MAAM,CAACE,KAAK,EAAEG,SAAS,EAAED,OAAO,CAAC;AAC5C;AAEA,SAASH,UAAU,EAAEF,IAAI,EAAEJ,MAAM,EAAEE,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}