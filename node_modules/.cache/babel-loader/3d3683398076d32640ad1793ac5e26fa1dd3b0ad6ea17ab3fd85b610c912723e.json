{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/Rust/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     const moveCursor = () => {\n//         const textarea = textareaRef.current;\n//         const currentPosition = textarea.selectionStart;\n//         textarea.setSelectionRange(currentPosition - 1, currentPosition - 1);\n//         textarea.focus();\n//     };\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n\n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     setTimeout(moveCursor, 0); // Виклик moveCursor з нульовою затримкою\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                     setTimeout(moveCursor, 0); // Виклик moveCursor з нульовою затримкою\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea \n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </textarea>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport './CodeEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeEditor() {\n  _s();\n  const [text, setText] = useState('');\n  const [history, setHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(-1);\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    const handleUndoRedo = event => {\n      if (event.ctrlKey && event.key === 'z') {\n        event.preventDefault();\n        undo();\n      } else if (event.ctrlKey && event.key === 'y') {\n        event.preventDefault();\n        redo();\n      }\n    };\n    window.addEventListener('keydown', handleUndoRedo);\n    return () => {\n      window.removeEventListener('keydown', handleUndoRedo);\n    };\n  }, [undo, redo]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    const lineNumbersEle = document.getElementById('line-numbers');\n    const displayLineNumbers = () => {\n      const lines = text.split('\\n');\n      lineNumbersEle.innerHTML = lines.map((_, i) => `<div>${i + 1}</div>`).join('');\n    };\n    displayLineNumbers();\n    const handleInput = event => {\n      // логіка автозакриття \n    };\n    textarea.addEventListener('input', handleInput);\n    return () => {\n      textarea.removeEventListener('input', handleInput);\n    };\n  }, [text]);\n  const undo = () => {\n    if (currentStep > 0) {\n      setText(history[currentStep - 1]);\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const redo = () => {\n    if (currentStep < history.length - 1) {\n      setText(history[currentStep + 1]);\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  const handleChange = event => {\n    setText(event.target.value);\n    const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n    setHistory(newHistory);\n    setCurrentStep(newHistory.length - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-numbers\",\n      className: \"code-lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      value: text,\n      onChange: handleChange,\n      className: \"code-editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeEditor, \"M8yTNiUaaRJbB3uiV69+fPu/wXc=\");\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Container","jsxDEV","_jsxDEV","CodeEditor","_s","text","setText","history","setHistory","currentStep","setCurrentStep","textareaRef","handleUndoRedo","event","ctrlKey","key","preventDefault","undo","redo","window","addEventListener","removeEventListener","textarea","current","lineNumbersEle","document","getElementById","displayLineNumbers","lines","split","innerHTML","map","_","i","join","handleInput","length","handleChange","target","value","newHistory","slice","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     const moveCursor = () => {\n//         const textarea = textareaRef.current;\n//         const currentPosition = textarea.selectionStart;\n//         textarea.setSelectionRange(currentPosition - 1, currentPosition - 1);\n//         textarea.focus();\n//     };\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n\n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     setTimeout(moveCursor, 0); // Виклик moveCursor з нульовою затримкою\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                     setTimeout(moveCursor, 0); // Виклик moveCursor з нульовою затримкою\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea \n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </textarea>\n//         </Container>\n//     );\n// }\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport './CodeEditor.css';\n\nfunction CodeEditor() {\n  const [text, setText] = useState('');\n  const [history, setHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(-1);\n\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    const handleUndoRedo = (event) => {\n      if (event.ctrlKey && event.key === 'z') {\n        event.preventDefault();\n        undo();\n      } else if (event.ctrlKey && event.key === 'y') {\n        event.preventDefault();\n        redo();\n      }\n    };\n\n    window.addEventListener('keydown', handleUndoRedo);\n\n    return () => {\n      window.removeEventListener('keydown', handleUndoRedo);\n    };\n  }, [undo, redo]);\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    const lineNumbersEle = document.getElementById('line-numbers');\n\n    const displayLineNumbers = () => {\n      const lines = text.split('\\n');\n\n      lineNumbersEle.innerHTML = lines.map((_, i) => `<div>${i + 1}</div>`).join('');\n    };\n\n    displayLineNumbers();\n\n    const handleInput = (event) => {\n      // логіка автозакриття \n  };\n\n    textarea.addEventListener('input', handleInput);\n\n    return () => {\n      textarea.removeEventListener('input', handleInput);\n    };\n  }, [text]);\n\n  const undo = () => {\n    if (currentStep > 0) {\n      setText(history[currentStep - 1]);\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const redo = () => {\n    if (currentStep < history.length - 1) {\n      setText(history[currentStep + 1]);\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handleChange = (event) => {\n    setText(event.target.value);\n\n    const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n\n    setHistory(newHistory);\n    setCurrentStep(newHistory.length - 1);\n  };\n\n  return (\n    <Container className=\"code-editor-container\">\n      <div id=\"line-numbers\" className=\"code-lines\"></div>\n\n      <textarea\n        ref={textareaRef}\n        value={text}\n        onChange={handleChange}\n        className=\"code-editor\"\n      />\n    </Container>\n  );\n}\n\nexport default CodeEditor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}