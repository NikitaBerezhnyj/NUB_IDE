{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { RichTextarea } from \"rich-textarea\";\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     // Дужки та оператори для підсвічування\n//     const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n//     const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n//     // Ключові слова мов програмування\n//     const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n//     const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n//     const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n\n//     // Відміна дії\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     // На дію вперед\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n\n//     // Створення коментаря\n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n\n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n\n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n\n//         moveToLineStart();\n\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n\n//         let newText;\n//         // Видаляємо коментар\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } \n//         // Додаємо коментар\n//         else {\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n\n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };\n\n//     // Перемістити курсор на початок рядка\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n\n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleEnterPress);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n\n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <RichTextarea\n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </RichTextarea>\n\n//         </Container>\n//     );\n// }\n\nimport { useState, useEffect, useRef } from 'react';\nimport { RichTextarea, createRegexRenderer } from \"rich-textarea\";\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  programming_language,\n  fileContent\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const textareaRef = useRef(null);\n  const keywordsMap = {\n    NikLang: ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'],\n    Udav: ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'],\n    Based: ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець']\n  };\n  const getKeywordRegex = () => {\n    const keywords = keywordsMap[programming_language] || [];\n    return new RegExp(`\\\\b(?:${keywords.join('|')})\\\\b`, 'g');\n  };\n  const keywordRegex = getKeywordRegex();\n  const keywordRenderer = createRegexRenderer([[keywordRegex, {\n    className: \"keyword-highlight\"\n  }]]);\n  const handleChange = event => {\n    setText(event.target.value);\n  };\n  useEffect(() => {\n    if (fileContent) {\n      if (fileContent === \"new_file\") {\n        setText(\"\");\n      } else {\n        setText(fileContent);\n      }\n    }\n  }, [fileContent]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    const lineNumbersEle = document.getElementById('line-numbers');\n    const displayLineNumbers = () => {\n      const lines = text.split('\\n');\n      lineNumbersEle.innerHTML = Array.from({\n        length: lines.length\n      }, (_, i) => `<div>${i + 1}</div>`).join('');\n    };\n    displayLineNumbers();\n    const handleInput = event => {\n      if (event.inputType === \"insertText\") {\n        const {\n          selectionStart,\n          value\n        } = event.target;\n        const closingChars = {\n          '(': ')',\n          '{': '}',\n          '[': ']',\n          '\"': '\"',\n          \"'\": \"'\"\n        };\n        if (event.data in closingChars) {\n          event.preventDefault();\n          const closingChar = closingChars[event.data];\n          setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n          textarea.selectionStart = selectionStart;\n          textarea.selectionEnd = selectionStart;\n          setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(selectionStart, selectionStart);\n          }, 0);\n        } else if (event.data === closingChars[value[selectionStart]]) {\n          event.preventDefault();\n          textarea.selectionStart = selectionStart;\n          textarea.selectionEnd = selectionStart;\n          setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(selectionStart, selectionStart);\n          }, 0);\n        }\n      }\n    };\n    textarea.addEventListener('input', handleInput);\n    return () => {\n      textarea.removeEventListener('input', handleInput);\n    };\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-numbers\",\n      className: \"code-lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RichTextarea, {\n      ref: textareaRef,\n      id: \"textarea\",\n      value: text,\n      onChange: handleChange,\n      className: \"code-editor\",\n      children: keywordRenderer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 9\n  }, this);\n}\n_s(CodeEditor, \"0T1iPHu6Xfg7mDuaJrVuS5tZ1CI=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["useState","useEffect","useRef","RichTextarea","createRegexRenderer","Container","jsxDEV","_jsxDEV","CodeEditor","programming_language","fileContent","_s","text","setText","textareaRef","keywordsMap","NikLang","Udav","Based","getKeywordRegex","keywords","RegExp","join","keywordRegex","keywordRenderer","className","handleChange","event","target","value","textarea","current","lineNumbersEle","document","getElementById","displayLineNumbers","lines","split","innerHTML","Array","from","length","_","i","handleInput","inputType","selectionStart","closingChars","data","preventDefault","closingChar","substring","selectionEnd","setTimeout","focus","setSelectionRange","addEventListener","removeEventListener","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { RichTextarea } from \"rich-textarea\";\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     // Дужки та оператори для підсвічування\n//     const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n//     const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n//     // Ключові слова мов програмування\n//     const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n//     const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n//     const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n\n//     // Відміна дії\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     // На дію вперед\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n    \n//     // Створення коментаря\n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n        \n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n    \n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n    \n//         moveToLineStart();\n        \n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n        \n//         let newText;\n//         // Видаляємо коментар\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } \n//         // Додаємо коментар\n//         else {\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n        \n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };\n\n//     // Перемістити курсор на початок рядка\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n    \n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n    \n//         window.addEventListener('keydown', handleEnterPress);\n    \n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n        \n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <RichTextarea\n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </RichTextarea>\n            \n//         </Container>\n//     );\n// }\n\nimport { useState, useEffect, useRef } from 'react';\nimport { RichTextarea, createRegexRenderer } from \"rich-textarea\";\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\n\nexport default function CodeEditor({ programming_language, fileContent }) {\n    const [text, setText] = useState('');\n    const textareaRef = useRef(null);\n\n    const keywordsMap = {\n        NikLang: ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'],\n        Udav: ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'],\n        Based: ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець']\n    };\n\n    const getKeywordRegex = () => {\n        const keywords = keywordsMap[programming_language] || [];\n        return new RegExp(`\\\\b(?:${keywords.join('|')})\\\\b`, 'g');\n    };\n\n    const keywordRegex = getKeywordRegex();\n    const keywordRenderer = createRegexRenderer([[keywordRegex, { className: \"keyword-highlight\" }]]);\n\n    const handleChange = (event) => {\n        setText(event.target.value);\n    };\n\n    useEffect(() => {\n        if (fileContent) {\n            if (fileContent === \"new_file\") {\n                setText(\"\");\n            } else {\n                setText(fileContent);\n            }\n        }\n    }, [fileContent]);\n\n    useEffect(() => {\n        const textarea = textareaRef.current;\n        const lineNumbersEle = document.getElementById('line-numbers');\n\n        const displayLineNumbers = () => {\n            const lines = text.split('\\n');\n            lineNumbersEle.innerHTML = Array.from({\n                length: lines.length,\n            }, (_, i) => `<div>${i + 1}</div>`).join('');\n        };\n\n        displayLineNumbers();\n\n        const handleInput = (event) => {\n            if (event.inputType === \"insertText\") {\n                const { selectionStart, value } = event.target;\n                const closingChars = {\n                    '(': ')',\n                    '{': '}',\n                    '[': ']',\n                    '\"': '\"',\n                    \"'\": \"'\"\n                };\n\n                if (event.data in closingChars) {\n                    event.preventDefault();\n                    const closingChar = closingChars[event.data];\n                    setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n                    textarea.selectionStart = selectionStart;\n                    textarea.selectionEnd = selectionStart;\n                    setTimeout(() => {\n                        textarea.focus();\n                        textarea.setSelectionRange(selectionStart, selectionStart);\n                    }, 0);\n                } else if (event.data === closingChars[value[selectionStart]]) {\n                    event.preventDefault();\n                    textarea.selectionStart = selectionStart;\n                    textarea.selectionEnd = selectionStart;\n                    setTimeout(() => {\n                        textarea.focus();\n                        textarea.setSelectionRange(selectionStart, selectionStart);\n                    }, 0);\n                }\n            }\n        };\n\n        textarea.addEventListener('input', handleInput);\n\n        return () => {\n            textarea.removeEventListener('input', handleInput);\n        };\n    }, [text]);\n\n    return (\n        <Container className='code-editor-container'>\n            <div id=\"line-numbers\" className=\"code-lines\"></div>\n            <RichTextarea\n                ref={textareaRef}\n                id=\"textarea\"\n                value={text}\n                onChange={handleChange}\n                className='code-editor'>\n                {keywordRenderer}\n            </RichTextarea>\n        </Container>\n    );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}