{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Perform operations on the current process.\n *\n * This package is also accessible with `window.__TAURI__.process` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Exits immediately with the given `exitCode`.\n * @example\n * ```typescript\n * import { exit } from '@tauri-apps/api/process';\n * await exit(1);\n * ```\n *\n * @param exitCode The exit code to use.\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function exit(exitCode = 0) {\n  return invokeTauriCommand({\n    __tauriModule: 'Process',\n    message: {\n      cmd: 'exit',\n      exitCode\n    }\n  });\n}\n/**\n * Exits the current instance of the app then relaunches it.\n * @example\n * ```typescript\n * import { relaunch } from '@tauri-apps/api/process';\n * await relaunch();\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function relaunch() {\n  return invokeTauriCommand({\n    __tauriModule: 'Process',\n    message: {\n      cmd: 'relaunch'\n    }\n  });\n}\nexport { exit, relaunch };","map":{"version":3,"names":["invokeTauriCommand","exit","exitCode","__tauriModule","message","cmd","relaunch"],"sources":["/home/nikita/Проєкти/NUB_Project/NUB_IDE/node_modules/@tauri-apps/api/process.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Perform operations on the current process.\n *\n * This package is also accessible with `window.__TAURI__.process` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * Exits immediately with the given `exitCode`.\n * @example\n * ```typescript\n * import { exit } from '@tauri-apps/api/process';\n * await exit(1);\n * ```\n *\n * @param exitCode The exit code to use.\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function exit(exitCode = 0) {\n    return invokeTauriCommand({\n        __tauriModule: 'Process',\n        message: {\n            cmd: 'exit',\n            exitCode\n        }\n    });\n}\n/**\n * Exits the current instance of the app then relaunches it.\n * @example\n * ```typescript\n * import { relaunch } from '@tauri-apps/api/process';\n * await relaunch();\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function relaunch() {\n    return invokeTauriCommand({\n        __tauriModule: 'Process',\n        message: {\n            cmd: 'relaunch'\n        }\n    });\n}\n\nexport { exit, relaunch };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,IAAIA,CAACC,QAAQ,GAAG,CAAC,EAAE;EAC9B,OAAOF,kBAAkB,CAAC;IACtBG,aAAa,EAAE,SAAS;IACxBC,OAAO,EAAE;MACLC,GAAG,EAAE,MAAM;MACXH;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,QAAQA,CAAA,EAAG;EACtB,OAAON,kBAAkB,CAAC;IACtBG,aAAa,EAAE,SAAS;IACxBC,OAAO,EAAE;MACLC,GAAG,EAAE;IACT;EACJ,CAAC,CAAC;AACN;AAEA,SAASJ,IAAI,EAAEK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}