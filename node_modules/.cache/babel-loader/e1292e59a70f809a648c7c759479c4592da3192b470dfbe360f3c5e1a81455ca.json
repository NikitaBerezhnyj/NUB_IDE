{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\nimport { listen, once, emit } from './helpers/event.js';\nimport { TauriEvent } from './event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * This package is also accessible with `window.__TAURI__.window` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.window`](https://tauri.app/v1/api/config/#allowlistconfig.window) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"window\": {\n *         \"all\": true, // enable all window APIs\n *         \"create\": true, // enable window creation\n *         \"center\": true,\n *         \"requestUserAttention\": true,\n *         \"setResizable\": true,\n *         \"setMaximizable\": true,\n *         \"setMinimizable\": true,\n *         \"setClosable\": true,\n *         \"setTitle\": true,\n *         \"maximize\": true,\n *         \"unmaximize\": true,\n *         \"minimize\": true,\n *         \"unminimize\": true,\n *         \"show\": true,\n *         \"hide\": true,\n *         \"close\": true,\n *         \"setDecorations\": true,\n *         \"setAlwaysOnTop\": true,\n *         \"setContentProtected\": true,\n *         \"setSize\": true,\n *         \"setMinSize\": true,\n *         \"setMaxSize\": true,\n *         \"setPosition\": true,\n *         \"setFullscreen\": true,\n *         \"setFocus\": true,\n *         \"setIcon\": true,\n *         \"setSkipTaskbar\": true,\n *         \"setCursorGrab\": true,\n *         \"setCursorVisible\": true,\n *         \"setCursorIcon\": true,\n *         \"setCursorPosition\": true,\n *         \"setIgnoreCursorEvents\": true,\n *         \"startDragging\": true,\n *         \"print\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Window events\n *\n * Events can be listened to using `appWindow.listen`:\n * ```typescript\n * import { appWindow } from \"@tauri-apps/api/window\";\n * appWindow.listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * A size represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalSize {\n  constructor(width, height) {\n    this.type = 'Logical';\n    this.width = width;\n    this.height = height;\n  }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalSize {\n  constructor(width, height) {\n    this.type = 'Physical';\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Converts the physical size to a logical one.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const factor = await appWindow.scaleFactor();\n   * const size = await appWindow.innerSize();\n   * const logical = size.toLogical(factor);\n   * ```\n   *  */\n  toLogical(scaleFactor) {\n    return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n  }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalPosition {\n  constructor(x, y) {\n    this.type = 'Logical';\n    this.x = x;\n    this.y = y;\n  }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalPosition {\n  constructor(x, y) {\n    this.type = 'Physical';\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Converts the physical position to a logical one.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const factor = await appWindow.scaleFactor();\n   * const position = await appWindow.innerPosition();\n   * const logical = position.toLogical(factor);\n   * ```\n   * */\n  toLogical(scaleFactor) {\n    return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n  }\n}\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n  /**\n   * #### Platform-specific\n   * - **macOS:** Bounces the dock icon until the application is in focus.\n   * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n   */\n  UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n  /**\n   * #### Platform-specific\n   * - **macOS:** Bounces the dock icon once.\n   * - **Windows:** Flashes the taskbar button until the application is in focus.\n   */\n  UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\n/**\n * Get an instance of `WebviewWindow` for the current webview window.\n *\n * @since 1.0.0\n */\nfunction getCurrent() {\n  return new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  });\n}\n/**\n * Gets a list of instances of `WebviewWindow` for all available webview windows.\n *\n * @since 1.0.0\n */\nfunction getAll() {\n  return window.__TAURI_METADATA__.__windows.map(w => new WebviewWindow(w.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  }));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * A webview window handle allows emitting and listening to events from the backend that are tied to the window.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WebviewWindowHandle {\n  constructor(label) {\n    this.label = label;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.listeners = Object.create(null);\n  }\n  /**\n   * Listen to an event emitted by the backend or webview.\n   * The event must either be a global event or an event targetting this window.\n   *\n   * See {@link WebviewWindow.emit | `emit`} for more information.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const unlisten = await appWindow.listen<string>('state-changed', (event) => {\n   *   console.log(`Got error: ${payload}`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   */\n  async listen(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return Promise.resolve(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      });\n    }\n    return listen(event, this.label, handler);\n  }\n  /**\n   * Listen to an one-off event.\n   * See {@link WebviewWindow.listen | `listen`} for more information.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const unlisten = await appWindow.once<null>('initialized', (event) => {\n   *   console.log(`Window initialized!`);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param handler Event handler.\n   * @returns A promise resolving to a function to unlisten to the event.\n   */\n  async once(event, handler) {\n    if (this._handleTauriEvent(event, handler)) {\n      return Promise.resolve(() => {\n        // eslint-disable-next-line security/detect-object-injection\n        const listeners = this.listeners[event];\n        listeners.splice(listeners.indexOf(handler), 1);\n      });\n    }\n    return once(event, this.label, handler);\n  }\n  /**\n   * Emits an event to the backend and all Tauri windows.\n   * The event will have this window's {@link WebviewWindow.label | label} as {@link Event.windowLabel | source window label}.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.emit('window-loaded', { loggedIn: true, token: 'authToken' });\n   * ```\n   *\n   * This function can also be used to communicate between windows:\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.listen('sync-data', (event) => { });\n   *\n   * // on another window...\n   * import { WebviewWindow } from '@tauri-apps/api/window';\n   * const otherWindow = WebviewWindow.getByLabel('other')\n   * await otherWindow.emit('sync-data');\n   * ```\n   *\n   * Global listeners are also triggered:\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * import { listen } from '@tauri-apps/api/event';\n   * await listen('ping', (event) => { });\n   *\n   * await appWindow.emit('ping');\n   * ```\n   *\n   * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n   * @param payload Event payload.\n   */\n  async emit(event, payload) {\n    if (localTauriEvents.includes(event)) {\n      // eslint-disable-next-line\n      for (const handler of this.listeners[event] || []) {\n        handler({\n          event,\n          id: -1,\n          windowLabel: this.label,\n          payload\n        });\n      }\n      return Promise.resolve();\n    }\n    return emit(event, this.label, payload);\n  }\n  /** @ignore */\n  _handleTauriEvent(event, handler) {\n    if (localTauriEvents.includes(event)) {\n      if (!(event in this.listeners)) {\n        // eslint-disable-next-line\n        this.listeners[event] = [handler];\n      } else {\n        // eslint-disable-next-line\n        this.listeners[event].push(handler);\n      }\n      return true;\n    }\n    return false;\n  }\n}\n/**\n * Manage the current window object.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WindowManager extends WebviewWindowHandle {\n  // Getters\n  /**\n   * The scale factor that can be used to map physical pixels to logical pixels.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const factor = await appWindow.scaleFactor();\n   * ```\n   *\n   * @returns The window's monitor scale factor.\n   * */\n  async scaleFactor() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'scaleFactor'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const position = await appWindow.innerPosition();\n   * ```\n   *\n   * @returns The window's inner position.\n   *  */\n  async innerPosition() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'innerPosition'\n          }\n        }\n      }\n    }).then(({\n      x,\n      y\n    }) => new PhysicalPosition(x, y));\n  }\n  /**\n   * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const position = await appWindow.outerPosition();\n   * ```\n   *\n   * @returns The window's outer position.\n   *  */\n  async outerPosition() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'outerPosition'\n          }\n        }\n      }\n    }).then(({\n      x,\n      y\n    }) => new PhysicalPosition(x, y));\n  }\n  /**\n   * The physical size of the window's client area.\n   * The client area is the content of the window, excluding the title bar and borders.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const size = await appWindow.innerSize();\n   * ```\n   *\n   * @returns The window's inner size.\n   */\n  async innerSize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'innerSize'\n          }\n        }\n      }\n    }).then(({\n      width,\n      height\n    }) => new PhysicalSize(width, height));\n  }\n  /**\n   * The physical size of the entire window.\n   * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const size = await appWindow.outerSize();\n   * ```\n   *\n   * @returns The window's outer size.\n   */\n  async outerSize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'outerSize'\n          }\n        }\n      }\n    }).then(({\n      width,\n      height\n    }) => new PhysicalSize(width, height));\n  }\n  /**\n   * Gets the window's current fullscreen state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const fullscreen = await appWindow.isFullscreen();\n   * ```\n   *\n   * @returns Whether the window is in fullscreen mode or not.\n   *  */\n  async isFullscreen() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isFullscreen'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current minimized state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const minimized = await appWindow.isMinimized();\n   * ```\n   *\n   * @since 1.3.0\n   * */\n  async isMinimized() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isMinimized'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current maximized state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const maximized = await appWindow.isMaximized();\n   * ```\n   *\n   * @returns Whether the window is maximized or not.\n   * */\n  async isMaximized() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isMaximized'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current focus state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const focused = await appWindow.isFocused();\n   * ```\n   *\n   * @returns Whether the window is focused or not.\n   *\n   * @since 1.4\n   * */\n  async isFocused() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isFocused'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current decorated state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const decorated = await appWindow.isDecorated();\n   * ```\n   *\n   * @returns Whether the window is decorated or not.\n   *  */\n  async isDecorated() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isDecorated'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current resizable state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const resizable = await appWindow.isResizable();\n   * ```\n   *\n   * @returns Whether the window is resizable or not.\n   *  */\n  async isResizable() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isResizable'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window’s native maximize button state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const maximizable = await appWindow.isMaximizable();\n   * ```\n   *\n   * @returns Whether the window's native maximize button is enabled or not.\n   *  */\n  async isMaximizable() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isMaximizable'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window’s native minimize button state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const minimizable = await appWindow.isMinimizable();\n   * ```\n   *\n   * @returns Whether the window's native minimize button is enabled or not.\n   *  */\n  async isMinimizable() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isMinimizable'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window’s native close button state.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const closable = await appWindow.isClosable();\n   * ```\n   *\n   * @returns Whether the window's native close button is enabled or not.\n   *  */\n  async isClosable() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isClosable'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current visible state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const visible = await appWindow.isVisible();\n   * ```\n   *\n   * @returns Whether the window is visible or not.\n   *  */\n  async isVisible() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'isVisible'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current title.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const title = await appWindow.title();\n   * ```\n   *\n   * @since 1.3.0\n   * */\n  async title() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'title'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Gets the window's current theme.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * const theme = await appWindow.theme();\n   * ```\n   *\n   * @returns The window theme.\n   * */\n  async theme() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'theme'\n          }\n        }\n      }\n    });\n  }\n  // Setters\n  /**\n   * Centers the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.center();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async center() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'center'\n          }\n        }\n      }\n    });\n  }\n  /**\n   *  Requests user attention to the window, this has no effect if the application\n   * is already focused. How requesting for user attention manifests is platform dependent,\n   * see `UserAttentionType` for details.\n   *\n   * Providing `null` will unset the request for user attention. Unsetting the request for\n   * user attention might not be done automatically by the WM when the window receives input.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** `null` has no effect.\n   * - **Linux:** Urgency levels have the same effect.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.requestUserAttention();\n   * ```\n   *\n   * @param requestType\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async requestUserAttention(requestType) {\n    let requestType_ = null;\n    if (requestType) {\n      if (requestType === UserAttentionType.Critical) {\n        requestType_ = {\n          type: 'Critical'\n        };\n      } else {\n        requestType_ = {\n          type: 'Informational'\n        };\n      }\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'requestUserAttention',\n            payload: requestType_\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Updates the window resizable flag.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setResizable(false);\n   * ```\n   *\n   * @param resizable\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setResizable(resizable) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setResizable',\n            payload: resizable\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets whether the window's native maximize button is enabled or not.\n   * If resizable is set to false, this setting is ignored.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setMaximizable(false);\n   * ```\n   *\n   * @param maximizable\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMaximizable(maximizable) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setMaximizable',\n            payload: maximizable\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets whether the window's native minimize button is enabled or not.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux / iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setMinimizable(false);\n   * ```\n   *\n   * @param minimizable\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMinimizable(minimizable) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setMinimizable',\n            payload: minimizable\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets whether the window's native close button is enabled or not.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n   * - **iOS / Android:** Unsupported.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setClosable(false);\n   * ```\n   *\n   * @param closable\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setClosable(closable) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setClosable',\n            payload: closable\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window title.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setTitle('Tauri');\n   * ```\n   *\n   * @param title The new title\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setTitle(title) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setTitle',\n            payload: title\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Maximizes the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.maximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async maximize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'maximize'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Unmaximizes the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.unmaximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async unmaximize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'unmaximize'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Toggles the window maximized state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.toggleMaximize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async toggleMaximize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'toggleMaximize'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Minimizes the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.minimize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async minimize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'minimize'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Unminimizes the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.unminimize();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async unminimize() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'unminimize'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window visibility to true.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.show();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async show() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'show'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window visibility to false.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.hide();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async hide() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'hide'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Closes the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.close();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async close() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'close'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Whether the window should have borders and bars.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setDecorations(false);\n   * ```\n   *\n   * @param decorations Whether the window should have borders and bars.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setDecorations(decorations) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setDecorations',\n            payload: decorations\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Whether the window should always be on top of other windows.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setAlwaysOnTop(true);\n   * ```\n   *\n   * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setAlwaysOnTop(alwaysOnTop) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setAlwaysOnTop',\n            payload: alwaysOnTop\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Prevents the window contents from being captured by other apps.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setContentProtected(true);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   *\n   * @since 1.2.0\n   */\n  async setContentProtected(protected_) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setContentProtected',\n            payload: protected_\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Resizes the window with a new inner size.\n   * @example\n   * ```typescript\n   * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n   * await appWindow.setSize(new LogicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSize(size) {\n    if (!size || size.type !== 'Logical' && size.type !== 'Physical') {\n      throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setSize',\n            payload: {\n              type: size.type,\n              data: {\n                width: size.width,\n                height: size.height\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n   * @example\n   * ```typescript\n   * import { appWindow, PhysicalSize } from '@tauri-apps/api/window';\n   * await appWindow.setMinSize(new PhysicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size, or `null` to unset the constraint.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMinSize(size) {\n    if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n      throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setMinSize',\n            payload: size ? {\n              type: size.type,\n              data: {\n                width: size.width,\n                height: size.height\n              }\n            } : null\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n   * @example\n   * ```typescript\n   * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n   * await appWindow.setMaxSize(new LogicalSize(600, 500));\n   * ```\n   *\n   * @param size The logical or physical inner size, or `null` to unset the constraint.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setMaxSize(size) {\n    if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n      throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setMaxSize',\n            payload: size ? {\n              type: size.type,\n              data: {\n                width: size.width,\n                height: size.height\n              }\n            } : null\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window outer position.\n   * @example\n   * ```typescript\n   * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n   * await appWindow.setPosition(new LogicalPosition(600, 500));\n   * ```\n   *\n   * @param position The new position, in logical or physical pixels.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setPosition(position) {\n    if (!position || position.type !== 'Logical' && position.type !== 'Physical') {\n      throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setPosition',\n            payload: {\n              type: position.type,\n              data: {\n                x: position.x,\n                y: position.y\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window fullscreen state.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setFullscreen(true);\n   * ```\n   *\n   * @param fullscreen Whether the window should go to fullscreen or not.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setFullscreen(fullscreen) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setFullscreen',\n            payload: fullscreen\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Bring the window to front and focus.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setFocus();\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setFocus() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setFocus'\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Sets the window icon.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setIcon('/tauri/awesome.png');\n   * ```\n   *\n   * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\n   * To enable it, change your Cargo.toml file:\n   * ```toml\n   * [dependencies]\n   * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\n   * ```\n   *\n   * @param icon Icon bytes or path to the icon file.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setIcon(icon) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setIcon',\n            payload: {\n              // correctly serialize Uint8Arrays\n              icon: typeof icon === 'string' ? icon : Array.from(icon)\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Whether the window icon should be hidden from the taskbar or not.\n   *\n   * #### Platform-specific\n   *\n   * - **macOS:** Unsupported.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setSkipTaskbar(true);\n   * ```\n   *\n   * @param skip true to hide window icon, false to show it.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setSkipTaskbar(skip) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setSkipTaskbar',\n            payload: skip\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Grabs the cursor, preventing it from leaving the window.\n   *\n   * There's no guarantee that the cursor will be hidden. You should\n   * hide it by yourself if you want so.\n   *\n   * #### Platform-specific\n   *\n   * - **Linux:** Unsupported.\n   * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setCursorGrab(true);\n   * ```\n   *\n   * @param grab `true` to grab the cursor icon, `false` to release it.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorGrab(grab) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setCursorGrab',\n            payload: grab\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Modifies the cursor's visibility.\n   *\n   * #### Platform-specific\n   *\n   * - **Windows:** The cursor is only hidden within the confines of the window.\n   * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n   *   outside of the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setCursorVisible(false);\n   * ```\n   *\n   * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorVisible(visible) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setCursorVisible',\n            payload: visible\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Modifies the cursor icon of the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setCursorIcon('help');\n   * ```\n   *\n   * @param icon The new cursor icon.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorIcon(icon) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setCursorIcon',\n            payload: icon\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Changes the position of the cursor in window coordinates.\n   * @example\n   * ```typescript\n   * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n   * await appWindow.setCursorPosition(new LogicalPosition(600, 300));\n   * ```\n   *\n   * @param position The new cursor position.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setCursorPosition(position) {\n    if (!position || position.type !== 'Logical' && position.type !== 'Physical') {\n      throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setCursorPosition',\n            payload: {\n              type: position.type,\n              data: {\n                x: position.x,\n                y: position.y\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Changes the cursor events behavior.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.setIgnoreCursorEvents(true);\n   * ```\n   *\n   * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async setIgnoreCursorEvents(ignore) {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'setIgnoreCursorEvents',\n            payload: ignore\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Starts dragging the window.\n   * @example\n   * ```typescript\n   * import { appWindow } from '@tauri-apps/api/window';\n   * await appWindow.startDragging();\n   * ```\n   *\n   * @return A promise indicating the success or failure of the operation.\n   */\n  async startDragging() {\n    return invokeTauriCommand({\n      __tauriModule: 'Window',\n      message: {\n        cmd: 'manage',\n        data: {\n          label: this.label,\n          cmd: {\n            type: 'startDragging'\n          }\n        }\n      }\n    });\n  }\n  // Listeners\n  /**\n   * Listen to window resize.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onResized(({ payload: size }) => {\n   *  console.log('Window resized', size);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onResized(handler) {\n    return this.listen(TauriEvent.WINDOW_RESIZED, e => {\n      e.payload = mapPhysicalSize(e.payload);\n      handler(e);\n    });\n  }\n  /**\n   * Listen to window move.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onMoved(({ payload: position }) => {\n   *  console.log('Window moved', position);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onMoved(handler) {\n    return this.listen(TauriEvent.WINDOW_MOVED, e => {\n      e.payload = mapPhysicalPosition(e.payload);\n      handler(e);\n    });\n  }\n  /**\n   * Listen to window close requested. Emitted when the user requests to closes the window.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * import { confirm } from '@tauri-apps/api/dialog';\n   * const unlisten = await appWindow.onCloseRequested(async (event) => {\n   *   const confirmed = await confirm('Are you sure?');\n   *   if (!confirmed) {\n   *     // user did not confirm closing the window; let's prevent it\n   *     event.preventDefault();\n   *   }\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  /* eslint-disable @typescript-eslint/promise-function-async */\n  async onCloseRequested(handler) {\n    return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, event => {\n      const evt = new CloseRequestedEvent(event);\n      void Promise.resolve(handler(evt)).then(() => {\n        if (!evt.isPreventDefault()) {\n          return this.close();\n        }\n      });\n    });\n  }\n  /* eslint-enable */\n  /**\n   * Listen to window focus change.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onFocusChanged(({ payload: focused }) => {\n   *  console.log('Focus changed, window is focused? ' + focused);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onFocusChanged(handler) {\n    const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, event => {\n      handler({\n        ...event,\n        payload: true\n      });\n    });\n    const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, event => {\n      handler({\n        ...event,\n        payload: false\n      });\n    });\n    return () => {\n      unlistenFocus();\n      unlistenBlur();\n    };\n  }\n  /**\n   * Listen to window scale change. Emitted when the window's scale factor has changed.\n   * The following user actions can cause DPI changes:\n   * - Changing the display's resolution.\n   * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n   * - Moving the window to a display with a different scale factor.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onScaleChanged(({ payload }) => {\n   *  console.log('Scale changed', payload.scaleFactor, payload.size);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onScaleChanged(handler) {\n    return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n  }\n  /**\n   * Listen to the window menu item click. The payload is the item id.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onMenuClicked(({ payload: menuId }) => {\n   *  console.log('Menu clicked: ' + menuId);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onMenuClicked(handler) {\n    return this.listen(TauriEvent.MENU, handler);\n  }\n  /**\n   * Listen to a file drop event.\n   * The listener is triggered when the user hovers the selected files on the window,\n   * drops the files or cancels the operation.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onFileDropEvent((event) => {\n   *  if (event.payload.type === 'hover') {\n   *    console.log('User hovering', event.payload.paths);\n   *  } else if (event.payload.type === 'drop') {\n   *    console.log('User dropped', event.payload.paths);\n   *  } else {\n   *    console.log('File drop cancelled');\n   *  }\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onFileDropEvent(handler) {\n    const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'drop',\n          paths: event.payload\n        }\n      });\n    });\n    const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'hover',\n          paths: event.payload\n        }\n      });\n    });\n    const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, event => {\n      handler({\n        ...event,\n        payload: {\n          type: 'cancel'\n        }\n      });\n    });\n    return () => {\n      unlistenFileDrop();\n      unlistenFileHover();\n      unlistenCancel();\n    };\n  }\n  /**\n   * Listen to the system theme change.\n   *\n   * @example\n   * ```typescript\n   * import { appWindow } from \"@tauri-apps/api/window\";\n   * const unlisten = await appWindow.onThemeChanged(({ payload: theme }) => {\n   *  console.log('New theme: ' + theme);\n   * });\n   *\n   * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n   * unlisten();\n   * ```\n   *\n   * @returns A promise resolving to a function to unlisten to the event.\n   * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n   *\n   * @since 1.0.2\n   */\n  async onThemeChanged(handler) {\n    return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n  }\n}\n/**\n * @since 1.0.2\n */\nclass CloseRequestedEvent {\n  constructor(event) {\n    this._preventDefault = false;\n    this.event = event.event;\n    this.windowLabel = event.windowLabel;\n    this.id = event.id;\n  }\n  preventDefault() {\n    this._preventDefault = true;\n  }\n  isPreventDefault() {\n    return this._preventDefault;\n  }\n}\n/**\n * Create new webview windows and get a handle to existing ones.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * // loading embedded asset:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview window successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview window\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event name\", e => {});\n * unlisten();\n * ```\n *\n * @since 1.0.2\n */\nclass WebviewWindow extends WindowManager {\n  /**\n   * Creates a new WebviewWindow.\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/window';\n   * const webview = new WebviewWindow('my-label', {\n   *   url: 'https://github.com/tauri-apps/tauri'\n   * });\n   * webview.once('tauri://created', function () {\n   *  // webview window successfully created\n   * });\n   * webview.once('tauri://error', function (e) {\n   *  // an error happened creating the webview window\n   * });\n   * ```\n   *\n   * * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\n   * @returns The WebviewWindow instance to communicate with the webview.\n   */\n  constructor(label, options = {}) {\n    super(label);\n    // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n    if (!options?.skip) {\n      invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n          cmd: 'createWebview',\n          data: {\n            options: {\n              label,\n              ...options\n            }\n          }\n        }\n      }).then(async () => this.emit('tauri://created')).catch(async e => this.emit('tauri://error', e));\n    }\n  }\n  /**\n   * Gets the WebviewWindow for the webview associated with the given label.\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/window';\n   * const mainWindow = WebviewWindow.getByLabel('main');\n   * ```\n   *\n   * @param label The webview window label.\n   * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n   */\n  static getByLabel(label) {\n    if (getAll().some(w => w.label === label)) {\n      // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n      return new WebviewWindow(label, {\n        skip: true\n      });\n    }\n    return null;\n  }\n  /**\n   *  Gets the focused window.\n   * @example\n   * ```typescript\n   * import { WebviewWindow } from '@tauri-apps/api/window';\n   * const focusedWindow = WebviewWindow.getFocusedWindow();\n   * ```\n   *\n   * @returns The WebviewWindow instance to communicate with the webview or `undefined` if there is not any focused window.\n   *\n   * @since 1.4\n   */\n  static async getFocusedWindow() {\n    for (const w of getAll()) {\n      if (await w.isFocused()) {\n        return w;\n      }\n    }\n    return null;\n  }\n}\n/** The WebviewWindow for the current window. */\nlet appWindow;\nif ('__TAURI_METADATA__' in window) {\n  appWindow = new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  });\n} else {\n  console.warn(`Could not find \"window.__TAURI_METADATA__\". The \"appWindow\" value will reference the \"main\" window label.\\nNote that this is not an issue if running this frontend on a browser instead of a Tauri window.`);\n  appWindow = new WebviewWindow('main', {\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    skip: true\n  });\n}\nfunction mapMonitor(m) {\n  return m === null ? null : {\n    name: m.name,\n    scaleFactor: m.scaleFactor,\n    position: mapPhysicalPosition(m.position),\n    size: mapPhysicalSize(m.size)\n  };\n}\nfunction mapPhysicalPosition(m) {\n  return new PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n  return new PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n  return invokeTauriCommand({\n    __tauriModule: 'Window',\n    message: {\n      cmd: 'manage',\n      data: {\n        cmd: {\n          type: 'currentMonitor'\n        }\n      }\n    }\n  }).then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n  return invokeTauriCommand({\n    __tauriModule: 'Window',\n    message: {\n      cmd: 'manage',\n      data: {\n        cmd: {\n          type: 'primaryMonitor'\n        }\n      }\n    }\n  }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n  return invokeTauriCommand({\n    __tauriModule: 'Window',\n    message: {\n      cmd: 'manage',\n      data: {\n        cmd: {\n          type: 'availableMonitors'\n        }\n      }\n    }\n  }).then(ms => ms.map(mapMonitor));\n}\nexport { CloseRequestedEvent, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, WebviewWindow, WebviewWindowHandle, WindowManager, appWindow, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };","map":{"version":3,"names":["invokeTauriCommand","listen","once","emit","TauriEvent","LogicalSize","constructor","width","height","type","PhysicalSize","toLogical","scaleFactor","LogicalPosition","x","y","PhysicalPosition","UserAttentionType","getCurrent","WebviewWindow","window","__TAURI_METADATA__","__currentWindow","label","skip","getAll","__windows","map","w","localTauriEvents","WebviewWindowHandle","listeners","Object","create","event","handler","_handleTauriEvent","Promise","resolve","splice","indexOf","payload","includes","id","windowLabel","push","WindowManager","__tauriModule","message","cmd","data","innerPosition","then","outerPosition","innerSize","outerSize","isFullscreen","isMinimized","isMaximized","isFocused","isDecorated","isResizable","isMaximizable","isMinimizable","isClosable","isVisible","title","theme","center","requestUserAttention","requestType","requestType_","Critical","setResizable","resizable","setMaximizable","maximizable","setMinimizable","minimizable","setClosable","closable","setTitle","maximize","unmaximize","toggleMaximize","minimize","unminimize","show","hide","close","setDecorations","decorations","setAlwaysOnTop","alwaysOnTop","setContentProtected","protected_","setSize","size","Error","setMinSize","setMaxSize","setPosition","position","setFullscreen","fullscreen","setFocus","setIcon","icon","Array","from","setSkipTaskbar","setCursorGrab","grab","setCursorVisible","visible","setCursorIcon","setCursorPosition","setIgnoreCursorEvents","ignore","startDragging","onResized","WINDOW_RESIZED","e","mapPhysicalSize","onMoved","WINDOW_MOVED","mapPhysicalPosition","onCloseRequested","WINDOW_CLOSE_REQUESTED","evt","CloseRequestedEvent","isPreventDefault","onFocusChanged","unlistenFocus","WINDOW_FOCUS","unlistenBlur","WINDOW_BLUR","onScaleChanged","WINDOW_SCALE_FACTOR_CHANGED","onMenuClicked","MENU","onFileDropEvent","unlistenFileDrop","WINDOW_FILE_DROP","paths","unlistenFileHover","WINDOW_FILE_DROP_HOVER","unlistenCancel","WINDOW_FILE_DROP_CANCELLED","onThemeChanged","WINDOW_THEME_CHANGED","_preventDefault","preventDefault","options","catch","getByLabel","some","getFocusedWindow","appWindow","console","warn","mapMonitor","m","name","currentMonitor","primaryMonitor","availableMonitors","ms"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/node_modules/@tauri-apps/api/window.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\nimport { listen, once, emit } from './helpers/event.js';\nimport { TauriEvent } from './event.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * This package is also accessible with `window.__TAURI__.window` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.window`](https://tauri.app/v1/api/config/#allowlistconfig.window) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"window\": {\n *         \"all\": true, // enable all window APIs\n *         \"create\": true, // enable window creation\n *         \"center\": true,\n *         \"requestUserAttention\": true,\n *         \"setResizable\": true,\n *         \"setMaximizable\": true,\n *         \"setMinimizable\": true,\n *         \"setClosable\": true,\n *         \"setTitle\": true,\n *         \"maximize\": true,\n *         \"unmaximize\": true,\n *         \"minimize\": true,\n *         \"unminimize\": true,\n *         \"show\": true,\n *         \"hide\": true,\n *         \"close\": true,\n *         \"setDecorations\": true,\n *         \"setAlwaysOnTop\": true,\n *         \"setContentProtected\": true,\n *         \"setSize\": true,\n *         \"setMinSize\": true,\n *         \"setMaxSize\": true,\n *         \"setPosition\": true,\n *         \"setFullscreen\": true,\n *         \"setFocus\": true,\n *         \"setIcon\": true,\n *         \"setSkipTaskbar\": true,\n *         \"setCursorGrab\": true,\n *         \"setCursorVisible\": true,\n *         \"setCursorIcon\": true,\n *         \"setCursorPosition\": true,\n *         \"setIgnoreCursorEvents\": true,\n *         \"startDragging\": true,\n *         \"print\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Window events\n *\n * Events can be listened to using `appWindow.listen`:\n * ```typescript\n * import { appWindow } from \"@tauri-apps/api/window\";\n * appWindow.listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * A size represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalSize {\n    constructor(width, height) {\n        this.type = 'Logical';\n        this.width = width;\n        this.height = height;\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalSize {\n    constructor(width, height) {\n        this.type = 'Physical';\n        this.width = width;\n        this.height = height;\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize();\n     * const logical = size.toLogical(factor);\n     * ```\n     *  */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 1.0.0\n */\nclass LogicalPosition {\n    constructor(x, y) {\n        this.type = 'Logical';\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 1.0.0\n */\nclass PhysicalPosition {\n    constructor(x, y) {\n        this.type = 'Physical';\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * const position = await appWindow.innerPosition();\n     * const logical = position.toLogical(factor);\n     * ```\n     * */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n}\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\n/**\n * Get an instance of `WebviewWindow` for the current webview window.\n *\n * @since 1.0.0\n */\nfunction getCurrent() {\n    return new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `WebviewWindow` for all available webview windows.\n *\n * @since 1.0.0\n */\nfunction getAll() {\n    return window.__TAURI_METADATA__.__windows.map((w) => new WebviewWindow(w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * A webview window handle allows emitting and listening to events from the backend that are tied to the window.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WebviewWindowHandle {\n    constructor(label) {\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n    }\n    /**\n     * Listen to an event emitted by the backend or webview.\n     * The event must either be a global event or an event targetting this window.\n     *\n     * See {@link WebviewWindow.emit | `emit`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return listen(event, this.label, handler);\n    }\n    /**\n     * Listen to an one-off event.\n     * See {@link WebviewWindow.listen | `listen`} for more information.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const unlisten = await appWindow.once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return Promise.resolve(() => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            });\n        }\n        return once(event, this.label, handler);\n    }\n    /**\n     * Emits an event to the backend and all Tauri windows.\n     * The event will have this window's {@link WebviewWindow.label | label} as {@link Event.windowLabel | source window label}.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * This function can also be used to communicate between windows:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.listen('sync-data', (event) => { });\n     *\n     * // on another window...\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const otherWindow = WebviewWindow.getByLabel('other')\n     * await otherWindow.emit('sync-data');\n     * ```\n     *\n     * Global listeners are also triggered:\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * import { listen } from '@tauri-apps/api/event';\n     * await listen('ping', (event) => { });\n     *\n     * await appWindow.emit('ping');\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({ event, id: -1, windowLabel: this.label, payload });\n            }\n            return Promise.resolve();\n        }\n        return emit(event, this.label, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n}\n/**\n * Manage the current window object.\n *\n * @ignore\n * @since 1.0.0\n */\nclass WindowManager extends WebviewWindowHandle {\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const factor = await appWindow.scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     * */\n    async scaleFactor() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'scaleFactor'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     *  */\n    async innerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const position = await appWindow.outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     *  */\n    async outerPosition() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerPosition'\n                    }\n                }\n            }\n        }).then(({ x, y }) => new PhysicalPosition(x, y));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'innerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const size = await appWindow.outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'outerSize'\n                    }\n                }\n            }\n        }).then(({ width, height }) => new PhysicalSize(width, height));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await appWindow.isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     *  */\n    async isFullscreen() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFullscreen'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimized = await appWindow.isMinimized();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async isMinimized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximized = await appWindow.isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     * */\n    async isMaximized() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximized'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const focused = await appWindow.isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     *\n     * @since 1.4\n     * */\n    async isFocused() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isFocused'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const decorated = await appWindow.isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     *  */\n    async isDecorated() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isDecorated'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const resizable = await appWindow.isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     *  */\n    async isResizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isResizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const maximizable = await appWindow.isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     *  */\n    async isMaximizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMaximizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const minimizable = await appWindow.isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     *  */\n    async isMinimizable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isMinimizable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window’s native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const closable = await appWindow.isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     *  */\n    async isClosable() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isClosable'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const visible = await appWindow.isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     *  */\n    async isVisible() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'isVisible'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const title = await appWindow.title();\n     * ```\n     *\n     * @since 1.3.0\n     * */\n    async title() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'title'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * const theme = await appWindow.theme();\n     * ```\n     *\n     * @returns The window theme.\n     * */\n    async theme() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'theme'\n                    }\n                }\n            }\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'center'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.requestUserAttention();\n     * ```\n     *\n     * @param requestType\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'requestUserAttention',\n                        payload: requestType_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setResizable(false);\n     * ```\n     *\n     * @param resizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setResizable',\n                        payload: resizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMaximizable(false);\n     * ```\n     *\n     * @param maximizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaximizable',\n                        payload: maximizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setMinimizable(false);\n     * ```\n     *\n     * @param minimizable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinimizable',\n                        payload: minimizable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setClosable(false);\n     * ```\n     *\n     * @param closable\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setClosable',\n                        payload: closable\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setTitle',\n                        payload: title\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'maximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unmaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'toggleMaximize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'minimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'unminimize'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'show'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'hide'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Closes the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'close'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setDecorations',\n                        payload: decorations\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setAlwaysOnTop',\n                        payload: alwaysOnTop\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 1.2.0\n     */\n    async setContentProtected(protected_) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setContentProtected',\n                        payload: protected_\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        if (!size || (size.type !== 'Logical' && size.type !== 'Physical')) {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSize',\n                        payload: {\n                            type: size.type,\n                            data: {\n                                width: size.width,\n                                height: size.height\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMinSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await appWindow.setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        if (size && size.type !== 'Logical' && size.type !== 'Physical') {\n            throw new Error('the `size` argument must be either a LogicalSize or a PhysicalSize instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setMaxSize',\n                        payload: size\n                            ? {\n                                type: size.type,\n                                data: {\n                                    width: size.width,\n                                    height: size.height\n                                }\n                            }\n                            : null\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFullscreen',\n                        payload: fullscreen\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setFocus'\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you need the `icon-ico` or `icon-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"icon-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIcon',\n                        payload: {\n                            // correctly serialize Uint8Arrays\n                            icon: typeof icon === 'string' ? icon : Array.from(icon)\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setSkipTaskbar',\n                        payload: skip\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorGrab',\n                        payload: grab\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorVisible',\n                        payload: visible\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorIcon',\n                        payload: icon\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { appWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await appWindow.setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        if (!position ||\n            (position.type !== 'Logical' && position.type !== 'Physical')) {\n            throw new Error('the `position` argument must be either a LogicalPosition or a PhysicalPosition instance');\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setCursorPosition',\n                        payload: {\n                            type: position.type,\n                            data: {\n                                x: position.x,\n                                y: position.y\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'setIgnoreCursorEvents',\n                        payload: ignore\n                    }\n                }\n            }\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { appWindow } from '@tauri-apps/api/window';\n     * await appWindow.startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invokeTauriCommand({\n            __tauriModule: 'Window',\n            message: {\n                cmd: 'manage',\n                data: {\n                    label: this.label,\n                    cmd: {\n                        type: 'startDragging'\n                    }\n                }\n            }\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = mapPhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = mapPhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await appWindow.onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    /* eslint-disable @typescript-eslint/promise-function-async */\n    async onCloseRequested(handler) {\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, (event) => {\n            const evt = new CloseRequestedEvent(event);\n            void Promise.resolve(handler(evt)).then(() => {\n                if (!evt.isPreventDefault()) {\n                    return this.close();\n                }\n            });\n        });\n    }\n    /* eslint-enable */\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the window menu item click. The payload is the item id.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onMenuClicked(({ payload: menuId }) => {\n     *  console.log('Menu clicked: ' + menuId);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onMenuClicked(handler) {\n        return this.listen(TauriEvent.MENU, handler);\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the window,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onFileDropEvent((event) => {\n     *  if (event.payload.type === 'hover') {\n     *    console.log('User hovering', event.payload.paths);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onFileDropEvent(handler) {\n        const unlistenFileDrop = await this.listen(TauriEvent.WINDOW_FILE_DROP, (event) => {\n            handler({ ...event, payload: { type: 'drop', paths: event.payload } });\n        });\n        const unlistenFileHover = await this.listen(TauriEvent.WINDOW_FILE_DROP_HOVER, (event) => {\n            handler({ ...event, payload: { type: 'hover', paths: event.payload } });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.WINDOW_FILE_DROP_CANCELLED, (event) => {\n            handler({ ...event, payload: { type: 'cancel' } });\n        });\n        return () => {\n            unlistenFileDrop();\n            unlistenFileHover();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { appWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await appWindow.onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     *\n     * @since 1.0.2\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * @since 1.0.2\n */\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.windowLabel = event.windowLabel;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\n/**\n * Create new webview windows and get a handle to existing ones.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * // loading embedded asset:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new WebviewWindow('theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview window successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview window\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event name\", e => {});\n * unlisten();\n * ```\n *\n * @since 1.0.2\n */\nclass WebviewWindow extends WindowManager {\n    /**\n     * Creates a new WebviewWindow.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview window successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview window\n     * });\n     * ```\n     *\n     * * @param label The unique webview window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The WebviewWindow instance to communicate with the webview.\n     */\n    constructor(label, options = {}) {\n        super(label);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!options?.skip) {\n            invokeTauriCommand({\n                __tauriModule: 'Window',\n                message: {\n                    cmd: 'createWebview',\n                    data: {\n                        options: {\n                            label,\n                            ...options\n                        }\n                    }\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the WebviewWindow for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const mainWindow = WebviewWindow.getByLabel('main');\n     * ```\n     *\n     * @param label The webview window label.\n     * @returns The WebviewWindow instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static getByLabel(label) {\n        if (getAll().some((w) => w.label === label)) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/window';\n     * const focusedWindow = WebviewWindow.getFocusedWindow();\n     * ```\n     *\n     * @returns The WebviewWindow instance to communicate with the webview or `undefined` if there is not any focused window.\n     *\n     * @since 1.4\n     */\n    static async getFocusedWindow() {\n        for (const w of getAll()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n}\n/** The WebviewWindow for the current window. */\nlet appWindow;\nif ('__TAURI_METADATA__' in window) {\n    appWindow = new WebviewWindow(window.__TAURI_METADATA__.__currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nelse {\n    console.warn(`Could not find \"window.__TAURI_METADATA__\". The \"appWindow\" value will reference the \"main\" window label.\\nNote that this is not an issue if running this frontend on a browser instead of a Tauri window.`);\n    appWindow = new WebviewWindow('main', {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: mapPhysicalPosition(m.position),\n            size: mapPhysicalSize(m.size)\n        };\n}\nfunction mapPhysicalPosition(m) {\n    return new PhysicalPosition(m.x, m.y);\n}\nfunction mapPhysicalSize(m) {\n    return new PhysicalSize(m.width, m.height);\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'currentMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'primaryMonitor'\n                }\n            }\n        }\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invokeTauriCommand({\n        __tauriModule: 'Window',\n        message: {\n            cmd: 'manage',\n            data: {\n                cmd: {\n                    type: 'availableMonitors'\n                }\n            }\n        }\n    }).then((ms) => ms.map(mapMonitor));\n}\n\nexport { CloseRequestedEvent, LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, UserAttentionType, WebviewWindow, WebviewWindowHandle, WindowManager, appWindow, availableMonitors, currentMonitor, getAll, getCurrent, primaryMonitor };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,MAAM,EAAEC,IAAI,EAAEC,IAAI,QAAQ,oBAAoB;AACvD,SAASC,UAAU,QAAQ,YAAY;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACdC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;IACvB,IAAI,CAACC,IAAI,GAAG,SAAS;IACrB,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,YAAY,CAAC;EACfJ,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;IACvB,IAAI,CAACC,IAAI,GAAG,UAAU;IACtB,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,SAASA,CAACC,WAAW,EAAE;IACnB,OAAO,IAAIP,WAAW,CAAC,IAAI,CAACE,KAAK,GAAGK,WAAW,EAAE,IAAI,CAACJ,MAAM,GAAGI,WAAW,CAAC;EAC/E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EAClBP,WAAWA,CAACQ,CAAC,EAAEC,CAAC,EAAE;IACd,IAAI,CAACN,IAAI,GAAG,SAAS;IACrB,IAAI,CAACK,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnBV,WAAWA,CAACQ,CAAC,EAAEC,CAAC,EAAE;IACd,IAAI,CAACN,IAAI,GAAG,UAAU;IACtB,IAAI,CAACK,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,SAASA,CAACC,WAAW,EAAE;IACnB,OAAO,IAAIC,eAAe,CAAC,IAAI,CAACC,CAAC,GAAGF,WAAW,EAAE,IAAI,CAACG,CAAC,GAAGH,WAAW,CAAC;EAC1E;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,iBAAiB;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1B;AACJ;AACA;AACA;AACA;EACIA,iBAAiB,CAACA,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU;EACjE;AACJ;AACA;AACA;AACA;EACIA,iBAAiB,CAACA,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe;AAC/E,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAA,EAAG;EAClB,OAAO,IAAIC,aAAa,CAACC,MAAM,CAACC,kBAAkB,CAACC,eAAe,CAACC,KAAK,EAAE;IACtE;IACAC,IAAI,EAAE;EACV,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAAA,EAAG;EACd,OAAOL,MAAM,CAACC,kBAAkB,CAACK,SAAS,CAACC,GAAG,CAAEC,CAAC,IAAK,IAAIT,aAAa,CAACS,CAAC,CAACL,KAAK,EAAE;IAC7E;IACAC,IAAI,EAAE;EACV,CAAC,CAAC,CAAC;AACP;AACA;AACA;AACA,MAAMK,gBAAgB,GAAG,CAAC,iBAAiB,EAAE,eAAe,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACtBxB,WAAWA,CAACiB,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,IAAI,CAACQ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMhC,MAAMA,CAACiC,KAAK,EAAEC,OAAO,EAAE;IACzB,IAAI,IAAI,CAACC,iBAAiB,CAACF,KAAK,EAAEC,OAAO,CAAC,EAAE;MACxC,OAAOE,OAAO,CAACC,OAAO,CAAC,MAAM;QACzB;QACA,MAAMP,SAAS,GAAG,IAAI,CAACA,SAAS,CAACG,KAAK,CAAC;QACvCH,SAAS,CAACQ,MAAM,CAACR,SAAS,CAACS,OAAO,CAACL,OAAO,CAAC,EAAE,CAAC,CAAC;MACnD,CAAC,CAAC;IACN;IACA,OAAOlC,MAAM,CAACiC,KAAK,EAAE,IAAI,CAACX,KAAK,EAAEY,OAAO,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMjC,IAAIA,CAACgC,KAAK,EAAEC,OAAO,EAAE;IACvB,IAAI,IAAI,CAACC,iBAAiB,CAACF,KAAK,EAAEC,OAAO,CAAC,EAAE;MACxC,OAAOE,OAAO,CAACC,OAAO,CAAC,MAAM;QACzB;QACA,MAAMP,SAAS,GAAG,IAAI,CAACA,SAAS,CAACG,KAAK,CAAC;QACvCH,SAAS,CAACQ,MAAM,CAACR,SAAS,CAACS,OAAO,CAACL,OAAO,CAAC,EAAE,CAAC,CAAC;MACnD,CAAC,CAAC;IACN;IACA,OAAOjC,IAAI,CAACgC,KAAK,EAAE,IAAI,CAACX,KAAK,EAAEY,OAAO,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM+G,SAASA,CAACrF,OAAO,EAAE;IACrB,OAAO,IAAI,CAAClC,MAAM,CAACG,UAAU,CAACqH,cAAc,EAAGC,CAAC,IAAK;MACjDA,CAAC,CAACjF,OAAO,GAAGkF,eAAe,CAACD,CAAC,CAACjF,OAAO,CAAC;MACtCN,OAAO,CAACuF,CAAC,CAAC;IACd,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,OAAOA,CAACzF,OAAO,EAAE;IACnB,OAAO,IAAI,CAAClC,MAAM,CAACG,UAAU,CAACyH,YAAY,EAAGH,CAAC,IAAK;MAC/CA,CAAC,CAACjF,OAAO,GAAGqF,mBAAmB,CAACJ,CAAC,CAACjF,OAAO,CAAC;MAC1CN,OAAO,CAACuF,CAAC,CAAC;IACd,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA,MAAMK,gBAAgBA,CAAC5F,OAAO,EAAE;IAC5B,OAAO,IAAI,CAAClC,MAAM,CAACG,UAAU,CAAC4H,sBAAsB,EAAG9F,KAAK,IAAK;MAC7D,MAAM+F,GAAG,GAAG,IAAIC,mBAAmB,CAAChG,KAAK,CAAC;MAC1C,KAAKG,OAAO,CAACC,OAAO,CAACH,OAAO,CAAC8F,GAAG,CAAC,CAAC,CAAC7E,IAAI,CAAC,MAAM;QAC1C,IAAI,CAAC6E,GAAG,CAACE,gBAAgB,CAAC,CAAC,EAAE;UACzB,OAAO,IAAI,CAAC1C,KAAK,CAAC,CAAC;QACvB;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM2C,cAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}