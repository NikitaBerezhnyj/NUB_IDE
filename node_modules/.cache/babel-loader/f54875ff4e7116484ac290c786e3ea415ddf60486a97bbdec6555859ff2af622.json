{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n\n//     // Створення коментаря\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n\n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n\n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n\n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n\n//         moveToLineStart();\n\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n\n//         let newText;\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             // Видаляємо коментар\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } else {\n//             // Додаємо коментар\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n\n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };   \n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n\n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleEnterPress);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n\n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea \n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </textarea>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  programming_language,\n  fileContent\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const [history, setHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(-1);\n  const divRef = useRef(null);\n  useEffect(() => {\n    if (fileContent) {\n      if (fileContent == \"new_file\") {\n        setText(\"\");\n      } else {\n        setText(fileContent);\n      }\n    }\n  }, [fileContent]);\n  const handleChange = event => {\n    setText(event.target.textContent);\n    const newHistory = [...history.slice(0, currentStep + 1), event.target.textContent];\n    setHistory(newHistory);\n    setCurrentStep(newHistory.length - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-numbers\",\n      className: \"code-lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      contentEditable: true,\n      id: \"code-editor\",\n      className: \"code-editor\",\n      onInput: handleChange,\n      dangerouslySetInnerHTML: {\n        __html: text\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 9\n  }, this);\n}\n_s(CodeEditor, \"xN9iHaUG5xZ3nOt0lBb17c68mA4=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Container","jsxDEV","_jsxDEV","CodeEditor","programming_language","fileContent","_s","text","setText","history","setHistory","currentStep","setCurrentStep","divRef","handleChange","event","target","textContent","newHistory","slice","length","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","contentEditable","onInput","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n\n//     // Створення коментаря\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n    \n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n        \n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n    \n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n    \n//         moveToLineStart();\n        \n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n        \n//         let newText;\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             // Видаляємо коментар\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } else {\n//             // Додаємо коментар\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n        \n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };   \n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n    \n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n    \n//         window.addEventListener('keydown', handleEnterPress);\n    \n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n        \n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea \n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </textarea>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\n\nexport default function CodeEditor({ programming_language, fileContent }) {\n    const [text, setText] = useState('');\n    const [history, setHistory] = useState([]);\n    const [currentStep, setCurrentStep] = useState(-1);\n    const divRef = useRef(null);\n\n    useEffect(() => {\n        if (fileContent) {\n            if(fileContent == \"new_file\") {\n                setText(\"\");\n            } else {\n                setText(fileContent);\n            }\n        }\n    }, [fileContent]);\n\n    const handleChange = (event) => {\n        setText(event.target.textContent);\n        const newHistory = [...history.slice(0, currentStep + 1), event.target.textContent];\n        setHistory(newHistory);\n        setCurrentStep(newHistory.length - 1);\n    };\n\n    return (\n        <Container className='code-editor-container'>\n            <div id=\"line-numbers\" className=\"code-lines\"></div>\n            <div \n                ref={divRef}\n                contentEditable={true}\n                id=\"code-editor\" \n                className='code-editor'\n                onInput={handleChange}\n                dangerouslySetInnerHTML={{__html: text}}>\n            </div>\n        </Container>\n    );\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,eAAe,SAASC,UAAUA,CAAC;EAAEC,oBAAoB;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACtE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAMgB,MAAM,GAAGd,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ,IAAIO,WAAW,EAAE;MACb,IAAGA,WAAW,IAAI,UAAU,EAAE;QAC1BG,OAAO,CAAC,EAAE,CAAC;MACf,CAAC,MAAM;QACHA,OAAO,CAACH,WAAW,CAAC;MACxB;IACJ;EACJ,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMS,YAAY,GAAIC,KAAK,IAAK;IAC5BP,OAAO,CAACO,KAAK,CAACC,MAAM,CAACC,WAAW,CAAC;IACjC,MAAMC,UAAU,GAAG,CAAC,GAAGT,OAAO,CAACU,KAAK,CAAC,CAAC,EAAER,WAAW,GAAG,CAAC,CAAC,EAAEI,KAAK,CAACC,MAAM,CAACC,WAAW,CAAC;IACnFP,UAAU,CAACQ,UAAU,CAAC;IACtBN,cAAc,CAACM,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC;EACzC,CAAC;EAED,oBACIlB,OAAA,CAACF,SAAS;IAACqB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACxCpB,OAAA;MAAKqB,EAAE,EAAC,cAAc;MAACF,SAAS,EAAC;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpDzB,OAAA;MACI0B,GAAG,EAAEf,MAAO;MACZgB,eAAe,EAAE,IAAK;MACtBN,EAAE,EAAC,aAAa;MAChBF,SAAS,EAAC,aAAa;MACvBS,OAAO,EAAEhB,YAAa;MACtBiB,uBAAuB,EAAE;QAACC,MAAM,EAAEzB;MAAI;IAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEpB;AAACrB,EAAA,CApCuBH,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}