{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Send toast notifications (brief auto-expiring OS window element) to your user.\n * Can also be used with the Notification Web API.\n *\n * This package is also accessible with `window.__TAURI__.notification` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.notification`](https://tauri.app/v1/api/config/#allowlistconfig.notification) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"notification\": {\n *         \"all\": true // enable all notification APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Checks if the permission to send notifications is granted.\n * @example\n * ```typescript\n * import { isPermissionGranted } from '@tauri-apps/api/notification';\n * const permissionGranted = await isPermissionGranted();\n * ```\n *\n * @since 1.0.0\n */\nasync function isPermissionGranted() {\n  if (window.Notification.permission !== 'default') {\n    return Promise.resolve(window.Notification.permission === 'granted');\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Notification',\n    message: {\n      cmd: 'isNotificationPermissionGranted'\n    }\n  });\n}\n/**\n * Requests the permission to send notifications.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * ```\n *\n * @returns A promise resolving to whether the user granted the permission or not.\n *\n * @since 1.0.0\n */\nasync function requestPermission() {\n  return window.Notification.requestPermission();\n}\n/**\n * Sends a notification to the user.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission, sendNotification } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * if (permissionGranted) {\n *   sendNotification('Tauri is awesome!');\n *   sendNotification({ title: 'TAURI', body: 'Tauri is awesome!' });\n * }\n * ```\n *\n * @since 1.0.0\n */\nfunction sendNotification(options) {\n  if (typeof options === 'string') {\n    // eslint-disable-next-line no-new\n    new window.Notification(options);\n  } else {\n    // eslint-disable-next-line no-new\n    new window.Notification(options.title, options);\n  }\n}\nexport { isPermissionGranted, requestPermission, sendNotification };","map":{"version":3,"names":["invokeTauriCommand","isPermissionGranted","window","Notification","permission","Promise","resolve","__tauriModule","message","cmd","requestPermission","sendNotification","options","title"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/node_modules/@tauri-apps/api/notification.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Send toast notifications (brief auto-expiring OS window element) to your user.\n * Can also be used with the Notification Web API.\n *\n * This package is also accessible with `window.__TAURI__.notification` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.notification`](https://tauri.app/v1/api/config/#allowlistconfig.notification) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"notification\": {\n *         \"all\": true // enable all notification APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Checks if the permission to send notifications is granted.\n * @example\n * ```typescript\n * import { isPermissionGranted } from '@tauri-apps/api/notification';\n * const permissionGranted = await isPermissionGranted();\n * ```\n *\n * @since 1.0.0\n */\nasync function isPermissionGranted() {\n    if (window.Notification.permission !== 'default') {\n        return Promise.resolve(window.Notification.permission === 'granted');\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Notification',\n        message: {\n            cmd: 'isNotificationPermissionGranted'\n        }\n    });\n}\n/**\n * Requests the permission to send notifications.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * ```\n *\n * @returns A promise resolving to whether the user granted the permission or not.\n *\n * @since 1.0.0\n */\nasync function requestPermission() {\n    return window.Notification.requestPermission();\n}\n/**\n * Sends a notification to the user.\n * @example\n * ```typescript\n * import { isPermissionGranted, requestPermission, sendNotification } from '@tauri-apps/api/notification';\n * let permissionGranted = await isPermissionGranted();\n * if (!permissionGranted) {\n *   const permission = await requestPermission();\n *   permissionGranted = permission === 'granted';\n * }\n * if (permissionGranted) {\n *   sendNotification('Tauri is awesome!');\n *   sendNotification({ title: 'TAURI', body: 'Tauri is awesome!' });\n * }\n * ```\n *\n * @since 1.0.0\n */\nfunction sendNotification(options) {\n    if (typeof options === 'string') {\n        // eslint-disable-next-line no-new\n        new window.Notification(options);\n    }\n    else {\n        // eslint-disable-next-line no-new\n        new window.Notification(options.title, options);\n    }\n}\n\nexport { isPermissionGranted, requestPermission, sendNotification };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,mBAAmBA,CAAA,EAAG;EACjC,IAAIC,MAAM,CAACC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;IAC9C,OAAOC,OAAO,CAACC,OAAO,CAACJ,MAAM,CAACC,YAAY,CAACC,UAAU,KAAK,SAAS,CAAC;EACxE;EACA,OAAOJ,kBAAkB,CAAC;IACtBO,aAAa,EAAE,cAAc;IAC7BC,OAAO,EAAE;MACLC,GAAG,EAAE;IACT;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,iBAAiBA,CAAA,EAAG;EAC/B,OAAOR,MAAM,CAACC,YAAY,CAACO,iBAAiB,CAAC,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7B;IACA,IAAIV,MAAM,CAACC,YAAY,CAACS,OAAO,CAAC;EACpC,CAAC,MACI;IACD;IACA,IAAIV,MAAM,CAACC,YAAY,CAACS,OAAO,CAACC,KAAK,EAAED,OAAO,CAAC;EACnD;AACJ;AAEA,SAASX,mBAAmB,EAAES,iBAAiB,EAAEC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}