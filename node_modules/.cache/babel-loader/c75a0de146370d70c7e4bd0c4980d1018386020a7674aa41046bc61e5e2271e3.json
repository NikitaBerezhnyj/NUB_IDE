{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import { RichTextarea } from \"rich-textarea\";\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     // Дужки та оператори для підсвічування\n//     const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n//     const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n//     // Ключові слова мов програмування\n//     const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n//     const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n//     const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n\n//     // Відміна дії\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     // На дію вперед\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n\n//     // Створення коментаря\n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n\n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n\n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n\n//         moveToLineStart();\n\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n\n//         let newText;\n//         // Видаляємо коментар\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } \n//         // Додаємо коментар\n//         else {\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n\n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };\n\n//     // Перемістити курсор на початок рядка\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n\n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleEnterPress);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n\n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <RichTextarea\n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </RichTextarea>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { RichTextarea } from \"rich-textarea\";\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor({\n  programming_language,\n  fileContent\n}) {\n  _s();\n  const [text, setText] = useState('');\n  const [history, setHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(-1);\n  const textareaRef = useRef(null);\n\n  // Дужки та оператори для підсвічування\n  const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n  const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n  // Ключові слова мов програмування\n  const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n  const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n  const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n  const renderHighlightedText = (text, programming_language) => {\n    let keywords;\n    switch (programming_language) {\n      case \"NikLang\":\n        keywords = NikLangKeyword;\n        break;\n      case \"Udav\":\n        keywords = UdavKeywords;\n        break;\n      case \"Based\":\n        keywords = BasedKeywords;\n        break;\n      default:\n        keywords = [];\n    }\n    const keywordRegex = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n    const operatorRegex = new RegExp(`(${operators.join('|')})`, 'g');\n    const bracketRegex = new RegExp(`(${brackets.join('|')})`, 'g');\n    const parts = [];\n    let lastIndex = 0;\n    let match;\n    while (match = keywordRegex.exec(text)) {\n      const start = match.index;\n      const end = start + match[0].length;\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text.substring(lastIndex, start)\n      }, lastIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 22\n      }, this));\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"keywords\",\n        children: match[0]\n      }, end, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 22\n      }, this));\n      lastIndex = end;\n    }\n    while (match = operatorRegex.exec(text)) {\n      const start = match.index;\n      const end = start + match[0].length;\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text.substring(lastIndex, start)\n      }, lastIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 22\n      }, this));\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"operators\",\n        children: match[0]\n      }, end, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 22\n      }, this));\n      lastIndex = end;\n    }\n    while (match = bracketRegex.exec(text)) {\n      const start = match.index;\n      const end = start + match[0].length;\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text.substring(lastIndex, start)\n      }, lastIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 22\n      }, this));\n      parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"brackets\",\n        children: match[0]\n      }, end, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 22\n      }, this));\n      lastIndex = end;\n    }\n    parts.push( /*#__PURE__*/_jsxDEV(\"span\", {\n      children: text.substring(lastIndex)\n    }, text.length, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 20\n    }, this));\n    return parts;\n  };\n\n  // Відміна дії\n  const undo = () => {\n    if (currentStep > 0) {\n      setText(history[currentStep - 1]);\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // На дію вперед\n  const redo = () => {\n    if (currentStep < history.length - 1) {\n      setText(history[currentStep + 1]);\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  // Додавання табуляції\n  const tabulation = () => {\n    const textarea = textareaRef.current;\n    const {\n      selectionStart,\n      selectionEnd,\n      value\n    } = textarea;\n    const start = value.substring(0, selectionStart);\n    const end = value.substring(selectionEnd);\n    const tabbedText = start + '\\t' + end;\n    setText(tabbedText);\n    const currentPosition = textarea.selectionStart;\n    textarea.value = tabbedText;\n    textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n    textarea.focus();\n  };\n\n  // Створення коментаря\n  const createOrRemoveComment = () => {\n    let commentSymbol = \"\";\n    switch (programming_language) {\n      case \"NikLang\":\n        commentSymbol = \"// \";\n        break;\n      case \"Udav\":\n      case \"Based\":\n        commentSymbol = \"# \";\n        break;\n      default:\n        commentSymbol = \"\";\n        break;\n    }\n    const textarea = document.getElementById('textarea');\n    let currentPosition = textarea.selectionStart;\n    moveToLineStart();\n    const {\n      selectionStart,\n      selectionEnd,\n      value\n    } = textarea;\n    const start = value.substring(0, selectionStart);\n    const end = value.substring(selectionEnd);\n    const textAfterCursor = value.substring(selectionStart);\n    let newText;\n    // Видаляємо коментар\n    if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n      newText = start + end.substring(commentSymbol.length);\n      currentPosition -= commentSymbol.length;\n    }\n    // Додаємо коментар\n    else {\n      newText = start + commentSymbol + end;\n      currentPosition += commentSymbol.length;\n    }\n    setText(newText);\n    textarea.value = newText;\n    textarea.setSelectionRange(currentPosition, currentPosition);\n    textarea.focus();\n  };\n\n  // Перемістити курсор на початок рядка\n  const moveToLineStart = () => {\n    const textarea = document.getElementById('textarea');\n    const currentPosition = textarea.selectionStart;\n    const textBeforeCursor = textarea.value.substring(0, currentPosition);\n    const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n    const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n    textarea.setSelectionRange(newPosition, newPosition);\n    textarea.focus();\n  };\n\n  // Натискання на Ctrl + z та Ctrl + y\n  useEffect(() => {\n    const handleUndoRedo = event => {\n      if (event.ctrlKey && event.key === 'z') {\n        event.preventDefault();\n        undo();\n      } else if (event.ctrlKey && event.key === 'y') {\n        event.preventDefault();\n        redo();\n      }\n    };\n    window.addEventListener('keydown', handleUndoRedo);\n    return () => {\n      window.removeEventListener('keydown', handleUndoRedo);\n    };\n  }, [undo, redo]);\n\n  // Натискання на Tab\n  useEffect(() => {\n    const handleTabulation = event => {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        tabulation();\n      }\n    };\n    window.addEventListener('keydown', handleTabulation);\n    return () => {\n      window.removeEventListener('keydown', handleTabulation);\n    };\n  }, [tabulation]);\n\n  // Додавання табуляції в наступний рядок, якщо вона є в минулому\n  useEffect(() => {\n    const handleEnterPress = event => {\n      if (event.key === \"Enter\") {\n        const textarea = textareaRef.current;\n        const currentPosition = textarea.selectionStart;\n        const textBeforeCursor = textarea.value.substring(0, currentPosition);\n        const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n        const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n        if (lastLine.startsWith('\\t')) {\n          event.preventDefault();\n          const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n          const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n          setText(newText);\n          textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n        }\n      }\n    };\n    window.addEventListener('keydown', handleEnterPress);\n    return () => {\n      window.removeEventListener('keydown', handleEnterPress);\n    };\n  }, [text]);\n\n  // Додавання коментарів\n  useEffect(() => {\n    const handleComment = event => {\n      if (event.ctrlKey && event.key === '/') {\n        event.preventDefault();\n        createOrRemoveComment();\n      }\n    };\n    window.addEventListener('keydown', handleComment);\n    return () => {\n      window.removeEventListener('keydown', handleComment);\n    };\n  }, [createOrRemoveComment]);\n\n  // Відкриття файлу\n  useEffect(() => {\n    if (fileContent) {\n      if (fileContent == \"new_file\") {\n        setText(\"\");\n      } else {\n        setText(fileContent);\n      }\n    }\n  }, [fileContent]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    const lineNumbersEle = document.getElementById('line-numbers');\n    const displayLineNumbers = () => {\n      const lines = text.split('\\n');\n      lineNumbersEle.innerHTML = Array.from({\n        length: lines.length\n      }, (_, i) => `<div>${i + 1}</div>`).join('');\n    };\n    displayLineNumbers();\n    const handleInput = event => {\n      if (event.inputType === \"insertText\") {\n        const {\n          selectionStart,\n          value\n        } = event.target;\n        const closingChars = {\n          '(': ')',\n          '{': '}',\n          '[': ']',\n          '\"': '\"',\n          \"'\": \"'\"\n        };\n        if (event.data in closingChars) {\n          event.preventDefault();\n          const closingChar = closingChars[event.data];\n          setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n          textarea.selectionStart = selectionStart;\n          textarea.selectionEnd = selectionStart;\n          setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(selectionStart, selectionStart);\n          }, 0);\n        } else if (event.data === closingChars[value[selectionStart]]) {\n          event.preventDefault();\n          textarea.selectionStart = selectionStart;\n          textarea.selectionEnd = selectionStart;\n          setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(selectionStart, selectionStart);\n          }, 0);\n        }\n      }\n    };\n    textarea.addEventListener('input', handleInput);\n    return () => {\n      textarea.removeEventListener('input', handleInput);\n    };\n  }, [text]);\n  const handleChange = event => {\n    setText(event.target.value);\n    const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n    setHistory(newHistory);\n    setCurrentStep(newHistory.length - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-numbers\",\n      className: \"code-lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RichTextarea, {\n      ref: textareaRef,\n      id: \"textarea\",\n      value: text,\n      onChange: handleChange,\n      className: \"code-editor\",\n      children: text => renderHighlightedText(text, programming_language)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 586,\n    columnNumber: 9\n  }, this);\n}\n_s(CodeEditor, \"UaUf1wXy9hIRiVRhgmTEXI1Ns28=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","RichTextarea","Container","jsxDEV","_jsxDEV","CodeEditor","programming_language","fileContent","_s","text","setText","history","setHistory","currentStep","setCurrentStep","textareaRef","operators","brackets","NikLangKeyword","UdavKeywords","BasedKeywords","renderHighlightedText","keywords","keywordRegex","RegExp","join","operatorRegex","bracketRegex","parts","lastIndex","match","exec","start","index","end","length","push","children","substring","fileName","_jsxFileName","lineNumber","columnNumber","className","undo","redo","tabulation","textarea","current","selectionStart","selectionEnd","value","tabbedText","currentPosition","setSelectionRange","focus","createOrRemoveComment","commentSymbol","document","getElementById","moveToLineStart","textAfterCursor","newText","trim","startsWith","textBeforeCursor","lastNewLineIndex","lastIndexOf","newPosition","handleUndoRedo","event","ctrlKey","key","preventDefault","window","addEventListener","removeEventListener","handleTabulation","handleEnterPress","lastLine","spaces","repeat","handleComment","lineNumbersEle","displayLineNumbers","lines","split","innerHTML","Array","from","_","i","handleInput","inputType","target","closingChars","data","closingChar","setTimeout","handleChange","newHistory","slice","id","ref","onChange","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\n// import { RichTextarea } from \"rich-textarea\";\n// import { Container } from 'react-bootstrap';\n// import './Code_Editor.css';\n\n// export default function CodeEditor({ programming_language, fileContent }) {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n//     const textareaRef = useRef(null);\n\n//     // Дужки та оператори для підсвічування\n//     const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n//     const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n//     // Ключові слова мов програмування\n//     const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n//     const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n//     const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n\n//     // Відміна дії\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     // На дію вперед\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     // Додавання табуляції\n//     const tabulation = () => {\n//         const textarea = textareaRef.current;\n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const tabbedText = start + '\\t' + end;\n//         setText(tabbedText);\n//         const currentPosition = textarea.selectionStart;\n//         textarea.value = tabbedText;\n//         textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n//         textarea.focus();\n//     };        \n    \n//     // Створення коментаря\n//     const createOrRemoveComment = () => {\n//         let commentSymbol = \"\"; \n        \n//         switch (programming_language) {\n//             case \"NikLang\":\n//                 commentSymbol = \"// \"; \n//                 break;\n//             case \"Udav\":\n//             case \"Based\":\n//                 commentSymbol = \"# \";\n//                 break;\n//             default:\n//                 commentSymbol = \"\";\n//                 break;\n//         }\n    \n//         const textarea = document.getElementById('textarea');\n//         let currentPosition = textarea.selectionStart;\n    \n//         moveToLineStart();\n        \n//         const { selectionStart, selectionEnd, value } = textarea;\n//         const start = value.substring(0, selectionStart);\n//         const end = value.substring(selectionEnd);\n//         const textAfterCursor = value.substring(selectionStart); \n        \n//         let newText;\n//         // Видаляємо коментар\n//         if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n//             newText = start + end.substring(commentSymbol.length);\n//             currentPosition -= commentSymbol.length;\n//         } \n//         // Додаємо коментар\n//         else {\n//             newText = start + commentSymbol + end;\n//             currentPosition += commentSymbol.length;\n//         }\n        \n//         setText(newText);\n//         textarea.value = newText;\n//         textarea.setSelectionRange(currentPosition, currentPosition);\n//         textarea.focus();\n//     };\n\n//     // Перемістити курсор на початок рядка\n//     const moveToLineStart = () => {\n//         const textarea = document.getElementById('textarea');\n//         const currentPosition = textarea.selectionStart;\n//         const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//         const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//         const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n//         textarea.setSelectionRange(newPosition, newPosition);\n//         textarea.focus();\n//     };\n\n//     // Натискання на Ctrl + z та Ctrl + y\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     // Натискання на Tab\n//     useEffect(() => {\n//         const handleTabulation = (event) => {\n//             if (event.key === 'Tab') {\n//                 event.preventDefault();\n//                 tabulation();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleTabulation);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleTabulation);\n//         };\n//     }, [tabulation]);\n\n//     // Додавання табуляції в наступний рядок, якщо вона є в минулому\n//     useEffect(() => {\n//         const handleEnterPress = (event) => {\n//             if (event.key === \"Enter\") {\n//                 const textarea = textareaRef.current;\n//                 const currentPosition = textarea.selectionStart;\n//                 const textBeforeCursor = textarea.value.substring(0, currentPosition);\n//                 const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n//                 const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n    \n//                 if (lastLine.startsWith('\\t')) {\n//                     event.preventDefault();\n//                     const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n//                     const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n//                     setText(newText);\n//                     textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n//                 }\n//             }\n//         };\n    \n//         window.addEventListener('keydown', handleEnterPress);\n    \n//         return () => {\n//             window.removeEventListener('keydown', handleEnterPress);\n//         };\n//     }, [text]);    \n\n//     // Додавання коментарів\n//     useEffect(() => {\n//         const handleComment = (event) => {\n//             if (event.ctrlKey && event.key === '/') {\n//                 event.preventDefault();\n//                 createOrRemoveComment();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleComment);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleComment);\n//         };\n//     }, [createOrRemoveComment]);\n\n//     // Відкриття файлу\n//     useEffect(() => {\n//         if (fileContent) {\n//             if(fileContent == \"new_file\")\n//             {\n//                 setText(\"\");\n//             }\n//             else\n//             {\n//                 setText(fileContent);\n//             }\n//         }\n//     }, [fileContent]);\n\n//     useEffect(() => {\n//         const textarea = textareaRef.current;\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 const closingChars = {\n//                     '(': ')',\n//                     '{': '}',\n//                     '[': ']',\n//                     '\"': '\"',\n//                     \"'\": \"'\"\n//                 };\n        \n//                 if (event.data in closingChars) {\n//                     event.preventDefault();\n//                     const closingChar = closingChars[event.data];\n//                     setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 } else if (event.data === closingChars[value[selectionStart]]) {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart;\n//                     textarea.selectionEnd = selectionStart;\n//                     setTimeout(() => {\n//                         textarea.focus();\n//                         textarea.setSelectionRange(selectionStart, selectionStart);\n//                     }, 0);\n//                 }\n//             }\n//         };                \n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <RichTextarea\n//                 ref={textareaRef}\n//                 id=\"textarea\" \n//                 value={text} \n//                 onChange={handleChange} \n//                 className='code-editor'>\n//             </RichTextarea>\n//         </Container>\n//     );\n// }\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { RichTextarea } from \"rich-textarea\";\nimport { Container } from 'react-bootstrap';\nimport './Code_Editor.css';\n\nexport default function CodeEditor({ programming_language, fileContent }) {\n    const [text, setText] = useState('');\n    const [history, setHistory] = useState([]);\n    const [currentStep, setCurrentStep] = useState(-1);\n    const textareaRef = useRef(null);\n\n    // Дужки та оператори для підсвічування\n    const operators = [\"+\", \"-\", \"*\", \"/\", \"++\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"];\n    const brackets = [\"{\", \"}\", \"[\", \"]\", \"(\", \")\", \"\\\"\", \"\\\"\", \"'\", \"'\"];\n    // Ключові слова мов програмування\n    const NikLangKeyword = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n    const UdavKeywords = ['друк', 'ввід', 'якщо', 'інакше', 'інакшеЯкщо', 'правда', 'брехня', 'або', 'не', 'також', 'для', 'поки', 'функція', 'припинити', 'продовжити', 'повернути', 'пропуск', 'клас', 'як', 'від', 'отримати', 'заочно', 'жодний', 'крім', 'належить', 'підняти', 'остаточно', 'це', 'лямбда', 'спробувати', 'неЛокально', 'утверджувати', 'видалити', 'глобально', 'із', 'асинхронний', 'здобути', 'число', 'дріб', 'рядок', 'границях', 'своє'];\n    const BasedKeywords = ['друк', 'ввід', 'ввід_числа', 'якщо', 'інакше', 'інакше_якщо', 'поки', 'для_кожного', 'повернути', 'функція', 'змінна', 'ціле', 'дійсне', 'рядок', 'логічне', 'символ', 'кінець'];\n\n    const renderHighlightedText = (text, programming_language) => {\n        let keywords;\n        switch (programming_language) {\n          case \"NikLang\":\n            keywords = NikLangKeyword;\n            break;\n          case \"Udav\":\n            keywords = UdavKeywords;\n            break;\n          case \"Based\":\n            keywords = BasedKeywords;\n            break;\n          default:\n            keywords = [];\n        }\n      \n        const keywordRegex = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n        const operatorRegex = new RegExp(`(${operators.join('|')})`, 'g');\n        const bracketRegex = new RegExp(`(${brackets.join('|')})`, 'g');\n      \n        const parts = [];\n      \n        let lastIndex = 0;\n        let match;\n      \n        while ((match = keywordRegex.exec(text))) {\n          const start = match.index;\n          const end = start + match[0].length;\n          parts.push(<span key={lastIndex}>{text.substring(lastIndex, start)}</span>);\n          parts.push(<span key={end} className=\"keywords\">{match[0]}</span>);\n          lastIndex = end;\n        }\n      \n        while ((match = operatorRegex.exec(text))) {\n          const start = match.index;\n          const end = start + match[0].length;\n          parts.push(<span key={lastIndex}>{text.substring(lastIndex, start)}</span>);\n          parts.push(<span key={end} className=\"operators\">{match[0]}</span>);\n          lastIndex = end;\n        }\n      \n        while ((match = bracketRegex.exec(text))) {\n          const start = match.index;\n          const end = start + match[0].length;\n          parts.push(<span key={lastIndex}>{text.substring(lastIndex, start)}</span>);\n          parts.push(<span key={end} className=\"brackets\">{match[0]}</span>);\n          lastIndex = end;\n        }\n      \n        parts.push(<span key={text.length}>{text.substring(lastIndex)}</span>);\n      \n        return parts;\n      };\n\n    // Відміна дії\n    const undo = () => {\n        if (currentStep > 0) {\n            setText(history[currentStep - 1]);\n            setCurrentStep(currentStep - 1);\n        }\n    };\n\n    // На дію вперед\n    const redo = () => {\n        if (currentStep < history.length - 1) {\n            setText(history[currentStep + 1]);\n            setCurrentStep(currentStep + 1);\n        }\n    };\n\n    // Додавання табуляції\n    const tabulation = () => {\n        const textarea = textareaRef.current;\n        const { selectionStart, selectionEnd, value } = textarea;\n        const start = value.substring(0, selectionStart);\n        const end = value.substring(selectionEnd);\n        const tabbedText = start + '\\t' + end;\n        setText(tabbedText);\n        const currentPosition = textarea.selectionStart;\n        textarea.value = tabbedText;\n        textarea.setSelectionRange(currentPosition + 1, currentPosition + 1);\n        textarea.focus();\n    };        \n    \n    // Створення коментаря\n    const createOrRemoveComment = () => {\n        let commentSymbol = \"\"; \n        \n        switch (programming_language) {\n            case \"NikLang\":\n                commentSymbol = \"// \"; \n                break;\n            case \"Udav\":\n            case \"Based\":\n                commentSymbol = \"# \";\n                break;\n            default:\n                commentSymbol = \"\";\n                break;\n        }\n    \n        const textarea = document.getElementById('textarea');\n        let currentPosition = textarea.selectionStart;\n    \n        moveToLineStart();\n        \n        const { selectionStart, selectionEnd, value } = textarea;\n        const start = value.substring(0, selectionStart);\n        const end = value.substring(selectionEnd);\n        const textAfterCursor = value.substring(selectionStart); \n        \n        let newText;\n        // Видаляємо коментар\n        if (textAfterCursor.trim().startsWith(commentSymbol.trim())) {\n            newText = start + end.substring(commentSymbol.length);\n            currentPosition -= commentSymbol.length;\n        } \n        // Додаємо коментар\n        else {\n            newText = start + commentSymbol + end;\n            currentPosition += commentSymbol.length;\n        }\n        \n        setText(newText);\n        textarea.value = newText;\n        textarea.setSelectionRange(currentPosition, currentPosition);\n        textarea.focus();\n    };\n\n    // Перемістити курсор на початок рядка\n    const moveToLineStart = () => {\n        const textarea = document.getElementById('textarea');\n        const currentPosition = textarea.selectionStart;\n        const textBeforeCursor = textarea.value.substring(0, currentPosition);\n        const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n        const newPosition = lastNewLineIndex === -1 ? 0 : lastNewLineIndex + 1;\n        textarea.setSelectionRange(newPosition, newPosition);\n        textarea.focus();\n    };\n\n    // Натискання на Ctrl + z та Ctrl + y\n    useEffect(() => {\n        const handleUndoRedo = (event) => {\n            if (event.ctrlKey && event.key === 'z') {\n                event.preventDefault();\n                undo();\n            } else if (event.ctrlKey && event.key === 'y') {\n                event.preventDefault();\n                redo();\n            }\n        };\n\n        window.addEventListener('keydown', handleUndoRedo);\n\n        return () => {\n            window.removeEventListener('keydown', handleUndoRedo);\n        };\n    }, [undo, redo]);\n\n    // Натискання на Tab\n    useEffect(() => {\n        const handleTabulation = (event) => {\n            if (event.key === 'Tab') {\n                event.preventDefault();\n                tabulation();\n            }\n        };\n\n        window.addEventListener('keydown', handleTabulation);\n\n        return () => {\n            window.removeEventListener('keydown', handleTabulation);\n        };\n    }, [tabulation]);\n\n    // Додавання табуляції в наступний рядок, якщо вона є в минулому\n    useEffect(() => {\n        const handleEnterPress = (event) => {\n            if (event.key === \"Enter\") {\n                const textarea = textareaRef.current;\n                const currentPosition = textarea.selectionStart;\n                const textBeforeCursor = textarea.value.substring(0, currentPosition);\n                const lastNewLineIndex = textBeforeCursor.lastIndexOf('\\n');\n                const lastLine = textBeforeCursor.substring(lastNewLineIndex + 1);\n    \n                if (lastLine.startsWith('\\t')) {\n                    event.preventDefault();\n                    const spaces = '\\t'.repeat(lastLine.match(/^\\t*/)[0].length); // рахуємо кількість табуляцій\n                    const newText = textarea.value.substring(0, currentPosition) + '\\n' + spaces + textarea.value.substring(currentPosition);\n                    setText(newText);\n                    textarea.setSelectionRange(currentPosition + spaces.length + 1, currentPosition + spaces.length + 1); // переміщення курсору\n                }\n            }\n        };\n    \n        window.addEventListener('keydown', handleEnterPress);\n    \n        return () => {\n            window.removeEventListener('keydown', handleEnterPress);\n        };\n    }, [text]);    \n\n    // Додавання коментарів\n    useEffect(() => {\n        const handleComment = (event) => {\n            if (event.ctrlKey && event.key === '/') {\n                event.preventDefault();\n                createOrRemoveComment();\n            }\n        };\n\n        window.addEventListener('keydown', handleComment);\n\n        return () => {\n            window.removeEventListener('keydown', handleComment);\n        };\n    }, [createOrRemoveComment]);\n\n    // Відкриття файлу\n    useEffect(() => {\n        if (fileContent) {\n            if(fileContent == \"new_file\")\n            {\n                setText(\"\");\n            }\n            else\n            {\n                setText(fileContent);\n            }\n        }\n    }, [fileContent]);\n\n    useEffect(() => {\n        const textarea = textareaRef.current;\n        const lineNumbersEle = document.getElementById('line-numbers');\n\n        const displayLineNumbers = () => {\n            const lines = text.split('\\n');\n            lineNumbersEle.innerHTML = Array.from({\n                length: lines.length,\n            }, (_, i) => `<div>${i + 1}</div>`).join('');\n        };\n\n        displayLineNumbers();\n\n        const handleInput = (event) => {\n            if (event.inputType === \"insertText\") {\n                const { selectionStart, value } = event.target;\n                const closingChars = {\n                    '(': ')',\n                    '{': '}',\n                    '[': ']',\n                    '\"': '\"',\n                    \"'\": \"'\"\n                };\n        \n                if (event.data in closingChars) {\n                    event.preventDefault();\n                    const closingChar = closingChars[event.data];\n                    setText(value.substring(0, selectionStart) + closingChar + value.substring(selectionStart));\n                    textarea.selectionStart = selectionStart;\n                    textarea.selectionEnd = selectionStart;\n                    setTimeout(() => {\n                        textarea.focus();\n                        textarea.setSelectionRange(selectionStart, selectionStart);\n                    }, 0);\n                } else if (event.data === closingChars[value[selectionStart]]) {\n                    event.preventDefault();\n                    textarea.selectionStart = selectionStart;\n                    textarea.selectionEnd = selectionStart;\n                    setTimeout(() => {\n                        textarea.focus();\n                        textarea.setSelectionRange(selectionStart, selectionStart);\n                    }, 0);\n                }\n            }\n        };                \n\n        textarea.addEventListener('input', handleInput);\n\n        return () => {\n            textarea.removeEventListener('input', handleInput);\n        };\n    }, [text]);\n\n    const handleChange = (event) => {\n        setText(event.target.value);\n        const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n        setHistory(newHistory);\n        setCurrentStep(newHistory.length - 1);\n    };\n\n    return (\n        <Container className='code-editor-container'>\n            <div id=\"line-numbers\" className=\"code-lines\"></div>\n            <RichTextarea\n                ref={textareaRef}\n                id=\"textarea\"\n                value={text}\n                onChange={handleChange}\n                className=\"code-editor\"\n                >\n                {(text) => renderHighlightedText(text, programming_language)}\n            </RichTextarea>\n        </Container>\n    );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}