{"ast":null,"code":"// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n  return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n  const identifier = uid();\n  const prop = `_${identifier}`;\n  Object.defineProperty(window, prop, {\n    value: result => {\n      if (once) {\n        Reflect.deleteProperty(window, prop);\n      }\n      return callback?.(result);\n    },\n    writable: false,\n    configurable: true\n  });\n  return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n  return new Promise((resolve, reject) => {\n    const callback = transformCallback(e => {\n      resolve(e);\n      Reflect.deleteProperty(window, `_${error}`);\n    }, true);\n    const error = transformCallback(e => {\n      reject(e);\n      Reflect.deleteProperty(window, `_${callback}`);\n    }, true);\n    window.__TAURI_IPC__({\n      cmd,\n      callback,\n      error,\n      ...args\n    });\n  });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n  return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\nexport { convertFileSrc, invoke, transformCallback };","map":{"version":3,"names":["uid","window","crypto","getRandomValues","Uint32Array","transformCallback","callback","once","identifier","prop","Object","defineProperty","value","result","Reflect","deleteProperty","writable","configurable","invoke","cmd","args","Promise","resolve","reject","e","error","__TAURI_IPC__","convertFileSrc","filePath","protocol","__TAURI__"],"sources":["/home/nikita/Проєкти/NUB_Project/NUB_IDE/node_modules/@tauri-apps/api/tauri.js"],"sourcesContent":["// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback?.(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\nexport { convertFileSrc, invoke, transformCallback };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,GAAGA,CAAA,EAAG;EACX,OAAOC,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,GAAG,KAAK,EAAE;EAC/C,MAAMC,UAAU,GAAGR,GAAG,CAAC,CAAC;EACxB,MAAMS,IAAI,GAAI,IAAGD,UAAW,EAAC;EAC7BE,MAAM,CAACC,cAAc,CAACV,MAAM,EAAEQ,IAAI,EAAE;IAChCG,KAAK,EAAGC,MAAM,IAAK;MACf,IAAIN,IAAI,EAAE;QACNO,OAAO,CAACC,cAAc,CAACd,MAAM,EAAEQ,IAAI,CAAC;MACxC;MACA,OAAOH,QAAQ,GAAGO,MAAM,CAAC;IAC7B,CAAC;IACDG,QAAQ,EAAE,KAAK;IACfC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOT,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeU,MAAMA,CAACC,GAAG,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMjB,QAAQ,GAAGD,iBAAiB,CAAEmB,CAAC,IAAK;MACtCF,OAAO,CAACE,CAAC,CAAC;MACVV,OAAO,CAACC,cAAc,CAACd,MAAM,EAAG,IAAGwB,KAAM,EAAC,CAAC;IAC/C,CAAC,EAAE,IAAI,CAAC;IACR,MAAMA,KAAK,GAAGpB,iBAAiB,CAAEmB,CAAC,IAAK;MACnCD,MAAM,CAACC,CAAC,CAAC;MACTV,OAAO,CAACC,cAAc,CAACd,MAAM,EAAG,IAAGK,QAAS,EAAC,CAAC;IAClD,CAAC,EAAE,IAAI,CAAC;IACRL,MAAM,CAACyB,aAAa,CAAC;MACjBP,GAAG;MACHb,QAAQ;MACRmB,KAAK;MACL,GAAGL;IACP,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,cAAcA,CAACC,QAAQ,EAAEC,QAAQ,GAAG,OAAO,EAAE;EAClD,OAAO5B,MAAM,CAAC6B,SAAS,CAACH,cAAc,CAACC,QAAQ,EAAEC,QAAQ,CAAC;AAC9D;AAEA,SAASF,cAAc,EAAET,MAAM,EAAEb,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}