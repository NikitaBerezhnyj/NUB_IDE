{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/Rust/nub-ide/src/Components/Help_Component/Help.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Container, Row } from 'react-bootstrap';\n// import Dropdown from 'react-bootstrap/Dropdown';\n// import Form from 'react-bootstrap/Form';\n// import { useTranslation } from 'react-i18next';\n// import '../Standard-Component-style.css';\n// import './Help.css';\n\n// export default function Help({ onClose }) {\n//     const { t, i18n } = useTranslation(\"global\");\n//     const [selectedLanguage, setSelectedLanguage] = useState(''); // початкове значення мови\n\n//     useEffect(() => {\n//         const storedLang = localStorage.getItem('language');\n//         if (storedLang) {\n//             handleLanguageChange(storedLang);\n//         } else {\n//             // Встановлення української мови за замовчуванням\n//             handleLanguageChange('ua');\n//         }\n//     }, []);\n\n//     const handleLanguageChange = (lang) => {\n//         i18n.changeLanguage(lang);\n//         setSelectedLanguage(lang);\n//         localStorage.setItem('language', lang);\n//     };\n\n//     return (\n//         <Container className='help-container'>\n//             <Row className='help-close-button'>\n//                 <button onClick={onClose}><b>X</b></button>\n//             </Row>\n//             <Row className='help-content-container'>\n//                 <div className='help-content'>\n//                     <h1>NUB IDE</h1>\n//                     <p>Це середовище розробки створене спеціально для мов програмування NukLang, Удав та Based</p>\n//                     <p>Його основною ідеєю є робота через термінал, але не повна</p>\n//                     <p>Інтерпретатори мов та компілятори були встановлені автоматично</p>\n//                     <p>Оскільки мови не сильно працюють із сторонніми файлами, то робота у даному редакторі коду також здійснюється у межах одного файлу</p>\n//                     <hr></hr>\n//                     <p>Ide має такі команди для терміналу:</p>\n//                     <p>- cd [path]</p>\n//                     <p>- ls </p>\n//                     <p>- pwd</p>\n//                     <p>- open - відкриває файл</p>\n//                     <p>- save - зберігає файл</p>\n//                     <p>- save as - зберегти файл як</p>\n//                     <p>- translate - викликає меню з вибором мови інтерфейсу</p>\n//                     <p>- exit - закриває все IDE</p>\n//                     <hr></hr>\n//                     {/* Обрати мову */}\n//                     <Dropdown className='language-dropdown'>\n//                         <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n//                             {t(\"help.select_language\")}\n//                         </Dropdown.Toggle>\n//                         <Dropdown.Menu className='language-dropdown-content'>\n//                             <Dropdown.Item onClick={() => handleLanguageChange(\"ua\")}>Ukrainian</Dropdown.Item>\n//                             <Dropdown.Item onClick={() => handleLanguageChange(\"en\")}>English</Dropdown.Item>\n//                         </Dropdown.Menu>\n//                     </Dropdown>\n//                     {/* Обрати тему */}\n//                     <Form.Select aria-label=\"Default select example\">\n//                         <option>Open this select menu</option>\n//                         <option value=\"1\">One</option>\n//                         <option value=\"2\">Two</option>\n//                         <option value=\"3\">Three</option>\n//                     </Form.Select>\n//                     <button>Створити власну тему</button>\n//                 </div>\n//             </Row>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport { useTranslation } from 'react-i18next';\nimport fs from 'fs-extra'; // імпортуємо fs-extra\nimport path from 'path'; // імпортуємо модуль path для роботи з шляхами\nimport '../Standard-Component-style.css';\nimport './Help.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Help({\n  onClose\n}) {\n  _s();\n  const {\n    t,\n    i18n\n  } = useTranslation(\"global\");\n  const [selectedLanguage, setSelectedLanguage] = useState('');\n  const [themes, setThemes] = useState([]); // Стан для зберігання списку тем\n\n  useEffect(() => {\n    const storedLang = localStorage.getItem('language');\n    if (storedLang) {\n      handleLanguageChange(storedLang);\n    } else {\n      handleLanguageChange('ua');\n    }\n\n    // Отримуємо список файлів у теці Themes\n    fetchThemes();\n  }, []);\n\n  // Функція для отримання списку файлів у теці Themes\n  const fetchThemes = async () => {\n    try {\n      const themesDir = path.join(__dirname, 'src', 'Themes'); // Шлях до теці Themes\n      const files = await fs.readdir(themesDir);\n      const themeNames = files.map(file => path.parse(file).name); // Беремо лише імена файлів без розширення\n      setThemes(themeNames);\n    } catch (error) {\n      console.error('Error fetching themes:', error);\n    }\n  };\n  const handleLanguageChange = lang => {\n    i18n.changeLanguage(lang);\n    setSelectedLanguage(lang);\n    localStorage.setItem('language', lang);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"help-container\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"help-close-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"help-content-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"NUB IDE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          \"aria-label\": \"Default select example\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"Choose a theme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), themes.map((theme, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: theme,\n            children: theme\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Create custom theme\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(Help, \"kbl3iVloligyKXeIQklWAXEHTl4=\", false, function () {\n  return [useTranslation];\n});\n_c = Help;\nvar _c;\n$RefreshReg$(_c, \"Help\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Dropdown","Form","useTranslation","fs","path","jsxDEV","_jsxDEV","Help","onClose","_s","t","i18n","selectedLanguage","setSelectedLanguage","themes","setThemes","storedLang","localStorage","getItem","handleLanguageChange","fetchThemes","themesDir","join","__dirname","files","readdir","themeNames","map","file","parse","name","error","console","lang","changeLanguage","setItem","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Select","theme","index","value","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/src/Components/Help_Component/Help.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Container, Row } from 'react-bootstrap';\n// import Dropdown from 'react-bootstrap/Dropdown';\n// import Form from 'react-bootstrap/Form';\n// import { useTranslation } from 'react-i18next';\n// import '../Standard-Component-style.css';\n// import './Help.css';\n\n// export default function Help({ onClose }) {\n//     const { t, i18n } = useTranslation(\"global\");\n//     const [selectedLanguage, setSelectedLanguage] = useState(''); // початкове значення мови\n\n//     useEffect(() => {\n//         const storedLang = localStorage.getItem('language');\n//         if (storedLang) {\n//             handleLanguageChange(storedLang);\n//         } else {\n//             // Встановлення української мови за замовчуванням\n//             handleLanguageChange('ua');\n//         }\n//     }, []);\n\n//     const handleLanguageChange = (lang) => {\n//         i18n.changeLanguage(lang);\n//         setSelectedLanguage(lang);\n//         localStorage.setItem('language', lang);\n//     };\n\n//     return (\n//         <Container className='help-container'>\n//             <Row className='help-close-button'>\n//                 <button onClick={onClose}><b>X</b></button>\n//             </Row>\n//             <Row className='help-content-container'>\n//                 <div className='help-content'>\n//                     <h1>NUB IDE</h1>\n//                     <p>Це середовище розробки створене спеціально для мов програмування NukLang, Удав та Based</p>\n//                     <p>Його основною ідеєю є робота через термінал, але не повна</p>\n//                     <p>Інтерпретатори мов та компілятори були встановлені автоматично</p>\n//                     <p>Оскільки мови не сильно працюють із сторонніми файлами, то робота у даному редакторі коду також здійснюється у межах одного файлу</p>\n//                     <hr></hr>\n//                     <p>Ide має такі команди для терміналу:</p>\n//                     <p>- cd [path]</p>\n//                     <p>- ls </p>\n//                     <p>- pwd</p>\n//                     <p>- open - відкриває файл</p>\n//                     <p>- save - зберігає файл</p>\n//                     <p>- save as - зберегти файл як</p>\n//                     <p>- translate - викликає меню з вибором мови інтерфейсу</p>\n//                     <p>- exit - закриває все IDE</p>\n//                     <hr></hr>\n//                     {/* Обрати мову */}\n//                     <Dropdown className='language-dropdown'>\n//                         <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n//                             {t(\"help.select_language\")}\n//                         </Dropdown.Toggle>\n//                         <Dropdown.Menu className='language-dropdown-content'>\n//                             <Dropdown.Item onClick={() => handleLanguageChange(\"ua\")}>Ukrainian</Dropdown.Item>\n//                             <Dropdown.Item onClick={() => handleLanguageChange(\"en\")}>English</Dropdown.Item>\n//                         </Dropdown.Menu>\n//                     </Dropdown>\n//                     {/* Обрати тему */}\n//                     <Form.Select aria-label=\"Default select example\">\n//                         <option>Open this select menu</option>\n//                         <option value=\"1\">One</option>\n//                         <option value=\"2\">Two</option>\n//                         <option value=\"3\">Three</option>\n//                     </Form.Select>\n//                     <button>Створити власну тему</button>\n//                 </div>\n//             </Row>\n//         </Container>\n//     );\n// }\n\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Form from 'react-bootstrap/Form';\nimport { useTranslation } from 'react-i18next';\nimport fs from 'fs-extra'; // імпортуємо fs-extra\nimport path from 'path'; // імпортуємо модуль path для роботи з шляхами\nimport '../Standard-Component-style.css';\nimport './Help.css';\n\nexport default function Help({ onClose }) {\n    const { t, i18n } = useTranslation(\"global\");\n    const [selectedLanguage, setSelectedLanguage] = useState('');\n    const [themes, setThemes] = useState([]); // Стан для зберігання списку тем\n\n    useEffect(() => {\n        const storedLang = localStorage.getItem('language');\n        if (storedLang) {\n            handleLanguageChange(storedLang);\n        } else {\n            handleLanguageChange('ua');\n        }\n\n        // Отримуємо список файлів у теці Themes\n        fetchThemes();\n    }, []);\n\n    // Функція для отримання списку файлів у теці Themes\n    const fetchThemes = async () => {\n        try {\n            const themesDir = path.join(__dirname, 'src', 'Themes'); // Шлях до теці Themes\n            const files = await fs.readdir(themesDir);\n            const themeNames = files.map(file => path.parse(file).name); // Беремо лише імена файлів без розширення\n            setThemes(themeNames);\n        } catch (error) {\n            console.error('Error fetching themes:', error);\n        }\n    };\n\n    const handleLanguageChange = (lang) => {\n        i18n.changeLanguage(lang);\n        setSelectedLanguage(lang);\n        localStorage.setItem('language', lang);\n    };\n\n    return (\n        <Container className='help-container'>\n            <Row className='help-close-button'>\n                <button onClick={onClose}><b>X</b></button>\n            </Row>\n            <Row className='help-content-container'>\n                <div className='help-content'>\n                    <h1>NUB IDE</h1>\n                    {/* Ваш контент */}\n                    {/* ... */}\n                    {/* Компонент вибору теми */}\n                    <Form.Select aria-label=\"Default select example\">\n                        <option>Choose a theme</option>\n                        {themes.map((theme, index) => (\n                            <option key={index} value={theme}>{theme}</option>\n                        ))}\n                    </Form.Select>\n                    {/* Кнопка створення власної теми */}\n                    <button>Create custom theme</button>\n                </div>\n            </Row>\n        </Container>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}