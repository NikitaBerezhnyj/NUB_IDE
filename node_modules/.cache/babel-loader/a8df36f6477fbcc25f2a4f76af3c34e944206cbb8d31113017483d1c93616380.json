{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the HTTP client written in Rust.\n *\n * This package is also accessible with `window.__TAURI__.http` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be allowlisted on `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"all\": true, // enable all http APIs\n *         \"request\": true // enable HTTP request API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the URLs and paths that can be accessed using glob patterns.\n *\n * For instance, this scope configuration only allows making HTTP requests to the GitHub API for the `tauri-apps` organization:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"scope\": [\"https://api.github.com/repos/tauri-apps/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar ResponseType;\n(function (ResponseType) {\n  ResponseType[ResponseType[\"JSON\"] = 1] = \"JSON\";\n  ResponseType[ResponseType[\"Text\"] = 2] = \"Text\";\n  ResponseType[ResponseType[\"Binary\"] = 3] = \"Binary\";\n})(ResponseType || (ResponseType = {}));\nasync function formBody(data) {\n  const form = {};\n  const append = async (key, v) => {\n    if (v !== null) {\n      let r;\n      if (typeof v === 'string') {\n        r = v;\n      } else if (v instanceof Uint8Array || Array.isArray(v)) {\n        r = Array.from(v);\n      } else if (v instanceof File) {\n        r = {\n          file: Array.from(new Uint8Array(await v.arrayBuffer())),\n          mime: v.type,\n          fileName: v.name\n        };\n      } else if (typeof v.file === 'string') {\n        r = {\n          file: v.file,\n          mime: v.mime,\n          fileName: v.fileName\n        };\n      } else {\n        r = {\n          file: Array.from(v.file),\n          mime: v.mime,\n          fileName: v.fileName\n        };\n      }\n      form[String(key)] = r;\n    }\n  };\n  if (data instanceof FormData) {\n    for (const [key, value] of data) {\n      await append(key, value);\n    }\n  } else {\n    for (const [key, value] of Object.entries(data)) {\n      await append(key, value);\n    }\n  }\n  return form;\n}\n/**\n * The body object to be used on POST and PUT requests.\n *\n * @since 1.0.0\n */\nclass Body {\n  /** @ignore */\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n  /**\n   * Creates a new form data body. The form data is an object where each key is the entry name,\n   * and the value is either a string or a file object.\n   *\n   * By default it sets the `application/x-www-form-urlencoded` Content-Type header,\n   * but you can set it to `multipart/form-data` if the Cargo feature `http-multipart` is enabled.\n   *\n   * Note that a file path must be allowed in the `fs` allowlist scope.\n   *\n   * @example\n   * ```typescript\n   * import { Body } from \"@tauri-apps/api/http\"\n   * const body = Body.form({\n   *   key: 'value',\n   *   image: {\n   *     file: '/path/to/file', // either a path or an array buffer of the file contents\n   *     mime: 'image/jpeg', // optional\n   *     fileName: 'image.jpg' // optional\n   *   }\n   * });\n   *\n   * // alternatively, use a FormData:\n   * const form = new FormData();\n   * form.append('key', 'value');\n   * form.append('image', file, 'image.png');\n   * const formBody = Body.form(form);\n   * ```\n   *\n   * @param data The body data.\n   *\n   * @returns The body object ready to be used on the POST and PUT requests.\n   */\n  static form(data) {\n    return new Body('Form', data);\n  }\n  /**\n   * Creates a new JSON body.\n   * @example\n   * ```typescript\n   * import { Body } from \"@tauri-apps/api/http\"\n   * Body.json({\n   *   registered: true,\n   *   name: 'tauri'\n   * });\n   * ```\n   *\n   * @param data The body JSON object.\n   *\n   * @returns The body object ready to be used on the POST and PUT requests.\n   */\n  static json(data) {\n    return new Body('Json', data);\n  }\n  /**\n   * Creates a new UTF-8 string body.\n   * @example\n   * ```typescript\n   * import { Body } from \"@tauri-apps/api/http\"\n   * Body.text('The body content as a string');\n   * ```\n   *\n   * @param value The body string.\n   *\n   * @returns The body object ready to be used on the POST and PUT requests.\n   */\n  static text(value) {\n    return new Body('Text', value);\n  }\n  /**\n   * Creates a new byte array body.\n   * @example\n   * ```typescript\n   * import { Body } from \"@tauri-apps/api/http\"\n   * Body.bytes(new Uint8Array([1, 2, 3]));\n   * ```\n   *\n   * @param bytes The body byte array.\n   *\n   * @returns The body object ready to be used on the POST and PUT requests.\n   */\n  static bytes(bytes) {\n    // stringifying Uint8Array doesn't return an array of numbers, so we create one here\n    return new Body('Bytes', Array.from(bytes instanceof ArrayBuffer ? new Uint8Array(bytes) : bytes));\n  }\n}\n/**\n * Response object.\n *\n * @since 1.0.0\n * */\nclass Response {\n  /** @ignore */\n  constructor(response) {\n    this.url = response.url;\n    this.status = response.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.headers = response.headers;\n    this.rawHeaders = response.rawHeaders;\n    this.data = response.data;\n  }\n}\n/**\n * @since 1.0.0\n */\nclass Client {\n  /** @ignore */\n  constructor(id) {\n    this.id = id;\n  }\n  /**\n   * Drops the client instance.\n   * @example\n   * ```typescript\n   * import { getClient } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * await client.drop();\n   * ```\n   */\n  async drop() {\n    return invokeTauriCommand({\n      __tauriModule: 'Http',\n      message: {\n        cmd: 'dropClient',\n        client: this.id\n      }\n    });\n  }\n  /**\n   * Makes an HTTP request.\n   * @example\n   * ```typescript\n   * import { getClient } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.request({\n   *   method: 'GET',\n   *   url: 'http://localhost:3003/users',\n   * });\n   * ```\n   */\n  async request(options) {\n    const jsonResponse = !options.responseType || options.responseType === ResponseType.JSON;\n    if (jsonResponse) {\n      options.responseType = ResponseType.Text;\n    }\n    if (options.body?.type === 'Form') {\n      options.body.payload = await formBody(options.body.payload);\n    }\n    return invokeTauriCommand({\n      __tauriModule: 'Http',\n      message: {\n        cmd: 'httpRequest',\n        client: this.id,\n        options\n      }\n    }).then(res => {\n      const response = new Response(res);\n      if (jsonResponse) {\n        /* eslint-disable */\n        try {\n          response.data = JSON.parse(response.data);\n        } catch (e) {\n          if (response.ok && response.data === '') {\n            response.data = {};\n          } else if (response.ok) {\n            throw Error(`Failed to parse response \\`${response.data}\\` as JSON: ${e};\n              try setting the \\`responseType\\` option to \\`ResponseType.Text\\` or \\`ResponseType.Binary\\` if the API does not return a JSON response.`);\n          }\n        }\n        /* eslint-enable */\n        return response;\n      }\n      return response;\n    });\n  }\n  /**\n   * Makes a GET request.\n   * @example\n   * ```typescript\n   * import { getClient, ResponseType } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.get('http://localhost:3003/users', {\n   *   timeout: 30,\n   *   // the expected response type\n   *   responseType: ResponseType.JSON\n   * });\n   * ```\n   */\n  async get(url, options) {\n    return this.request({\n      method: 'GET',\n      url,\n      ...options\n    });\n  }\n  /**\n   * Makes a POST request.\n   * @example\n   * ```typescript\n   * import { getClient, Body, ResponseType } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.post('http://localhost:3003/users', {\n   *   body: Body.json({\n   *     name: 'tauri',\n   *     password: 'awesome'\n   *   }),\n   *   // in this case the server returns a simple string\n   *   responseType: ResponseType.Text,\n   * });\n   * ```\n   */\n  async post(url, body, options) {\n    return this.request({\n      method: 'POST',\n      url,\n      body,\n      ...options\n    });\n  }\n  /**\n   * Makes a PUT request.\n   * @example\n   * ```typescript\n   * import { getClient, Body } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.put('http://localhost:3003/users/1', {\n   *   body: Body.form({\n   *     file: {\n   *       file: '/home/tauri/avatar.png',\n   *       mime: 'image/png',\n   *       fileName: 'avatar.png'\n   *     }\n   *   })\n   * });\n   * ```\n   */\n  async put(url, body, options) {\n    return this.request({\n      method: 'PUT',\n      url,\n      body,\n      ...options\n    });\n  }\n  /**\n   * Makes a PATCH request.\n   * @example\n   * ```typescript\n   * import { getClient, Body } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.patch('http://localhost:3003/users/1', {\n   *   body: Body.json({ email: 'contact@tauri.app' })\n   * });\n   * ```\n   */\n  async patch(url, options) {\n    return this.request({\n      method: 'PATCH',\n      url,\n      ...options\n    });\n  }\n  /**\n   * Makes a DELETE request.\n   * @example\n   * ```typescript\n   * import { getClient } from '@tauri-apps/api/http';\n   * const client = await getClient();\n   * const response = await client.delete('http://localhost:3003/users/1');\n   * ```\n   */\n  async delete(url, options) {\n    return this.request({\n      method: 'DELETE',\n      url,\n      ...options\n    });\n  }\n}\n/**\n * Creates a new client using the specified options.\n * @example\n * ```typescript\n * import { getClient } from '@tauri-apps/api/http';\n * const client = await getClient();\n * ```\n *\n * @param options Client configuration.\n *\n * @returns A promise resolving to the client instance.\n *\n * @since 1.0.0\n */\nasync function getClient(options) {\n  return invokeTauriCommand({\n    __tauriModule: 'Http',\n    message: {\n      cmd: 'createClient',\n      options\n    }\n  }).then(id => new Client(id));\n}\n/** @internal */\nlet defaultClient = null;\n/**\n * Perform an HTTP request using the default client.\n * @example\n * ```typescript\n * import { fetch } from '@tauri-apps/api/http';\n * const response = await fetch('http://localhost:3003/users/2', {\n *   method: 'GET',\n *   timeout: 30,\n * });\n * ```\n */\nasync function fetch(url, options) {\n  if (defaultClient === null) {\n    defaultClient = await getClient();\n  }\n  return defaultClient.request({\n    url,\n    method: options?.method ?? 'GET',\n    ...options\n  });\n}\nexport { Body, Client, Response, ResponseType, fetch, getClient };","map":{"version":3,"names":["invokeTauriCommand","ResponseType","formBody","data","form","append","key","v","r","Uint8Array","Array","isArray","from","File","file","arrayBuffer","mime","type","fileName","name","String","FormData","value","Object","entries","Body","constructor","payload","json","text","bytes","ArrayBuffer","Response","response","url","status","ok","headers","rawHeaders","Client","id","drop","__tauriModule","message","cmd","client","request","options","jsonResponse","responseType","JSON","Text","body","then","res","parse","e","Error","get","method","post","put","patch","delete","getClient","defaultClient","fetch"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/node_modules/@tauri-apps/api/http.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the HTTP client written in Rust.\n *\n * This package is also accessible with `window.__TAURI__.http` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be allowlisted on `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"all\": true, // enable all http APIs\n *         \"request\": true // enable HTTP request API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the URLs and paths that can be accessed using glob patterns.\n *\n * For instance, this scope configuration only allows making HTTP requests to the GitHub API for the `tauri-apps` organization:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"http\": {\n *         \"scope\": [\"https://api.github.com/repos/tauri-apps/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"JSON\"] = 1] = \"JSON\";\n    ResponseType[ResponseType[\"Text\"] = 2] = \"Text\";\n    ResponseType[ResponseType[\"Binary\"] = 3] = \"Binary\";\n})(ResponseType || (ResponseType = {}));\nasync function formBody(data) {\n    const form = {};\n    const append = async (key, v) => {\n        if (v !== null) {\n            let r;\n            if (typeof v === 'string') {\n                r = v;\n            }\n            else if (v instanceof Uint8Array || Array.isArray(v)) {\n                r = Array.from(v);\n            }\n            else if (v instanceof File) {\n                r = {\n                    file: Array.from(new Uint8Array(await v.arrayBuffer())),\n                    mime: v.type,\n                    fileName: v.name\n                };\n            }\n            else if (typeof v.file === 'string') {\n                r = { file: v.file, mime: v.mime, fileName: v.fileName };\n            }\n            else {\n                r = { file: Array.from(v.file), mime: v.mime, fileName: v.fileName };\n            }\n            form[String(key)] = r;\n        }\n    };\n    if (data instanceof FormData) {\n        for (const [key, value] of data) {\n            await append(key, value);\n        }\n    }\n    else {\n        for (const [key, value] of Object.entries(data)) {\n            await append(key, value);\n        }\n    }\n    return form;\n}\n/**\n * The body object to be used on POST and PUT requests.\n *\n * @since 1.0.0\n */\nclass Body {\n    /** @ignore */\n    constructor(type, payload) {\n        this.type = type;\n        this.payload = payload;\n    }\n    /**\n     * Creates a new form data body. The form data is an object where each key is the entry name,\n     * and the value is either a string or a file object.\n     *\n     * By default it sets the `application/x-www-form-urlencoded` Content-Type header,\n     * but you can set it to `multipart/form-data` if the Cargo feature `http-multipart` is enabled.\n     *\n     * Note that a file path must be allowed in the `fs` allowlist scope.\n     *\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * const body = Body.form({\n     *   key: 'value',\n     *   image: {\n     *     file: '/path/to/file', // either a path or an array buffer of the file contents\n     *     mime: 'image/jpeg', // optional\n     *     fileName: 'image.jpg' // optional\n     *   }\n     * });\n     *\n     * // alternatively, use a FormData:\n     * const form = new FormData();\n     * form.append('key', 'value');\n     * form.append('image', file, 'image.png');\n     * const formBody = Body.form(form);\n     * ```\n     *\n     * @param data The body data.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static form(data) {\n        return new Body('Form', data);\n    }\n    /**\n     * Creates a new JSON body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.json({\n     *   registered: true,\n     *   name: 'tauri'\n     * });\n     * ```\n     *\n     * @param data The body JSON object.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static json(data) {\n        return new Body('Json', data);\n    }\n    /**\n     * Creates a new UTF-8 string body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.text('The body content as a string');\n     * ```\n     *\n     * @param value The body string.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static text(value) {\n        return new Body('Text', value);\n    }\n    /**\n     * Creates a new byte array body.\n     * @example\n     * ```typescript\n     * import { Body } from \"@tauri-apps/api/http\"\n     * Body.bytes(new Uint8Array([1, 2, 3]));\n     * ```\n     *\n     * @param bytes The body byte array.\n     *\n     * @returns The body object ready to be used on the POST and PUT requests.\n     */\n    static bytes(bytes) {\n        // stringifying Uint8Array doesn't return an array of numbers, so we create one here\n        return new Body('Bytes', Array.from(bytes instanceof ArrayBuffer ? new Uint8Array(bytes) : bytes));\n    }\n}\n/**\n * Response object.\n *\n * @since 1.0.0\n * */\nclass Response {\n    /** @ignore */\n    constructor(response) {\n        this.url = response.url;\n        this.status = response.status;\n        this.ok = this.status >= 200 && this.status < 300;\n        this.headers = response.headers;\n        this.rawHeaders = response.rawHeaders;\n        this.data = response.data;\n    }\n}\n/**\n * @since 1.0.0\n */\nclass Client {\n    /** @ignore */\n    constructor(id) {\n        this.id = id;\n    }\n    /**\n     * Drops the client instance.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * await client.drop();\n     * ```\n     */\n    async drop() {\n        return invokeTauriCommand({\n            __tauriModule: 'Http',\n            message: {\n                cmd: 'dropClient',\n                client: this.id\n            }\n        });\n    }\n    /**\n     * Makes an HTTP request.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.request({\n     *   method: 'GET',\n     *   url: 'http://localhost:3003/users',\n     * });\n     * ```\n     */\n    async request(options) {\n        const jsonResponse = !options.responseType || options.responseType === ResponseType.JSON;\n        if (jsonResponse) {\n            options.responseType = ResponseType.Text;\n        }\n        if (options.body?.type === 'Form') {\n            options.body.payload = await formBody(options.body.payload);\n        }\n        return invokeTauriCommand({\n            __tauriModule: 'Http',\n            message: {\n                cmd: 'httpRequest',\n                client: this.id,\n                options\n            }\n        }).then((res) => {\n            const response = new Response(res);\n            if (jsonResponse) {\n                /* eslint-disable */\n                try {\n                    response.data = JSON.parse(response.data);\n                }\n                catch (e) {\n                    if (response.ok && response.data === '') {\n                        response.data = {};\n                    }\n                    else if (response.ok) {\n                        throw Error(`Failed to parse response \\`${response.data}\\` as JSON: ${e};\n              try setting the \\`responseType\\` option to \\`ResponseType.Text\\` or \\`ResponseType.Binary\\` if the API does not return a JSON response.`);\n                    }\n                }\n                /* eslint-enable */\n                return response;\n            }\n            return response;\n        });\n    }\n    /**\n     * Makes a GET request.\n     * @example\n     * ```typescript\n     * import { getClient, ResponseType } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.get('http://localhost:3003/users', {\n     *   timeout: 30,\n     *   // the expected response type\n     *   responseType: ResponseType.JSON\n     * });\n     * ```\n     */\n    async get(url, options) {\n        return this.request({\n            method: 'GET',\n            url,\n            ...options\n        });\n    }\n    /**\n     * Makes a POST request.\n     * @example\n     * ```typescript\n     * import { getClient, Body, ResponseType } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.post('http://localhost:3003/users', {\n     *   body: Body.json({\n     *     name: 'tauri',\n     *     password: 'awesome'\n     *   }),\n     *   // in this case the server returns a simple string\n     *   responseType: ResponseType.Text,\n     * });\n     * ```\n     */\n    async post(url, body, options) {\n        return this.request({\n            method: 'POST',\n            url,\n            body,\n            ...options\n        });\n    }\n    /**\n     * Makes a PUT request.\n     * @example\n     * ```typescript\n     * import { getClient, Body } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.put('http://localhost:3003/users/1', {\n     *   body: Body.form({\n     *     file: {\n     *       file: '/home/tauri/avatar.png',\n     *       mime: 'image/png',\n     *       fileName: 'avatar.png'\n     *     }\n     *   })\n     * });\n     * ```\n     */\n    async put(url, body, options) {\n        return this.request({\n            method: 'PUT',\n            url,\n            body,\n            ...options\n        });\n    }\n    /**\n     * Makes a PATCH request.\n     * @example\n     * ```typescript\n     * import { getClient, Body } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.patch('http://localhost:3003/users/1', {\n     *   body: Body.json({ email: 'contact@tauri.app' })\n     * });\n     * ```\n     */\n    async patch(url, options) {\n        return this.request({\n            method: 'PATCH',\n            url,\n            ...options\n        });\n    }\n    /**\n     * Makes a DELETE request.\n     * @example\n     * ```typescript\n     * import { getClient } from '@tauri-apps/api/http';\n     * const client = await getClient();\n     * const response = await client.delete('http://localhost:3003/users/1');\n     * ```\n     */\n    async delete(url, options) {\n        return this.request({\n            method: 'DELETE',\n            url,\n            ...options\n        });\n    }\n}\n/**\n * Creates a new client using the specified options.\n * @example\n * ```typescript\n * import { getClient } from '@tauri-apps/api/http';\n * const client = await getClient();\n * ```\n *\n * @param options Client configuration.\n *\n * @returns A promise resolving to the client instance.\n *\n * @since 1.0.0\n */\nasync function getClient(options) {\n    return invokeTauriCommand({\n        __tauriModule: 'Http',\n        message: {\n            cmd: 'createClient',\n            options\n        }\n    }).then((id) => new Client(id));\n}\n/** @internal */\nlet defaultClient = null;\n/**\n * Perform an HTTP request using the default client.\n * @example\n * ```typescript\n * import { fetch } from '@tauri-apps/api/http';\n * const response = await fetch('http://localhost:3003/users/2', {\n *   method: 'GET',\n *   timeout: 30,\n * });\n * ```\n */\nasync function fetch(url, options) {\n    if (defaultClient === null) {\n        defaultClient = await getClient();\n    }\n    return defaultClient.request({\n        url,\n        method: options?.method ?? 'GET',\n        ...options\n    });\n}\n\nexport { Body, Client, Response, ResponseType, fetch, getClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}