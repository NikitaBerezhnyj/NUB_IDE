{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the file system.\n *\n * This package is also accessible with `window.__TAURI__.fs` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.fs`](https://tauri.app/v1/api/config/#allowlistconfig.fs) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"all\": true, // enable all FS APIs\n *         \"readFile\": true,\n *         \"writeFile\": true,\n *         \"readDir\": true,\n *         \"copyFile\": true,\n *         \"createDir\": true,\n *         \"removeDir\": true,\n *         \"removeFile\": true,\n *         \"renameFile\": true,\n *         \"exists\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This module prevents path traversal, not allowing absolute paths or parent dir components\n * (i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\n * Paths accessed with this API must be relative to one of the {@link BaseDirectory | base directories}\n * so if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n *\n * The API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n *\n * The scope configuration is an array of glob patterns describing folder paths that are allowed.\n * For instance, this scope configuration only allows accessing files on the\n * *databases* folder of the {@link path.appDataDir | $APPDATA directory}:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"scope\": [\"$APPDATA/databases/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * Notice the use of the `$APPDATA` variable. The value is injected at runtime, resolving to the {@link path.appDataDir | app data directory}.\n * The available variables are:\n * {@link path.appConfigDir | `$APPCONFIG`}, {@link path.appDataDir | `$APPDATA`}, {@link path.appLocalDataDir | `$APPLOCALDATA`},\n * {@link path.appCacheDir | `$APPCACHE`}, {@link path.appLogDir | `$APPLOG`},\n * {@link path.audioDir | `$AUDIO`}, {@link path.cacheDir | `$CACHE`}, {@link path.configDir | `$CONFIG`}, {@link path.dataDir | `$DATA`},\n * {@link path.localDataDir | `$LOCALDATA`}, {@link path.desktopDir | `$DESKTOP`}, {@link path.documentDir | `$DOCUMENT`},\n * {@link path.downloadDir | `$DOWNLOAD`}, {@link path.executableDir | `$EXE`}, {@link path.fontDir | `$FONT`}, {@link path.homeDir | `$HOME`},\n * {@link path.pictureDir | `$PICTURE`}, {@link path.publicDir | `$PUBLIC`}, {@link path.runtimeDir | `$RUNTIME`},\n * {@link path.templateDir | `$TEMPLATE`}, {@link path.videoDir | `$VIDEO`}, {@link path.resourceDir | `$RESOURCE`}, {@link path.appDir | `$APP`},\n * {@link path.logDir | `$LOG`}, {@link os.tempdir | `$TEMP`}.\n *\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * Note that this scope applies to **all** APIs on this module.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n  BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n  BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n  BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n  BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n  BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n  BaseDirectory[BaseDirectory[\"Desktop\"] = 6] = \"Desktop\";\n  BaseDirectory[BaseDirectory[\"Document\"] = 7] = \"Document\";\n  BaseDirectory[BaseDirectory[\"Download\"] = 8] = \"Download\";\n  BaseDirectory[BaseDirectory[\"Executable\"] = 9] = \"Executable\";\n  BaseDirectory[BaseDirectory[\"Font\"] = 10] = \"Font\";\n  BaseDirectory[BaseDirectory[\"Home\"] = 11] = \"Home\";\n  BaseDirectory[BaseDirectory[\"Picture\"] = 12] = \"Picture\";\n  BaseDirectory[BaseDirectory[\"Public\"] = 13] = \"Public\";\n  BaseDirectory[BaseDirectory[\"Runtime\"] = 14] = \"Runtime\";\n  BaseDirectory[BaseDirectory[\"Template\"] = 15] = \"Template\";\n  BaseDirectory[BaseDirectory[\"Video\"] = 16] = \"Video\";\n  BaseDirectory[BaseDirectory[\"Resource\"] = 17] = \"Resource\";\n  BaseDirectory[BaseDirectory[\"App\"] = 18] = \"App\";\n  BaseDirectory[BaseDirectory[\"Log\"] = 19] = \"Log\";\n  BaseDirectory[BaseDirectory[\"Temp\"] = 20] = \"Temp\";\n  BaseDirectory[BaseDirectory[\"AppConfig\"] = 21] = \"AppConfig\";\n  BaseDirectory[BaseDirectory[\"AppData\"] = 22] = \"AppData\";\n  BaseDirectory[BaseDirectory[\"AppLocalData\"] = 23] = \"AppLocalData\";\n  BaseDirectory[BaseDirectory[\"AppCache\"] = 24] = \"AppCache\";\n  BaseDirectory[BaseDirectory[\"AppLog\"] = 25] = \"AppLog\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Reads a file as an UTF-8 encoded string.\n * @example\n * ```typescript\n * import { readTextFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the text file in the `$APPCONFIG/app.conf` path\n * const contents = await readTextFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @since 1.0.0\n */\nasync function readTextFile(filePath, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'readTextFile',\n      path: filePath,\n      options\n    }\n  });\n}\n/**\n * Reads a file as byte array.\n * @example\n * ```typescript\n * import { readBinaryFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the image file in the `$RESOURCEDIR/avatar.png` path\n * const contents = await readBinaryFile('avatar.png', { dir: BaseDirectory.Resource });\n * ```\n *\n * @since 1.0.0\n */\nasync function readBinaryFile(filePath, options = {}) {\n  const arr = await invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'readFile',\n      path: filePath,\n      options\n    }\n  });\n  return Uint8Array.from(arr);\n}\n/**\n * Writes a UTF-8 text file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeTextFile(path, contents, options) {\n  if (typeof options === 'object') {\n    Object.freeze(options);\n  }\n  if (typeof path === 'object') {\n    Object.freeze(path);\n  }\n  const file = {\n    path: '',\n    contents: ''\n  };\n  let fileOptions = options;\n  if (typeof path === 'string') {\n    file.path = path;\n  } else {\n    file.path = path.path;\n    file.contents = path.contents;\n  }\n  if (typeof contents === 'string') {\n    file.contents = contents ?? '';\n  } else {\n    fileOptions = contents;\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'writeFile',\n      path: file.path,\n      contents: Array.from(new TextEncoder().encode(file.contents)),\n      options: fileOptions\n    }\n  });\n}\n/**\n * Writes a byte array content to a file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeBinaryFile(path, contents, options) {\n  if (typeof options === 'object') {\n    Object.freeze(options);\n  }\n  if (typeof path === 'object') {\n    Object.freeze(path);\n  }\n  const file = {\n    path: '',\n    contents: []\n  };\n  let fileOptions = options;\n  if (typeof path === 'string') {\n    file.path = path;\n  } else {\n    file.path = path.path;\n    file.contents = path.contents;\n  }\n  if (contents && 'dir' in contents) {\n    fileOptions = contents;\n  } else if (typeof path === 'string') {\n    // @ts-expect-error in this case `contents` is always a BinaryFileContents\n    file.contents = contents ?? [];\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'writeFile',\n      path: file.path,\n      contents: Array.from(file.contents instanceof ArrayBuffer ? new Uint8Array(file.contents) : file.contents),\n      options: fileOptions\n    }\n  });\n}\n/**\n * List directory files.\n * @example\n * ```typescript\n * import { readDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Reads the `$APPDATA/users` directory recursively\n * const entries = await readDir('users', { dir: BaseDirectory.AppData, recursive: true });\n *\n * function processEntries(entries) {\n *   for (const entry of entries) {\n *     console.log(`Entry: ${entry.path}`);\n *     if (entry.children) {\n *       processEntries(entry.children)\n *     }\n *   }\n * }\n * ```\n *\n * @since 1.0.0\n */\nasync function readDir(dir, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'readDir',\n      path: dir,\n      options\n    }\n  });\n}\n/**\n * Creates a directory.\n * If one of the path's parent components doesn't exist\n * and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { createDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Create the `$APPDATA/users` directory\n * await createDir('users', { dir: BaseDirectory.AppData, recursive: true });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function createDir(dir, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'createDir',\n      path: dir,\n      options\n    }\n  });\n}\n/**\n * Removes a directory.\n * If the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { removeDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the directory `$APPDATA/users`\n * await removeDir('users', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeDir(dir, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'removeDir',\n      path: dir,\n      options\n    }\n  });\n}\n/**\n * Copies a file to a destination.\n * @example\n * ```typescript\n * import { copyFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Copy the `$APPCONFIG/app.conf` file to `$APPCONFIG/app.conf.bk`\n * await copyFile('app.conf', 'app.conf.bk', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function copyFile(source, destination, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'copyFile',\n      source,\n      destination,\n      options\n    }\n  });\n}\n/**\n * Removes a file.\n * @example\n * ```typescript\n * import { removeFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the `$APPConfig/app.conf` file\n * await removeFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeFile(file, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'removeFile',\n      path: file,\n      options\n    }\n  });\n}\n/**\n * Renames a file.\n * @example\n * ```typescript\n * import { renameFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Rename the `$APPDATA/avatar.png` file\n * await renameFile('avatar.png', 'deleted.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function renameFile(oldPath, newPath, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'renameFile',\n      oldPath,\n      newPath,\n      options\n    }\n  });\n}\n/**\n * Check if a path exists.\n * @example\n * ```typescript\n * import { exists, BaseDirectory } from '@tauri-apps/api/fs';\n * // Check if the `$APPDATA/avatar.png` file exists\n * await exists('avatar.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @since 1.1.0\n */\nasync function exists(path, options = {}) {\n  return invokeTauriCommand({\n    __tauriModule: 'Fs',\n    message: {\n      cmd: 'exists',\n      path,\n      options\n    }\n  });\n}\nexport { BaseDirectory, BaseDirectory as Dir, copyFile, createDir, exists, readBinaryFile, readDir, readTextFile, removeDir, removeFile, renameFile, writeBinaryFile, writeTextFile as writeFile, writeTextFile };","map":{"version":3,"names":["invokeTauriCommand","BaseDirectory","readTextFile","filePath","options","__tauriModule","message","cmd","path","readBinaryFile","arr","Uint8Array","from","writeTextFile","contents","Object","freeze","file","fileOptions","Array","TextEncoder","encode","writeBinaryFile","ArrayBuffer","readDir","dir","createDir","removeDir","copyFile","source","destination","removeFile","renameFile","oldPath","newPath","exists","Dir","writeFile"],"sources":["/home/nikita/Проєкти/NUB_Project/NUB_IDE/node_modules/@tauri-apps/api/fs.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the file system.\n *\n * This package is also accessible with `window.__TAURI__.fs` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.fs`](https://tauri.app/v1/api/config/#allowlistconfig.fs) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"all\": true, // enable all FS APIs\n *         \"readFile\": true,\n *         \"writeFile\": true,\n *         \"readDir\": true,\n *         \"copyFile\": true,\n *         \"createDir\": true,\n *         \"removeDir\": true,\n *         \"removeFile\": true,\n *         \"renameFile\": true,\n *         \"exists\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This module prevents path traversal, not allowing absolute paths or parent dir components\n * (i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\n * Paths accessed with this API must be relative to one of the {@link BaseDirectory | base directories}\n * so if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n *\n * The API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n *\n * The scope configuration is an array of glob patterns describing folder paths that are allowed.\n * For instance, this scope configuration only allows accessing files on the\n * *databases* folder of the {@link path.appDataDir | $APPDATA directory}:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"scope\": [\"$APPDATA/databases/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * Notice the use of the `$APPDATA` variable. The value is injected at runtime, resolving to the {@link path.appDataDir | app data directory}.\n * The available variables are:\n * {@link path.appConfigDir | `$APPCONFIG`}, {@link path.appDataDir | `$APPDATA`}, {@link path.appLocalDataDir | `$APPLOCALDATA`},\n * {@link path.appCacheDir | `$APPCACHE`}, {@link path.appLogDir | `$APPLOG`},\n * {@link path.audioDir | `$AUDIO`}, {@link path.cacheDir | `$CACHE`}, {@link path.configDir | `$CONFIG`}, {@link path.dataDir | `$DATA`},\n * {@link path.localDataDir | `$LOCALDATA`}, {@link path.desktopDir | `$DESKTOP`}, {@link path.documentDir | `$DOCUMENT`},\n * {@link path.downloadDir | `$DOWNLOAD`}, {@link path.executableDir | `$EXE`}, {@link path.fontDir | `$FONT`}, {@link path.homeDir | `$HOME`},\n * {@link path.pictureDir | `$PICTURE`}, {@link path.publicDir | `$PUBLIC`}, {@link path.runtimeDir | `$RUNTIME`},\n * {@link path.templateDir | `$TEMPLATE`}, {@link path.videoDir | `$VIDEO`}, {@link path.resourceDir | `$RESOURCE`}, {@link path.appDir | `$APP`},\n * {@link path.logDir | `$LOG`}, {@link os.tempdir | `$TEMP`}.\n *\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * Note that this scope applies to **all** APIs on this module.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 6] = \"Desktop\";\n    BaseDirectory[BaseDirectory[\"Document\"] = 7] = \"Document\";\n    BaseDirectory[BaseDirectory[\"Download\"] = 8] = \"Download\";\n    BaseDirectory[BaseDirectory[\"Executable\"] = 9] = \"Executable\";\n    BaseDirectory[BaseDirectory[\"Font\"] = 10] = \"Font\";\n    BaseDirectory[BaseDirectory[\"Home\"] = 11] = \"Home\";\n    BaseDirectory[BaseDirectory[\"Picture\"] = 12] = \"Picture\";\n    BaseDirectory[BaseDirectory[\"Public\"] = 13] = \"Public\";\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 14] = \"Runtime\";\n    BaseDirectory[BaseDirectory[\"Template\"] = 15] = \"Template\";\n    BaseDirectory[BaseDirectory[\"Video\"] = 16] = \"Video\";\n    BaseDirectory[BaseDirectory[\"Resource\"] = 17] = \"Resource\";\n    BaseDirectory[BaseDirectory[\"App\"] = 18] = \"App\";\n    BaseDirectory[BaseDirectory[\"Log\"] = 19] = \"Log\";\n    BaseDirectory[BaseDirectory[\"Temp\"] = 20] = \"Temp\";\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 21] = \"AppConfig\";\n    BaseDirectory[BaseDirectory[\"AppData\"] = 22] = \"AppData\";\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 23] = \"AppLocalData\";\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 24] = \"AppCache\";\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 25] = \"AppLog\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Reads a file as an UTF-8 encoded string.\n * @example\n * ```typescript\n * import { readTextFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the text file in the `$APPCONFIG/app.conf` path\n * const contents = await readTextFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @since 1.0.0\n */\nasync function readTextFile(filePath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readTextFile',\n            path: filePath,\n            options\n        }\n    });\n}\n/**\n * Reads a file as byte array.\n * @example\n * ```typescript\n * import { readBinaryFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the image file in the `$RESOURCEDIR/avatar.png` path\n * const contents = await readBinaryFile('avatar.png', { dir: BaseDirectory.Resource });\n * ```\n *\n * @since 1.0.0\n */\nasync function readBinaryFile(filePath, options = {}) {\n    const arr = await invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readFile',\n            path: filePath,\n            options\n        }\n    });\n    return Uint8Array.from(arr);\n}\n/**\n * Writes a UTF-8 text file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeTextFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: '' };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (typeof contents === 'string') {\n        file.contents = contents ?? '';\n    }\n    else {\n        fileOptions = contents;\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(new TextEncoder().encode(file.contents)),\n            options: fileOptions\n        }\n    });\n}\n/**\n * Writes a byte array content to a file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeBinaryFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: [] };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (contents && 'dir' in contents) {\n        fileOptions = contents;\n    }\n    else if (typeof path === 'string') {\n        // @ts-expect-error in this case `contents` is always a BinaryFileContents\n        file.contents = contents ?? [];\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(file.contents instanceof ArrayBuffer\n                ? new Uint8Array(file.contents)\n                : file.contents),\n            options: fileOptions\n        }\n    });\n}\n/**\n * List directory files.\n * @example\n * ```typescript\n * import { readDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Reads the `$APPDATA/users` directory recursively\n * const entries = await readDir('users', { dir: BaseDirectory.AppData, recursive: true });\n *\n * function processEntries(entries) {\n *   for (const entry of entries) {\n *     console.log(`Entry: ${entry.path}`);\n *     if (entry.children) {\n *       processEntries(entry.children)\n *     }\n *   }\n * }\n * ```\n *\n * @since 1.0.0\n */\nasync function readDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Creates a directory.\n * If one of the path's parent components doesn't exist\n * and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { createDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Create the `$APPDATA/users` directory\n * await createDir('users', { dir: BaseDirectory.AppData, recursive: true });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function createDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'createDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Removes a directory.\n * If the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { removeDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the directory `$APPDATA/users`\n * await removeDir('users', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Copies a file to a destination.\n * @example\n * ```typescript\n * import { copyFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Copy the `$APPCONFIG/app.conf` file to `$APPCONFIG/app.conf.bk`\n * await copyFile('app.conf', 'app.conf.bk', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function copyFile(source, destination, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'copyFile',\n            source,\n            destination,\n            options\n        }\n    });\n}\n/**\n * Removes a file.\n * @example\n * ```typescript\n * import { removeFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the `$APPConfig/app.conf` file\n * await removeFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeFile(file, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeFile',\n            path: file,\n            options\n        }\n    });\n}\n/**\n * Renames a file.\n * @example\n * ```typescript\n * import { renameFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Rename the `$APPDATA/avatar.png` file\n * await renameFile('avatar.png', 'deleted.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function renameFile(oldPath, newPath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'renameFile',\n            oldPath,\n            newPath,\n            options\n        }\n    });\n}\n/**\n * Check if a path exists.\n * @example\n * ```typescript\n * import { exists, BaseDirectory } from '@tauri-apps/api/fs';\n * // Check if the `$APPDATA/avatar.png` file exists\n * await exists('avatar.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @since 1.1.0\n */\nasync function exists(path, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'exists',\n            path,\n            options\n        }\n    });\n}\n\nexport { BaseDirectory, BaseDirectory as Dir, copyFile, createDir, exists, readBinaryFile, readDir, readTextFile, removeDir, removeFile, renameFile, writeBinaryFile, writeTextFile as writeFile, writeTextFile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}