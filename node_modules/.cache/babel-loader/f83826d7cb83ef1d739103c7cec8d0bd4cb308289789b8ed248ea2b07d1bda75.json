{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Register global shortcuts.\n *\n * This package is also accessible with `window.__TAURI__.globalShortcut` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.globalShortcut`](https://tauri.app/v1/api/config/#allowlistconfig.globalshortcut) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"globalShortcut\": {\n *         \"all\": true // enable all global shortcut APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Register a global shortcut.\n * @example\n * ```typescript\n * import { register } from '@tauri-apps/api/globalShortcut';\n * await register('CommandOrControl+Shift+C', () => {\n *   console.log('Shortcut triggered');\n * });\n * ```\n *\n * @param shortcut Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function register(shortcut, handler) {\n  return invokeTauriCommand({\n    __tauriModule: 'GlobalShortcut',\n    message: {\n      cmd: 'register',\n      shortcut,\n      handler: transformCallback(handler)\n    }\n  });\n}\n/**\n * Register a collection of global shortcuts.\n * @example\n * ```typescript\n * import { registerAll } from '@tauri-apps/api/globalShortcut';\n * await registerAll(['CommandOrControl+Shift+C', 'Ctrl+Alt+F12'], (shortcut) => {\n *   console.log(`Shortcut ${shortcut} triggered`);\n * });\n * ```\n *\n * @param shortcuts Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function registerAll(shortcuts, handler) {\n  return invokeTauriCommand({\n    __tauriModule: 'GlobalShortcut',\n    message: {\n      cmd: 'registerAll',\n      shortcuts,\n      handler: transformCallback(handler)\n    }\n  });\n}\n/**\n * Determines whether the given shortcut is registered by this application or not.\n * @example\n * ```typescript\n * import { isRegistered } from '@tauri-apps/api/globalShortcut';\n * const isRegistered = await isRegistered('CommandOrControl+P');\n * ```\n *\n * @param shortcut Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function isRegistered(shortcut) {\n  return invokeTauriCommand({\n    __tauriModule: 'GlobalShortcut',\n    message: {\n      cmd: 'isRegistered',\n      shortcut\n    }\n  });\n}\n/**\n * Unregister a global shortcut.\n * @example\n * ```typescript\n * import { unregister } from '@tauri-apps/api/globalShortcut';\n * await unregister('CmdOrControl+Space');\n * ```\n *\n * @param shortcut shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function unregister(shortcut) {\n  return invokeTauriCommand({\n    __tauriModule: 'GlobalShortcut',\n    message: {\n      cmd: 'unregister',\n      shortcut\n    }\n  });\n}\n/**\n * Unregisters all shortcuts registered by the application.\n * @example\n * ```typescript\n * import { unregisterAll } from '@tauri-apps/api/globalShortcut';\n * await unregisterAll();\n * ```\n *\n * @since 1.0.0\n */\nasync function unregisterAll() {\n  return invokeTauriCommand({\n    __tauriModule: 'GlobalShortcut',\n    message: {\n      cmd: 'unregisterAll'\n    }\n  });\n}\nexport { isRegistered, register, registerAll, unregister, unregisterAll };","map":{"version":3,"names":["invokeTauriCommand","transformCallback","register","shortcut","handler","__tauriModule","message","cmd","registerAll","shortcuts","isRegistered","unregister","unregisterAll"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/node_modules/@tauri-apps/api/globalShortcut.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Register global shortcuts.\n *\n * This package is also accessible with `window.__TAURI__.globalShortcut` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.globalShortcut`](https://tauri.app/v1/api/config/#allowlistconfig.globalshortcut) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"globalShortcut\": {\n *         \"all\": true // enable all global shortcut APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Register a global shortcut.\n * @example\n * ```typescript\n * import { register } from '@tauri-apps/api/globalShortcut';\n * await register('CommandOrControl+Shift+C', () => {\n *   console.log('Shortcut triggered');\n * });\n * ```\n *\n * @param shortcut Shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function register(shortcut, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'register',\n            shortcut,\n            handler: transformCallback(handler)\n        }\n    });\n}\n/**\n * Register a collection of global shortcuts.\n * @example\n * ```typescript\n * import { registerAll } from '@tauri-apps/api/globalShortcut';\n * await registerAll(['CommandOrControl+Shift+C', 'Ctrl+Alt+F12'], (shortcut) => {\n *   console.log(`Shortcut ${shortcut} triggered`);\n * });\n * ```\n *\n * @param shortcuts Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n * @param handler Shortcut handler callback - takes the triggered shortcut as argument\n *\n * @since 1.0.0\n */\nasync function registerAll(shortcuts, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'registerAll',\n            shortcuts,\n            handler: transformCallback(handler)\n        }\n    });\n}\n/**\n * Determines whether the given shortcut is registered by this application or not.\n * @example\n * ```typescript\n * import { isRegistered } from '@tauri-apps/api/globalShortcut';\n * const isRegistered = await isRegistered('CommandOrControl+P');\n * ```\n *\n * @param shortcut Array of shortcut definitions, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function isRegistered(shortcut) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'isRegistered',\n            shortcut\n        }\n    });\n}\n/**\n * Unregister a global shortcut.\n * @example\n * ```typescript\n * import { unregister } from '@tauri-apps/api/globalShortcut';\n * await unregister('CmdOrControl+Space');\n * ```\n *\n * @param shortcut shortcut definition, modifiers and key separated by \"+\" e.g. CmdOrControl+Q\n *\n * @since 1.0.0\n */\nasync function unregister(shortcut) {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'unregister',\n            shortcut\n        }\n    });\n}\n/**\n * Unregisters all shortcuts registered by the application.\n * @example\n * ```typescript\n * import { unregisterAll } from '@tauri-apps/api/globalShortcut';\n * await unregisterAll();\n * ```\n *\n * @since 1.0.0\n */\nasync function unregisterAll() {\n    return invokeTauriCommand({\n        __tauriModule: 'GlobalShortcut',\n        message: {\n            cmd: 'unregisterAll'\n        }\n    });\n}\n\nexport { isRegistered, register, registerAll, unregister, unregisterAll };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,iBAAiB,QAAQ,YAAY;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,QAAQA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACvC,OAAOJ,kBAAkB,CAAC;IACtBK,aAAa,EAAE,gBAAgB;IAC/BC,OAAO,EAAE;MACLC,GAAG,EAAE,UAAU;MACfJ,QAAQ;MACRC,OAAO,EAAEH,iBAAiB,CAACG,OAAO;IACtC;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,WAAWA,CAACC,SAAS,EAAEL,OAAO,EAAE;EAC3C,OAAOJ,kBAAkB,CAAC;IACtBK,aAAa,EAAE,gBAAgB;IAC/BC,OAAO,EAAE;MACLC,GAAG,EAAE,aAAa;MAClBE,SAAS;MACTL,OAAO,EAAEH,iBAAiB,CAACG,OAAO;IACtC;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeM,YAAYA,CAACP,QAAQ,EAAE;EAClC,OAAOH,kBAAkB,CAAC;IACtBK,aAAa,EAAE,gBAAgB;IAC/BC,OAAO,EAAE;MACLC,GAAG,EAAE,cAAc;MACnBJ;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeQ,UAAUA,CAACR,QAAQ,EAAE;EAChC,OAAOH,kBAAkB,CAAC;IACtBK,aAAa,EAAE,gBAAgB;IAC/BC,OAAO,EAAE;MACLC,GAAG,EAAE,YAAY;MACjBJ;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeS,aAAaA,CAAA,EAAG;EAC3B,OAAOZ,kBAAkB,CAAC;IACtBK,aAAa,EAAE,gBAAgB;IAC/BC,OAAO,EAAE;MACLC,GAAG,EAAE;IACT;EACJ,CAAC,CAAC;AACN;AAEA,SAASG,YAAY,EAAER,QAAQ,EAAEM,WAAW,EAAEG,UAAU,EAAEC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}