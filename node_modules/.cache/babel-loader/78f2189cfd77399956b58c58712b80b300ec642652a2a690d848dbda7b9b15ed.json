{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Native system dialogs for opening and saving files.\n *\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"dialog\": {\n *         \"all\": true, // enable all dialog APIs\n *         \"ask\": true, // enable dialog ask API\n *         \"confirm\": true, // enable dialog confirm API\n *         \"message\": true, // enable dialog message API\n *         \"open\": true, // enable file open API\n *         \"save\": true // enable file save API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 1.0.0\n */\nasync function open(options = {}) {\n  if (typeof options === 'object') {\n    Object.freeze(options);\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Dialog',\n    message: {\n      cmd: 'openDialog',\n      options\n    }\n  });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/api/dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 1.0.0\n */\nasync function save(options = {}) {\n  if (typeof options === 'object') {\n    Object.freeze(options);\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Dialog',\n    message: {\n      cmd: 'saveDialog',\n      options\n    }\n  });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/api/dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', type: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n *\n */\nasync function message(message, options) {\n  const opts = typeof options === 'string' ? {\n    title: options\n  } : options;\n  return invokeTauriCommand({\n    __tauriModule: 'Dialog',\n    message: {\n      cmd: 'messageDialog',\n      message: message.toString(),\n      title: opts?.title?.toString(),\n      type: opts?.type,\n      buttonLabel: opts?.okLabel?.toString()\n    }\n  });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/api/dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function ask(message, options) {\n  const opts = typeof options === 'string' ? {\n    title: options\n  } : options;\n  return invokeTauriCommand({\n    __tauriModule: 'Dialog',\n    message: {\n      cmd: 'askDialog',\n      message: message.toString(),\n      title: opts?.title?.toString(),\n      type: opts?.type,\n      buttonLabels: [opts?.okLabel?.toString() ?? 'Yes', opts?.cancelLabel?.toString() ?? 'No']\n    }\n  });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/api/dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function confirm(message, options) {\n  const opts = typeof options === 'string' ? {\n    title: options\n  } : options;\n  return invokeTauriCommand({\n    __tauriModule: 'Dialog',\n    message: {\n      cmd: 'confirmDialog',\n      message: message.toString(),\n      title: opts?.title?.toString(),\n      type: opts?.type,\n      buttonLabels: [opts?.okLabel?.toString() ?? 'Ok', opts?.cancelLabel?.toString() ?? 'Cancel']\n    }\n  });\n}\nexport { ask, confirm, message, open, save };","map":{"version":3,"names":["invokeTauriCommand","open","options","Object","freeze","__tauriModule","message","cmd","save","opts","title","toString","type","buttonLabel","okLabel","ask","buttonLabels","cancelLabel","confirm"],"sources":["/home/nikita/Проєкти/NUB_Project/NUB_IDE/node_modules/@tauri-apps/api/dialog.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Native system dialogs for opening and saving files.\n *\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"dialog\": {\n *         \"all\": true, // enable all dialog APIs\n *         \"ask\": true, // enable dialog ask API\n *         \"confirm\": true, // enable dialog confirm API\n *         \"message\": true, // enable dialog message API\n *         \"open\": true, // enable file open API\n *         \"save\": true // enable file save API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 1.0.0\n */\nasync function open(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'openDialog',\n            options\n        }\n    });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/api/dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 1.0.0\n */\nasync function save(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'saveDialog',\n            options\n        }\n    });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/api/dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', type: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n *\n */\nasync function message(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'messageDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabel: opts?.okLabel?.toString()\n        }\n    });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/api/dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function ask(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'askDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Yes',\n                opts?.cancelLabel?.toString() ?? 'No'\n            ]\n        }\n    });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/api/dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function confirm(message, options) {\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return invokeTauriCommand({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'confirmDialog',\n            message: message.toString(),\n            title: opts?.title?.toString(),\n            type: opts?.type,\n            buttonLabels: [\n                opts?.okLabel?.toString() ?? 'Ok',\n                opts?.cancelLabel?.toString() ?? 'Cancel'\n            ]\n        }\n    });\n}\n\nexport { ask, confirm, message, open, save };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,IAAIA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9B,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7BC,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;EAC1B;EACA,OAAOF,kBAAkB,CAAC;IACtBK,aAAa,EAAE,QAAQ;IACvBC,OAAO,EAAE;MACLC,GAAG,EAAE,YAAY;MACjBL;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeM,IAAIA,CAACN,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9B,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC7BC,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;EAC1B;EACA,OAAOF,kBAAkB,CAAC;IACtBK,aAAa,EAAE,QAAQ;IACvBC,OAAO,EAAE;MACLC,GAAG,EAAE,YAAY;MACjBL;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,OAAOA,CAACA,OAAO,EAAEJ,OAAO,EAAE;EACrC,MAAMO,IAAI,GAAG,OAAOP,OAAO,KAAK,QAAQ,GAAG;IAAEQ,KAAK,EAAER;EAAQ,CAAC,GAAGA,OAAO;EACvE,OAAOF,kBAAkB,CAAC;IACtBK,aAAa,EAAE,QAAQ;IACvBC,OAAO,EAAE;MACLC,GAAG,EAAE,eAAe;MACpBD,OAAO,EAAEA,OAAO,CAACK,QAAQ,CAAC,CAAC;MAC3BD,KAAK,EAAED,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAAC;MAC9BC,IAAI,EAAEH,IAAI,EAAEG,IAAI;MAChBC,WAAW,EAAEJ,IAAI,EAAEK,OAAO,EAAEH,QAAQ,CAAC;IACzC;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,GAAGA,CAACT,OAAO,EAAEJ,OAAO,EAAE;EACjC,MAAMO,IAAI,GAAG,OAAOP,OAAO,KAAK,QAAQ,GAAG;IAAEQ,KAAK,EAAER;EAAQ,CAAC,GAAGA,OAAO;EACvE,OAAOF,kBAAkB,CAAC;IACtBK,aAAa,EAAE,QAAQ;IACvBC,OAAO,EAAE;MACLC,GAAG,EAAE,WAAW;MAChBD,OAAO,EAAEA,OAAO,CAACK,QAAQ,CAAC,CAAC;MAC3BD,KAAK,EAAED,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAAC;MAC9BC,IAAI,EAAEH,IAAI,EAAEG,IAAI;MAChBI,YAAY,EAAE,CACVP,IAAI,EAAEK,OAAO,EAAEH,QAAQ,CAAC,CAAC,IAAI,KAAK,EAClCF,IAAI,EAAEQ,WAAW,EAAEN,QAAQ,CAAC,CAAC,IAAI,IAAI;IAE7C;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeO,OAAOA,CAACZ,OAAO,EAAEJ,OAAO,EAAE;EACrC,MAAMO,IAAI,GAAG,OAAOP,OAAO,KAAK,QAAQ,GAAG;IAAEQ,KAAK,EAAER;EAAQ,CAAC,GAAGA,OAAO;EACvE,OAAOF,kBAAkB,CAAC;IACtBK,aAAa,EAAE,QAAQ;IACvBC,OAAO,EAAE;MACLC,GAAG,EAAE,eAAe;MACpBD,OAAO,EAAEA,OAAO,CAACK,QAAQ,CAAC,CAAC;MAC3BD,KAAK,EAAED,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAAC;MAC9BC,IAAI,EAAEH,IAAI,EAAEG,IAAI;MAChBI,YAAY,EAAE,CACVP,IAAI,EAAEK,OAAO,EAAEH,QAAQ,CAAC,CAAC,IAAI,IAAI,EACjCF,IAAI,EAAEQ,WAAW,EAAEN,QAAQ,CAAC,CAAC,IAAI,QAAQ;IAEjD;EACJ,CAAC,CAAC;AACN;AAEA,SAASI,GAAG,EAAEG,OAAO,EAAEZ,OAAO,EAAEL,IAAI,EAAEO,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}