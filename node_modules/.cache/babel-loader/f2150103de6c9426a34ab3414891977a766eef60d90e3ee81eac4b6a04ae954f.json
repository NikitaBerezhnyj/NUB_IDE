{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/NUB_Project/nub-ide/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { invoke } from '@tauri-apps/api/tauri';\nimport { save, open } from '@tauri-apps/api/dialog';\nimport { readTextFile } from '@tauri-apps/api/fs';\nimport TopBarMenu from './Components/Top_Bar_Menu_Component/Top_Bar_Menu';\nimport StartScreen from './Components/Start_Screen_Component/StartScreen';\nimport CodeEditor from './Components/Code_Editor_Component/Code_Editor';\nimport Help from './Components/Help_Component/Help';\nimport Terminal from './Components/Terminal_component/Terminal';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [terminalVisible, setTerminalVisible] = useState(false);\n  const [helpVisible, setHelpVisible] = useState(false);\n  const [startVisible, setStartVisible] = useState(true);\n  const [filePath, setFilePath] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [programmingLanguage, setProgrammingLanguage] = useState('');\n\n  // Функція для визначення мови програмування за шляхом файлу\n  const getProgrammingLanguage = filePath => {\n    const extension = filePath.split('.').pop();\n    switch (extension) {\n      case 'nl':\n        return 'NikLang';\n      case 'udav':\n        return 'Udav';\n      case 'based':\n        return 'Based';\n      default:\n        return 'Other';\n    }\n  };\n\n  // Функція для зміни стану відображення терміналу\n  const toggleTerminal = () => {\n    setTerminalVisible(!terminalVisible);\n  };\n\n  // Функція для зміни стану відображення довідки\n  const toggleHelp = () => {\n    setHelpVisible(!helpVisible);\n  };\n\n  // Прив'язка відкриття та закриття терміналу на Ctrl + `\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.ctrlKey && event.key === '`') {\n        event.preventDefault();\n        toggleTerminal();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [toggleTerminal]);\n\n  // Функція для збереження вмісту файлу\n  const saveFileContents = async (fileContent, savePath = filePath) => {};\n\n  // Функція для створення нового\n  const newFileContents = async (savePath = filePath) => {};\n\n  // Функція відкриття файлу\n  // const openFileContent = async () => {\n  //     try\n  //     {\n  //         const selectedPath = await open({\n  //             multiple: false,\n  //             title: \"Open file\",\n  //             filters: [\n  //                 { name: 'Text File', extensions: ['**']},\n  //                 { name: 'Niklang.nl', extensions: ['nl']},\n  //                 { name: 'Based.based', extensions: ['based']},\n  //                 { name: 'Udav.udav', extensions: ['udav']},\n  //             ]\n  //         });\n  //         if(!selectedPath) return;\n  //         console.log(selectedPath);\n  //         const fileContent = await readTextFile(selectedPath);\n  //         console.log(fileContent);\n  //         const textarea = document.getElementById('textarea');\n  //         if(textarea.value != '')\n  //         {\n  //             textarea.value = '';\n  //         }\n  //         textarea.value = fileContent;\n  //         setFilePath(selectedPath);\n  //         const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n  //         setProgrammingLanguage(language); // Встановлення мови програмування\n  //         // Оновити lineNumber\n  //         if (selectedPath) {\n  //             setStartVisible(false);\n  //         } else {\n  //             setStartVisible(true);\n  //         }\n  //     } catch(err)\n  //     {\n  //         console.error(err);\n  //     }\n  // }\n  // const openFileContent = async () => {\n  //     try {\n  //         const selectedPath = await open({\n  //             multiple: false,\n  //             title: \"Open file\",\n  //             filters: [\n  //                 { name: 'Text File', extensions: ['**']},\n  //                 { name: 'Niklang.nl', extensions: ['nl']},\n  //                 { name: 'Based.based', extensions: ['based']},\n  //                 { name: 'Udav.udav', extensions: ['udav']},\n  //             ]\n  //         });\n  //         if (!selectedPath) return;\n  //         const fileContent = await readTextFile(selectedPath);\n  //         setFilePath(selectedPath);\n  //         const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n  //         setProgrammingLanguage(language); // Встановлення мови програмування\n  //         const textarea = document.getElementById('textarea');\n  //         textarea.value = fileContent; // Встановлення значення textarea\n  //         // Оновити lineNumber\n  //         if (selectedPath) {\n  //             setStartVisible(false);\n  //         } else {\n  //             setStartVisible(true);\n  //         }\n  //     } catch (err) {\n  //         console.error(err);\n  //     }\n  // }\n  const openFileContent = async () => {\n    try {\n      setStartVisible(false);\n      const selectedPath = await open({\n        multiple: false,\n        title: \"Open file\",\n        filters: [{\n          name: \"Text File\",\n          extensions: [\"**\"]\n        }, {\n          name: \"Niklang.nl\",\n          extensions: [\"nl\"]\n        }, {\n          name: \"Based.based\",\n          extensions: [\"based\"]\n        }, {\n          name: \"Udav.udav\",\n          extensions: [\"udav\"]\n        }]\n      });\n      if (!selectedPath) {\n        setStartVisible(true);\n        return;\n      }\n\n      // Disable the button while reading the file\n      setIsLoading(true);\n      const fileContent = await readTextFile(selectedPath);\n      const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n      setProgrammingLanguage(language); // Встановлення мови програмування\n      const textarea = document.getElementById(\"textarea\");\n      textarea.value = fileContent; // Встановлення значення textarea\n\n      // Enable the button after the file is read\n      setIsLoading(false);\n      setFilePath(selectedPath);\n    } catch (err) {\n      console.error(err);\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TopBarMenu, {\n      toggleTerminal: toggleTerminal,\n      toggleHelp: toggleHelp,\n      onSave: saveFileContents,\n      onOpen: openFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n      programming_language: programmingLanguage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), startVisible && /*#__PURE__*/_jsxDEV(StartScreen, {\n      onNew: newFileContents,\n      onOpen: openFileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 30\n    }, this), terminalVisible && /*#__PURE__*/_jsxDEV(Terminal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }, this), helpVisible && /*#__PURE__*/_jsxDEV(Help, {\n      onClose: toggleHelp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"/bOOkaKnaJFG887I9izIxpEds7w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","invoke","save","open","readTextFile","TopBarMenu","StartScreen","CodeEditor","Help","Terminal","jsxDEV","_jsxDEV","App","_s","terminalVisible","setTerminalVisible","helpVisible","setHelpVisible","startVisible","setStartVisible","filePath","setFilePath","isLoading","setIsLoading","programmingLanguage","setProgrammingLanguage","getProgrammingLanguage","extension","split","pop","toggleTerminal","toggleHelp","handleKeyDown","event","ctrlKey","key","preventDefault","window","addEventListener","removeEventListener","saveFileContents","fileContent","savePath","newFileContents","openFileContent","selectedPath","multiple","title","filters","name","extensions","language","textarea","document","getElementById","value","err","console","error","className","children","onSave","onOpen","fileName","_jsxFileName","lineNumber","columnNumber","programming_language","onNew","onClose","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { invoke } from '@tauri-apps/api/tauri';\nimport { save, open } from '@tauri-apps/api/dialog';\nimport { readTextFile } from '@tauri-apps/api/fs';\nimport TopBarMenu from './Components/Top_Bar_Menu_Component/Top_Bar_Menu';\nimport StartScreen from './Components/Start_Screen_Component/StartScreen';\nimport CodeEditor from './Components/Code_Editor_Component/Code_Editor';\nimport Help from './Components/Help_Component/Help';\nimport Terminal from './Components/Terminal_component/Terminal';\nimport './App.css';\n\nfunction App() {\n    const [terminalVisible, setTerminalVisible] = useState(false);\n    const [helpVisible, setHelpVisible] = useState(false);\n    const [startVisible, setStartVisible] = useState(true);\n    const [filePath, setFilePath] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [programmingLanguage, setProgrammingLanguage] = useState('');\n\n    // Функція для визначення мови програмування за шляхом файлу\n    const getProgrammingLanguage = (filePath) => {\n        const extension = filePath.split('.').pop();\n        switch (extension) {\n            case 'nl':\n                return 'NikLang';\n            case 'udav':\n                return 'Udav';\n            case 'based':\n                return 'Based';\n            default:\n                return 'Other';\n        }\n    };\n\n    // Функція для зміни стану відображення терміналу\n    const toggleTerminal = () => {\n        setTerminalVisible(!terminalVisible);\n    };\n\n    // Функція для зміни стану відображення довідки\n    const toggleHelp = () => {\n        setHelpVisible(!helpVisible);\n    };\n\n    // Прив'язка відкриття та закриття терміналу на Ctrl + `\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.ctrlKey && event.key === '`') {\n                event.preventDefault();\n                toggleTerminal();\n            }\n        };\n        window.addEventListener('keydown', handleKeyDown);\n        return () => { window.removeEventListener('keydown', handleKeyDown); };\n    }, [toggleTerminal]);\n\n    // Функція для збереження вмісту файлу\n    const saveFileContents = async (fileContent, savePath = filePath) => {};\n\n    // Функція для створення нового\n    const newFileContents = async (savePath = filePath) => {};\n\n    // Функція відкриття файлу\n    // const openFileContent = async () => {\n    //     try\n    //     {\n    //         const selectedPath = await open({\n    //             multiple: false,\n    //             title: \"Open file\",\n    //             filters: [\n    //                 { name: 'Text File', extensions: ['**']},\n    //                 { name: 'Niklang.nl', extensions: ['nl']},\n    //                 { name: 'Based.based', extensions: ['based']},\n    //                 { name: 'Udav.udav', extensions: ['udav']},\n    //             ]\n    //         });\n    //         if(!selectedPath) return;\n    //         console.log(selectedPath);\n    //         const fileContent = await readTextFile(selectedPath);\n    //         console.log(fileContent);\n    //         const textarea = document.getElementById('textarea');\n    //         if(textarea.value != '')\n    //         {\n    //             textarea.value = '';\n    //         }\n    //         textarea.value = fileContent;\n    //         setFilePath(selectedPath);\n    //         const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n    //         setProgrammingLanguage(language); // Встановлення мови програмування\n    //         // Оновити lineNumber\n    //         if (selectedPath) {\n    //             setStartVisible(false);\n    //         } else {\n    //             setStartVisible(true);\n    //         }\n    //     } catch(err)\n    //     {\n    //         console.error(err);\n    //     }\n    // }\n    // const openFileContent = async () => {\n    //     try {\n    //         const selectedPath = await open({\n    //             multiple: false,\n    //             title: \"Open file\",\n    //             filters: [\n    //                 { name: 'Text File', extensions: ['**']},\n    //                 { name: 'Niklang.nl', extensions: ['nl']},\n    //                 { name: 'Based.based', extensions: ['based']},\n    //                 { name: 'Udav.udav', extensions: ['udav']},\n    //             ]\n    //         });\n    //         if (!selectedPath) return;\n    //         const fileContent = await readTextFile(selectedPath);\n    //         setFilePath(selectedPath);\n    //         const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n    //         setProgrammingLanguage(language); // Встановлення мови програмування\n    //         const textarea = document.getElementById('textarea');\n    //         textarea.value = fileContent; // Встановлення значення textarea\n    //         // Оновити lineNumber\n    //         if (selectedPath) {\n    //             setStartVisible(false);\n    //         } else {\n    //             setStartVisible(true);\n    //         }\n    //     } catch (err) {\n    //         console.error(err);\n    //     }\n    // }\n    const openFileContent = async () => {\n        try {\n          setStartVisible(false);\n          const selectedPath = await open({\n            multiple: false,\n            title: \"Open file\",\n            filters: [\n              { name: \"Text File\", extensions: [\"**\"] },\n              { name: \"Niklang.nl\", extensions: [\"nl\"] },\n              { name: \"Based.based\", extensions: [\"based\"] },\n              { name: \"Udav.udav\", extensions: [\"udav\"] },\n            ],\n          });\n          if (!selectedPath) {\n            setStartVisible(true);\n            return;\n          }\n      \n          // Disable the button while reading the file\n          setIsLoading(true);\n      \n          const fileContent = await readTextFile(selectedPath);\n          const language = getProgrammingLanguage(selectedPath); // Визначення мови програмування\n          setProgrammingLanguage(language); // Встановлення мови програмування\n          const textarea = document.getElementById(\"textarea\");\n          textarea.value = fileContent; // Встановлення значення textarea\n      \n          // Enable the button after the file is read\n          setIsLoading(false);\n      \n          setFilePath(selectedPath);\n        } catch (err) {\n          console.error(err);\n          setIsLoading(false);\n        }\n      };\n        \n\n    return (\n        <div className=\"App\">\n            <TopBarMenu toggleTerminal={toggleTerminal} toggleHelp={toggleHelp} onSave={saveFileContents} onOpen={openFileContent} />\n            <CodeEditor programming_language={programmingLanguage} />\n            {startVisible && <StartScreen onNew={newFileContents} onOpen={openFileContent} />}\n            {terminalVisible && <Terminal />}\n            {helpVisible && <Help onClose={toggleHelp} />}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}