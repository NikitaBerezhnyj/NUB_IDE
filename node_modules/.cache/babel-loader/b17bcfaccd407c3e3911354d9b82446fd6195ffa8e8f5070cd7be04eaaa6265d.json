{"ast":null,"code":"import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the system shell.\n * Allows you to spawn child processes and manage files and URLs using their default application.\n *\n * This package is also accessible with `window.__TAURI__.shell` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.shell`](https://tauri.app/v1/api/config/#allowlistconfig.shell) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"shell\": {\n *         \"all\": true, // enable all shell APIs\n *         \"execute\": true, // enable process spawn APIs\n *         \"sidecar\": true, // enable spawning sidecars\n *         \"open\": true // enable opening files/URLs using the default program\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the allowlist, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * ### Restricting access to the {@link Command | `Command`} APIs\n *\n * The `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\n *\n * - `name`: the unique identifier of the command, passed to the {@link Command.constructor | Command constructor}.\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\n * - `sidecar`: whether the object configures a sidecar or a system program.\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n *   - `true` means that any argument list is allowed.\n *   - `false` means that no arguments are allowed.\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n *     or a `{ validator: string }` that defines a regex validating the argument value.\n *\n * #### Example scope configuration\n *\n * CLI: `git commit -m \"the commit message\"`\n *\n * Configuration:\n * ```json\n * {\n *   \"scope\": [\n *     {\n *       \"name\": \"run-git-commit\",\n *       \"cmd\": \"git\",\n *       \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n *     }\n *   ]\n * }\n * ```\n * Usage:\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell'\n * new Command('run-git-commit', ['commit', '-m', 'the commit message'])\n * ```\n *\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * Spawns a process.\n *\n * @ignore\n * @param program The name of the scoped command.\n * @param onEvent Event handler.\n * @param args Program arguments.\n * @param options Configuration for the process spawn.\n * @returns A promise resolving to the process id.\n */\nasync function execute(onEvent, program, args = [], options) {\n  if (typeof args === 'object') {\n    Object.freeze(args);\n  }\n  return invokeTauriCommand({\n    __tauriModule: 'Shell',\n    message: {\n      cmd: 'execute',\n      program,\n      args,\n      options,\n      onEventFn: transformCallback(onEvent)\n    }\n  });\n}\n/**\n * @since 1.0.0\n */\nclass EventEmitter {\n  constructor() {\n    /** @ignore */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.eventListeners = Object.create(null);\n  }\n  /**\n   * Alias for `emitter.on(eventName, listener)`.\n   *\n   * @since 1.1.0\n   */\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  }\n  /**\n   * Alias for `emitter.off(eventName, listener)`.\n   *\n   * @since 1.1.0\n   */\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n  /**\n   * Adds the `listener` function to the end of the listeners array for the\n   * event named `eventName`. No checks are made to see if the `listener` has\n   * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n   * times.\n   *\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.0.0\n   */\n  on(eventName, listener) {\n    if (eventName in this.eventListeners) {\n      // eslint-disable-next-line security/detect-object-injection\n      this.eventListeners[eventName].push(listener);\n    } else {\n      // eslint-disable-next-line security/detect-object-injection\n      this.eventListeners[eventName] = [listener];\n    }\n    return this;\n  }\n  /**\n   * Adds a **one-time**`listener` function for the event named `eventName`. The\n   * next time `eventName` is triggered, this listener is removed and then invoked.\n   *\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.1.0\n   */\n  once(eventName, listener) {\n    const wrapper = (...args) => {\n      this.removeListener(eventName, wrapper);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n    };\n    return this.addListener(eventName, wrapper);\n  }\n  /**\n   * Removes the all specified listener from the listener array for the event eventName\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.1.0\n   */\n  off(eventName, listener) {\n    if (eventName in this.eventListeners) {\n      // eslint-disable-next-line security/detect-object-injection\n      this.eventListeners[eventName] = this.eventListeners[eventName].filter(l => l !== listener);\n    }\n    return this;\n  }\n  /**\n   * Removes all listeners, or those of the specified eventName.\n   *\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.1.0\n   */\n  removeAllListeners(event) {\n    if (event) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete,security/detect-object-injection\n      delete this.eventListeners[event];\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      this.eventListeners = Object.create(null);\n    }\n    return this;\n  }\n  /**\n   * @ignore\n   * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n   * to each.\n   *\n   * @returns `true` if the event had listeners, `false` otherwise.\n   */\n  emit(eventName, ...args) {\n    if (eventName in this.eventListeners) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,security/detect-object-injection\n      const listeners = this.eventListeners[eventName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      for (const listener of listeners) listener(...args);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Returns the number of listeners listening to the event named `eventName`.\n   *\n   * @since 1.1.0\n   */\n  listenerCount(eventName) {\n    if (eventName in this.eventListeners)\n      // eslint-disable-next-line security/detect-object-injection\n      return this.eventListeners[eventName].length;\n    return 0;\n  }\n  /**\n   * Adds the `listener` function to the _beginning_ of the listeners array for the\n   * event named `eventName`. No checks are made to see if the `listener` has\n   * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n   * times.\n   *\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.1.0\n   */\n  prependListener(eventName, listener) {\n    if (eventName in this.eventListeners) {\n      // eslint-disable-next-line security/detect-object-injection\n      this.eventListeners[eventName].unshift(listener);\n    } else {\n      // eslint-disable-next-line security/detect-object-injection\n      this.eventListeners[eventName] = [listener];\n    }\n    return this;\n  }\n  /**\n   * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n   * listener is removed, and then invoked.\n   *\n   * Returns a reference to the `EventEmitter`, so that calls can be chained.\n   *\n   * @since 1.1.0\n   */\n  prependOnceListener(eventName, listener) {\n    const wrapper = (...args) => {\n      this.removeListener(eventName, wrapper);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n    };\n    return this.prependListener(eventName, wrapper);\n  }\n}\n/**\n * @since 1.1.0\n */\nclass Child {\n  constructor(pid) {\n    this.pid = pid;\n  }\n  /**\n   * Writes `data` to the `stdin`.\n   *\n   * @param data The message to write, either a string or a byte array.\n   * @example\n   * ```typescript\n   * import { Command } from '@tauri-apps/api/shell';\n   * const command = new Command('node');\n   * const child = await command.spawn();\n   * await child.write('message');\n   * await child.write([0, 1, 2, 3, 4, 5]);\n   * ```\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async write(data) {\n    return invokeTauriCommand({\n      __tauriModule: 'Shell',\n      message: {\n        cmd: 'stdinWrite',\n        pid: this.pid,\n        // correctly serialize Uint8Arrays\n        buffer: typeof data === 'string' ? data : Array.from(data)\n      }\n    });\n  }\n  /**\n   * Kills the child process.\n   *\n   * @returns A promise indicating the success or failure of the operation.\n   */\n  async kill() {\n    return invokeTauriCommand({\n      __tauriModule: 'Shell',\n      message: {\n        cmd: 'killChild',\n        pid: this.pid\n      }\n    });\n  }\n}\n/**\n * The entry point for spawning child processes.\n * It emits the `close` and `error` events.\n * @example\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell';\n * const command = new Command('node');\n * command.on('close', data => {\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n * });\n * command.on('error', error => console.error(`command error: \"${error}\"`));\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\n *\n * const child = await command.spawn();\n * console.log('pid:', child.pid);\n * ```\n *\n * @since 1.1.0\n *\n */\nclass Command extends EventEmitter {\n  /**\n   * Creates a new `Command` instance.\n   *\n   * @param program The program name to execute.\n   * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n   * @param args Program arguments.\n   * @param options Spawn options.\n   */\n  constructor(program, args = [], options) {\n    super();\n    /** Event emitter for the `stdout`. Emits the `data` event. */\n    this.stdout = new EventEmitter();\n    /** Event emitter for the `stderr`. Emits the `data` event. */\n    this.stderr = new EventEmitter();\n    this.program = program;\n    this.args = typeof args === 'string' ? [args] : args;\n    this.options = options ?? {};\n  }\n  /**\n   * Creates a command to execute the given sidecar program.\n   * @example\n   * ```typescript\n   * import { Command } from '@tauri-apps/api/shell';\n   * const command = Command.sidecar('my-sidecar');\n   * const output = await command.execute();\n   * ```\n   *\n   * @param program The program to execute.\n   * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n   */\n  static sidecar(program, args = [], options) {\n    const instance = new Command(program, args, options);\n    instance.options.sidecar = true;\n    return instance;\n  }\n  /**\n   * Executes the command as a child process, returning a handle to it.\n   *\n   * @returns A promise resolving to the child process handle.\n   */\n  async spawn() {\n    return execute(event => {\n      switch (event.event) {\n        case 'Error':\n          this.emit('error', event.payload);\n          break;\n        case 'Terminated':\n          this.emit('close', event.payload);\n          break;\n        case 'Stdout':\n          this.stdout.emit('data', event.payload);\n          break;\n        case 'Stderr':\n          this.stderr.emit('data', event.payload);\n          break;\n      }\n    }, this.program, this.args, this.options).then(pid => new Child(pid));\n  }\n  /**\n   * Executes the command as a child process, waiting for it to finish and collecting all of its output.\n   * @example\n   * ```typescript\n   * import { Command } from '@tauri-apps/api/shell';\n   * const output = await new Command('echo', 'message').execute();\n   * assert(output.code === 0);\n   * assert(output.signal === null);\n   * assert(output.stdout === 'message');\n   * assert(output.stderr === '');\n   * ```\n   *\n   * @returns A promise resolving to the child process output.\n   */\n  async execute() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject);\n      const stdout = [];\n      const stderr = [];\n      this.stdout.on('data', line => {\n        stdout.push(line);\n      });\n      this.stderr.on('data', line => {\n        stderr.push(line);\n      });\n      this.on('close', payload => {\n        resolve({\n          code: payload.code,\n          signal: payload.signal,\n          stdout: stdout.join('\\n'),\n          stderr: stderr.join('\\n')\n        });\n      });\n      this.spawn().catch(reject);\n    });\n  }\n}\n/**\n * Opens a path or URL with the system's default app,\n * or the one specified with `openWith`.\n *\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/shell';\n * // opens the given URL on the default browser:\n * await open('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\n * // opens a file using the default program:\n * await open('/path/to/file');\n * ```\n *\n * @param path The path or URL to open.\n * This value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\n * @param openWith The app to open the file or URL with.\n * Defaults to the system default application for the specified path type.\n *\n * @since 1.0.0\n */\nasync function open(path, openWith) {\n  return invokeTauriCommand({\n    __tauriModule: 'Shell',\n    message: {\n      cmd: 'open',\n      path,\n      with: openWith\n    }\n  });\n}\nexport { Child, Command, EventEmitter, open };","map":{"version":3,"names":["invokeTauriCommand","transformCallback","execute","onEvent","program","args","options","Object","freeze","__tauriModule","message","cmd","onEventFn","EventEmitter","constructor","eventListeners","create","addListener","eventName","listener","on","removeListener","off","push","once","wrapper","filter","l","removeAllListeners","event","emit","listeners","listenerCount","length","prependListener","unshift","prependOnceListener","Child","pid","write","data","buffer","Array","from","kill","Command","stdout","stderr","sidecar","instance","spawn","payload","then","Promise","resolve","reject","line","code","signal","join","catch","open","path","openWith","with"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/node_modules/@tauri-apps/api/shell.js"],"sourcesContent":["import { invokeTauriCommand } from './helpers/tauri.js';\nimport { transformCallback } from './tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the system shell.\n * Allows you to spawn child processes and manage files and URLs using their default application.\n *\n * This package is also accessible with `window.__TAURI__.shell` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.shell`](https://tauri.app/v1/api/config/#allowlistconfig.shell) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"shell\": {\n *         \"all\": true, // enable all shell APIs\n *         \"execute\": true, // enable process spawn APIs\n *         \"sidecar\": true, // enable spawning sidecars\n *         \"open\": true // enable opening files/URLs using the default program\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the programs and arguments that can be used.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the allowlist, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * ### Restricting access to the {@link Command | `Command`} APIs\n *\n * The `shell` allowlist object has a `scope` field that defines an array of CLIs that can be used.\n * Each CLI is a configuration object `{ name: string, cmd: string, sidecar?: bool, args?: boolean | Arg[] }`.\n *\n * - `name`: the unique identifier of the command, passed to the {@link Command.constructor | Command constructor}.\n * If it's a sidecar, this must be the value defined on `tauri.conf.json > tauri > bundle > externalBin`.\n * - `cmd`: the program that is executed on this configuration. If it's a sidecar, this value is ignored.\n * - `sidecar`: whether the object configures a sidecar or a system program.\n * - `args`: the arguments that can be passed to the program. By default no arguments are allowed.\n *   - `true` means that any argument list is allowed.\n *   - `false` means that no arguments are allowed.\n *   - otherwise an array can be configured. Each item is either a string representing the fixed argument value\n *     or a `{ validator: string }` that defines a regex validating the argument value.\n *\n * #### Example scope configuration\n *\n * CLI: `git commit -m \"the commit message\"`\n *\n * Configuration:\n * ```json\n * {\n *   \"scope\": [\n *     {\n *       \"name\": \"run-git-commit\",\n *       \"cmd\": \"git\",\n *       \"args\": [\"commit\", \"-m\", { \"validator\": \"\\\\S+\" }]\n *     }\n *   ]\n * }\n * ```\n * Usage:\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell'\n * new Command('run-git-commit', ['commit', '-m', 'the commit message'])\n * ```\n *\n * Trying to execute any API with a program not configured on the scope results in a promise rejection due to denied access.\n *\n * @module\n */\n/**\n * Spawns a process.\n *\n * @ignore\n * @param program The name of the scoped command.\n * @param onEvent Event handler.\n * @param args Program arguments.\n * @param options Configuration for the process spawn.\n * @returns A promise resolving to the process id.\n */\nasync function execute(onEvent, program, args = [], options) {\n    if (typeof args === 'object') {\n        Object.freeze(args);\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Shell',\n        message: {\n            cmd: 'execute',\n            program,\n            args,\n            options,\n            onEventFn: transformCallback(onEvent)\n        }\n    });\n}\n/**\n * @since 1.0.0\n */\nclass EventEmitter {\n    constructor() {\n        /** @ignore */\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.eventListeners = Object.create(null);\n    }\n    /**\n     * Alias for `emitter.on(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    /**\n     * Alias for `emitter.off(eventName, listener)`.\n     *\n     * @since 1.1.0\n     */\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    /**\n     * Adds the `listener` function to the end of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.0.0\n     */\n    on(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].push(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName`. The\n     * next time `eventName` is triggered, this listener is removed and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    once(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.addListener(eventName, wrapper);\n    }\n    /**\n     * Removes the all specified listener from the listener array for the event eventName\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    off(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = this.eventListeners[eventName].filter((l) => l !== listener);\n        }\n        return this;\n    }\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    removeAllListeners(event) {\n        if (event) {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete,security/detect-object-injection\n            delete this.eventListeners[event];\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.eventListeners = Object.create(null);\n        }\n        return this;\n    }\n    /**\n     * @ignore\n     * Synchronously calls each of the listeners registered for the event named`eventName`, in the order they were registered, passing the supplied arguments\n     * to each.\n     *\n     * @returns `true` if the event had listeners, `false` otherwise.\n     */\n    emit(eventName, ...args) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,security/detect-object-injection\n            const listeners = this.eventListeners[eventName];\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            for (const listener of listeners)\n                listener(...args);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Returns the number of listeners listening to the event named `eventName`.\n     *\n     * @since 1.1.0\n     */\n    listenerCount(eventName) {\n        if (eventName in this.eventListeners)\n            // eslint-disable-next-line security/detect-object-injection\n            return this.eventListeners[eventName].length;\n        return 0;\n    }\n    /**\n     * Adds the `listener` function to the _beginning_ of the listeners array for the\n     * event named `eventName`. No checks are made to see if the `listener` has\n     * already been added. Multiple calls passing the same combination of `eventName`and `listener` will result in the `listener` being added, and called, multiple\n     * times.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependListener(eventName, listener) {\n        if (eventName in this.eventListeners) {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName].unshift(listener);\n        }\n        else {\n            // eslint-disable-next-line security/detect-object-injection\n            this.eventListeners[eventName] = [listener];\n        }\n        return this;\n    }\n    /**\n     * Adds a **one-time**`listener` function for the event named `eventName` to the_beginning_ of the listeners array. The next time `eventName` is triggered, this\n     * listener is removed, and then invoked.\n     *\n     * Returns a reference to the `EventEmitter`, so that calls can be chained.\n     *\n     * @since 1.1.0\n     */\n    prependOnceListener(eventName, listener) {\n        const wrapper = (...args) => {\n            this.removeListener(eventName, wrapper);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            listener(...args);\n        };\n        return this.prependListener(eventName, wrapper);\n    }\n}\n/**\n * @since 1.1.0\n */\nclass Child {\n    constructor(pid) {\n        this.pid = pid;\n    }\n    /**\n     * Writes `data` to the `stdin`.\n     *\n     * @param data The message to write, either a string or a byte array.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = new Command('node');\n     * const child = await command.spawn();\n     * await child.write('message');\n     * await child.write([0, 1, 2, 3, 4, 5]);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async write(data) {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'stdinWrite',\n                pid: this.pid,\n                // correctly serialize Uint8Arrays\n                buffer: typeof data === 'string' ? data : Array.from(data)\n            }\n        });\n    }\n    /**\n     * Kills the child process.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async kill() {\n        return invokeTauriCommand({\n            __tauriModule: 'Shell',\n            message: {\n                cmd: 'killChild',\n                pid: this.pid\n            }\n        });\n    }\n}\n/**\n * The entry point for spawning child processes.\n * It emits the `close` and `error` events.\n * @example\n * ```typescript\n * import { Command } from '@tauri-apps/api/shell';\n * const command = new Command('node');\n * command.on('close', data => {\n *   console.log(`command finished with code ${data.code} and signal ${data.signal}`)\n * });\n * command.on('error', error => console.error(`command error: \"${error}\"`));\n * command.stdout.on('data', line => console.log(`command stdout: \"${line}\"`));\n * command.stderr.on('data', line => console.log(`command stderr: \"${line}\"`));\n *\n * const child = await command.spawn();\n * console.log('pid:', child.pid);\n * ```\n *\n * @since 1.1.0\n *\n */\nclass Command extends EventEmitter {\n    /**\n     * Creates a new `Command` instance.\n     *\n     * @param program The program name to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     * @param args Program arguments.\n     * @param options Spawn options.\n     */\n    constructor(program, args = [], options) {\n        super();\n        /** Event emitter for the `stdout`. Emits the `data` event. */\n        this.stdout = new EventEmitter();\n        /** Event emitter for the `stderr`. Emits the `data` event. */\n        this.stderr = new EventEmitter();\n        this.program = program;\n        this.args = typeof args === 'string' ? [args] : args;\n        this.options = options ?? {};\n    }\n    /**\n     * Creates a command to execute the given sidecar program.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const command = Command.sidecar('my-sidecar');\n     * const output = await command.execute();\n     * ```\n     *\n     * @param program The program to execute.\n     * It must be configured on `tauri.conf.json > tauri > allowlist > shell > scope`.\n     */\n    static sidecar(program, args = [], options) {\n        const instance = new Command(program, args, options);\n        instance.options.sidecar = true;\n        return instance;\n    }\n    /**\n     * Executes the command as a child process, returning a handle to it.\n     *\n     * @returns A promise resolving to the child process handle.\n     */\n    async spawn() {\n        return execute((event) => {\n            switch (event.event) {\n                case 'Error':\n                    this.emit('error', event.payload);\n                    break;\n                case 'Terminated':\n                    this.emit('close', event.payload);\n                    break;\n                case 'Stdout':\n                    this.stdout.emit('data', event.payload);\n                    break;\n                case 'Stderr':\n                    this.stderr.emit('data', event.payload);\n                    break;\n            }\n        }, this.program, this.args, this.options).then((pid) => new Child(pid));\n    }\n    /**\n     * Executes the command as a child process, waiting for it to finish and collecting all of its output.\n     * @example\n     * ```typescript\n     * import { Command } from '@tauri-apps/api/shell';\n     * const output = await new Command('echo', 'message').execute();\n     * assert(output.code === 0);\n     * assert(output.signal === null);\n     * assert(output.stdout === 'message');\n     * assert(output.stderr === '');\n     * ```\n     *\n     * @returns A promise resolving to the child process output.\n     */\n    async execute() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject);\n            const stdout = [];\n            const stderr = [];\n            this.stdout.on('data', (line) => {\n                stdout.push(line);\n            });\n            this.stderr.on('data', (line) => {\n                stderr.push(line);\n            });\n            this.on('close', (payload) => {\n                resolve({\n                    code: payload.code,\n                    signal: payload.signal,\n                    stdout: stdout.join('\\n'),\n                    stderr: stderr.join('\\n')\n                });\n            });\n            this.spawn().catch(reject);\n        });\n    }\n}\n/**\n * Opens a path or URL with the system's default app,\n * or the one specified with `openWith`.\n *\n * The `openWith` value must be one of `firefox`, `google chrome`, `chromium` `safari`,\n * `open`, `start`, `xdg-open`, `gio`, `gnome-open`, `kde-open` or `wslview`.\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/shell';\n * // opens the given URL on the default browser:\n * await open('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await open('https://github.com/tauri-apps/tauri', 'firefox');\n * // opens a file using the default program:\n * await open('/path/to/file');\n * ```\n *\n * @param path The path or URL to open.\n * This value is matched against the string regex defined on `tauri.conf.json > tauri > allowlist > shell > open`,\n * which defaults to `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+`.\n * @param openWith The app to open the file or URL with.\n * Defaults to the system default application for the specified path type.\n *\n * @since 1.0.0\n */\nasync function open(path, openWith) {\n    return invokeTauriCommand({\n        __tauriModule: 'Shell',\n        message: {\n            cmd: 'open',\n            path,\n            with: openWith\n        }\n    });\n}\n\nexport { Child, Command, EventEmitter, open };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,oBAAoB;AACvD,SAASC,iBAAiB,QAAQ,YAAY;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,OAAOA,CAACC,OAAO,EAAEC,OAAO,EAAEC,IAAI,GAAG,EAAE,EAAEC,OAAO,EAAE;EACzD,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC1BE,MAAM,CAACC,MAAM,CAACH,IAAI,CAAC;EACvB;EACA,OAAOL,kBAAkB,CAAC;IACtBS,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE;MACLC,GAAG,EAAE,SAAS;MACdP,OAAO;MACPC,IAAI;MACJC,OAAO;MACPM,SAAS,EAAEX,iBAAiB,CAACE,OAAO;IACxC;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA,MAAMU,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAI,CAACC,cAAc,GAAGR,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAACC,SAAS,EAAEC,QAAQ,EAAE;IAC7B,OAAO,IAAI,CAACC,EAAE,CAACF,SAAS,EAAEC,QAAQ,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;EACIE,cAAcA,CAACH,SAAS,EAAEC,QAAQ,EAAE;IAChC,OAAO,IAAI,CAACG,GAAG,CAACJ,SAAS,EAAEC,QAAQ,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,EAAEA,CAACF,SAAS,EAAEC,QAAQ,EAAE;IACpB,IAAID,SAAS,IAAI,IAAI,CAACH,cAAc,EAAE;MAClC;MACA,IAAI,CAACA,cAAc,CAACG,SAAS,CAAC,CAACK,IAAI,CAACJ,QAAQ,CAAC;IACjD,CAAC,MACI;MACD;MACA,IAAI,CAACJ,cAAc,CAACG,SAAS,CAAC,GAAG,CAACC,QAAQ,CAAC;IAC/C;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,IAAIA,CAACN,SAAS,EAAEC,QAAQ,EAAE;IACtB,MAAMM,OAAO,GAAGA,CAAC,GAAGpB,IAAI,KAAK;MACzB,IAAI,CAACgB,cAAc,CAACH,SAAS,EAAEO,OAAO,CAAC;MACvC;MACAN,QAAQ,CAAC,GAAGd,IAAI,CAAC;IACrB,CAAC;IACD,OAAO,IAAI,CAACY,WAAW,CAACC,SAAS,EAAEO,OAAO,CAAC;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIH,GAAGA,CAACJ,SAAS,EAAEC,QAAQ,EAAE;IACrB,IAAID,SAAS,IAAI,IAAI,CAACH,cAAc,EAAE;MAClC;MACA,IAAI,CAACA,cAAc,CAACG,SAAS,CAAC,GAAG,IAAI,CAACH,cAAc,CAACG,SAAS,CAAC,CAACQ,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKR,QAAQ,CAAC;IACjG;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,kBAAkBA,CAACC,KAAK,EAAE;IACtB,IAAIA,KAAK,EAAE;MACP;MACA,OAAO,IAAI,CAACd,cAAc,CAACc,KAAK,CAAC;IACrC,CAAC,MACI;MACD;MACA,IAAI,CAACd,cAAc,GAAGR,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC;IAC7C;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIc,IAAIA,CAACZ,SAAS,EAAE,GAAGb,IAAI,EAAE;IACrB,IAAIa,SAAS,IAAI,IAAI,CAACH,cAAc,EAAE;MAClC;MACA,MAAMgB,SAAS,GAAG,IAAI,CAAChB,cAAc,CAACG,SAAS,CAAC;MAChD;MACA,KAAK,MAAMC,QAAQ,IAAIY,SAAS,EAC5BZ,QAAQ,CAAC,GAAGd,IAAI,CAAC;MACrB,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACI2B,aAAaA,CAACd,SAAS,EAAE;IACrB,IAAIA,SAAS,IAAI,IAAI,CAACH,cAAc;MAChC;MACA,OAAO,IAAI,CAACA,cAAc,CAACG,SAAS,CAAC,CAACe,MAAM;IAChD,OAAO,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAAChB,SAAS,EAAEC,QAAQ,EAAE;IACjC,IAAID,SAAS,IAAI,IAAI,CAACH,cAAc,EAAE;MAClC;MACA,IAAI,CAACA,cAAc,CAACG,SAAS,CAAC,CAACiB,OAAO,CAAChB,QAAQ,CAAC;IACpD,CAAC,MACI;MACD;MACA,IAAI,CAACJ,cAAc,CAACG,SAAS,CAAC,GAAG,CAACC,QAAQ,CAAC;IAC/C;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIiB,mBAAmBA,CAAClB,SAAS,EAAEC,QAAQ,EAAE;IACrC,MAAMM,OAAO,GAAGA,CAAC,GAAGpB,IAAI,KAAK;MACzB,IAAI,CAACgB,cAAc,CAACH,SAAS,EAAEO,OAAO,CAAC;MACvC;MACAN,QAAQ,CAAC,GAAGd,IAAI,CAAC;IACrB,CAAC;IACD,OAAO,IAAI,CAAC6B,eAAe,CAAChB,SAAS,EAAEO,OAAO,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA,MAAMY,KAAK,CAAC;EACRvB,WAAWA,CAACwB,GAAG,EAAE;IACb,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,KAAKA,CAACC,IAAI,EAAE;IACd,OAAOxC,kBAAkB,CAAC;MACtBS,aAAa,EAAE,OAAO;MACtBC,OAAO,EAAE;QACLC,GAAG,EAAE,YAAY;QACjB2B,GAAG,EAAE,IAAI,CAACA,GAAG;QACb;QACAG,MAAM,EAAE,OAAOD,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGE,KAAK,CAACC,IAAI,CAACH,IAAI;MAC7D;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMI,IAAIA,CAAA,EAAG;IACT,OAAO5C,kBAAkB,CAAC;MACtBS,aAAa,EAAE,OAAO;MACtBC,OAAO,EAAE;QACLC,GAAG,EAAE,WAAW;QAChB2B,GAAG,EAAE,IAAI,CAACA;MACd;IACJ,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,OAAO,SAAShC,YAAY,CAAC;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACV,OAAO,EAAEC,IAAI,GAAG,EAAE,EAAEC,OAAO,EAAE;IACrC,KAAK,CAAC,CAAC;IACP;IACA,IAAI,CAACwC,MAAM,GAAG,IAAIjC,YAAY,CAAC,CAAC;IAChC;IACA,IAAI,CAACkC,MAAM,GAAG,IAAIlC,YAAY,CAAC,CAAC;IAChC,IAAI,CAACT,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAG,CAACA,IAAI,CAAC,GAAGA,IAAI;IACpD,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO0C,OAAOA,CAAC5C,OAAO,EAAEC,IAAI,GAAG,EAAE,EAAEC,OAAO,EAAE;IACxC,MAAM2C,QAAQ,GAAG,IAAIJ,OAAO,CAACzC,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC;IACpD2C,QAAQ,CAAC3C,OAAO,CAAC0C,OAAO,GAAG,IAAI;IAC/B,OAAOC,QAAQ;EACnB;EACA;AACJ;AACA;AACA;AACA;EACI,MAAMC,KAAKA,CAAA,EAAG;IACV,OAAOhD,OAAO,CAAE2B,KAAK,IAAK;MACtB,QAAQA,KAAK,CAACA,KAAK;QACf,KAAK,OAAO;UACR,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,KAAK,CAACsB,OAAO,CAAC;UACjC;QACJ,KAAK,YAAY;UACb,IAAI,CAACrB,IAAI,CAAC,OAAO,EAAED,KAAK,CAACsB,OAAO,CAAC;UACjC;QACJ,KAAK,QAAQ;UACT,IAAI,CAACL,MAAM,CAAChB,IAAI,CAAC,MAAM,EAAED,KAAK,CAACsB,OAAO,CAAC;UACvC;QACJ,KAAK,QAAQ;UACT,IAAI,CAACJ,MAAM,CAACjB,IAAI,CAAC,MAAM,EAAED,KAAK,CAACsB,OAAO,CAAC;UACvC;MACR;IACJ,CAAC,EAAE,IAAI,CAAC/C,OAAO,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC8C,IAAI,CAAEd,GAAG,IAAK,IAAID,KAAK,CAACC,GAAG,CAAC,CAAC;EAC3E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMpC,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAImD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAI,CAACnC,EAAE,CAAC,OAAO,EAAEmC,MAAM,CAAC;MACxB,MAAMT,MAAM,GAAG,EAAE;MACjB,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAI,CAACD,MAAM,CAAC1B,EAAE,CAAC,MAAM,EAAGoC,IAAI,IAAK;QAC7BV,MAAM,CAACvB,IAAI,CAACiC,IAAI,CAAC;MACrB,CAAC,CAAC;MACF,IAAI,CAACT,MAAM,CAAC3B,EAAE,CAAC,MAAM,EAAGoC,IAAI,IAAK;QAC7BT,MAAM,CAACxB,IAAI,CAACiC,IAAI,CAAC;MACrB,CAAC,CAAC;MACF,IAAI,CAACpC,EAAE,CAAC,OAAO,EAAG+B,OAAO,IAAK;QAC1BG,OAAO,CAAC;UACJG,IAAI,EAAEN,OAAO,CAACM,IAAI;UAClBC,MAAM,EAAEP,OAAO,CAACO,MAAM;UACtBZ,MAAM,EAAEA,MAAM,CAACa,IAAI,CAAC,IAAI,CAAC;UACzBZ,MAAM,EAAEA,MAAM,CAACY,IAAI,CAAC,IAAI;QAC5B,CAAC,CAAC;MACN,CAAC,CAAC;MACF,IAAI,CAACT,KAAK,CAAC,CAAC,CAACU,KAAK,CAACL,MAAM,CAAC;IAC9B,CAAC,CAAC;EACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeM,IAAIA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAChC,OAAO/D,kBAAkB,CAAC;IACtBS,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE;MACLC,GAAG,EAAE,MAAM;MACXmD,IAAI;MACJE,IAAI,EAAED;IACV;EACJ,CAAC,CAAC;AACN;AAEA,SAAS1B,KAAK,EAAEQ,OAAO,EAAEhC,YAAY,EAAEgD,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}