{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/NUB_Project/nub-ide/src/Components/Help_Component/Help.jsx\",\n  _s = $RefreshSig$();\n// import Form from \"react-bootstrap/Form\";\n// import { useTranslation } from \"react-i18next\";\n// import { invoke } from \"@tauri-apps/api/tauri\";\n// import { Container, Row } from \"react-bootstrap\";\n// import React, { useState, useEffect } from \"react\";\n// import Settings from \"../../Settings/Settings.json\";\n// import \"./Help.css\";\n\n// export default function Help({ onClose, visible, onSave }) {\n//   const { t, i18n } = useTranslation(\"global\");\n//   const [selectedLanguage, setSelectedLanguage] = useState(\"\"); // початкове значення мови\n//   const [selectedTheme, setSelectedTheme] = useState(\"standard-dark\"); // початкова тема\n//   const [autosaveInterval, setAutosaveInterval] = useState(0); // початковий інтервал автозбереження\n\n//   // Запис налаштувань\n//   const saveSettings = async (\n//     lang = selectedLanguage,\n//     theme = selectedTheme,\n//     autosave = autosaveInterval\n//   ) => {\n//     try {\n//       await invoke(\"setting_change\", { lang, theme, autosave });\n//     } catch (error) {\n//       console.error(\"Error invoking theme change:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     saveSettings();\n//   }, [selectedLanguage, selectedTheme, autosaveInterval]);\n\n//   // Читання налаштувань\n//   const loadSettings = async () => {\n//     setSelectedLanguage(Settings.language);\n//     handleLanguageChange(Settings.language);\n//     setSelectedTheme(Settings.theme);\n//     handleThemeChange(Settings.theme);\n//     setAutosaveInterval(Settings.autosaveInterval);\n//     console.log(\"Зчитування налаштувань успішне\");\n//   };\n\n//   useEffect(() => {\n//     loadSettings();\n//   }, []);\n\n//   useEffect(() => {\n//     const storedLang = localStorage.getItem(\"language\");\n//     if (storedLang) {\n//       handleLanguageChange(storedLang);\n//     } else {\n//       handleLanguageChange(\"ua\");\n//     }\n//   }, []);\n\n//   const handleLanguageChange = (lang) => {\n//     i18n.changeLanguage(lang);\n//     setSelectedLanguage(lang);\n//     localStorage.setItem(\"language\", lang);\n//   };\n\n//   // Зміна мови через select\n//   const handleLanguageSelectChange = (event) => {\n//     const lang = event.target.value;\n//     handleLanguageChange(lang);\n//   };\n\n//   // Зміна теми через select\n//   const handleThemeChange = async (themeName) => {\n//     setSelectedTheme(themeName);\n//     try {\n//       await invoke(\"theme_change\", { themeName });\n//     } catch (error) {\n//       console.error(\"Error invoking theme change:\", error);\n//     }\n//   };\n\n//   const handleThemeSelectChange = (event) => {\n//     const themeName = event.target.value;\n//     handleThemeChange(themeName);\n//   };\n\n//   // Встановлення значення автозбереження через select\n//   const handleAutosaveSelectChange = (event) => {\n//     const value = event.target.value;\n//     setAutosaveInterval(value);\n//   };\n\n//   useEffect(() => {\n//     const interval = parseInt(autosaveInterval, 10);\n//     let adjustedInterval = interval * 60;\n//     if (interval === 10) {\n//       adjustedInterval = 10 * 60;\n//     }\n\n//     if (adjustedInterval > 0) {\n//       const intervalId = setInterval(() => {\n//         onSave();\n//       }, adjustedInterval * 1000);\n\n//       return () => {\n//         clearInterval(intervalId);\n//       };\n//     }\n//   }, [autosaveInterval, onSave]);\n\n//   return (\n//     <Container className={`help-container ${visible ? \"visible\" : \"hidden\"}`}>\n//       <Row className=\"help-close-button\">\n//         <button onClick={onClose}>\n//           <b>X</b>\n//         </button>\n//       </Row>\n//       <Row className=\"help-content-container\">\n//         <div className=\"help-content\">\n//           <h1>NUB IDE</h1>\n//           <p>\n//             Це середовище розробки створене спеціально для мов програмування\n//             NukLang, Удав та Based\n//           </p>\n//           <p>Його основною ідеєю є робота через термінал, але не повна</p>\n//           <p>Інтерпретатори мов та компілятори були встановлені автоматично</p>\n//           <p>\n//             Оскільки мови не сильно працюють із сторонніми файлами, то робота у\n//             даному редакторі коду також здійснюється у межах одного файлу\n//           </p>\n//           <hr></hr>\n//           <p>Ide має такі команди для терміналу:</p>\n//           <p>- cd [path]</p>\n//           <p>- ls </p>\n//           <p>- pwd</p>\n//           <p>- open - відкриває файл</p>\n//           <p>- save - зберігає файл</p>\n//           <p>- save as - зберегти файл як</p>\n//           <p>- translate - викликає меню з вибором мови інтерфейсу</p>\n//           <p>- exit - закриває все IDE</p>\n//           <hr></hr>\n//           {/* Обрати мову */}\n//           <p>Обрати мову</p>\n//           <Form.Select\n//             aria-label=\"Select Language\"\n//             onChange={handleLanguageSelectChange}\n//             value={selectedLanguage}\n//           >\n//             <option value=\"ua\">Ukrainian</option>\n//             <option value=\"en\">English</option>\n//           </Form.Select>\n//           {/* Обрати тему */}\n//           <p>Обрати тему</p>\n//           <Form.Select\n//             aria-label=\"Select Theme\"\n//             onChange={handleThemeSelectChange}\n//             value={selectedTheme}\n//           >\n//             <option value=\"azure-sky\">Azure Sky</option>\n//             <option value=\"based\">Based</option>\n//             <option value=\"dracula\">Dracula</option>\n//             <option value=\"lemon-sorbet\">Lemon Sorbet</option>\n//             <option value=\"monokai\">Monokai</option>\n//             <option value=\"niklang\">NikLang</option>\n//             <option value=\"one-dark-pro\">One Dark Pro</option>\n//             <option value=\"pink-rabbit\">Pink Rabbit</option>\n//             <option value=\"solarized-dark\">Solarized Dark</option>\n//             <option value=\"solarized-light\">Solarized Light</option>\n//             <option value=\"standard-dark\">Standard Dark</option>\n//             <option value=\"standard-light\">Standard Light</option>\n//             <option value=\"tomorrow\">Tomorrow</option>\n//             <option value=\"udav\">Udav</option>\n//             <option value=\"vanilla-cream\">Vanilla Cream</option>\n//           </Form.Select>\n//           {/* Автозбереження */}\n//           <p>Автозбереження</p>\n//           <Form.Select\n//             aria-label=\"Select test\"\n//             onChange={handleAutosaveSelectChange}\n//             value={autosaveInterval}\n//           >\n//             <option value=\"0\">Ніколи</option>\n//             <option value=\"1\">Кожну хвилину</option>\n//             <option value=\"5\">Кожні п'ять хвилин</option>\n//             <option value=\"10\">Кожні десять хвилин</option>\n//           </Form.Select>\n//         </div>\n//       </Row>\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Form } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { invoke } from \"@tauri-apps/api/tauri\";\nimport Settings from \"../../Settings/Settings.json\";\nimport \"./Help.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Help({\n  onClose,\n  visible,\n  onSave\n}) {\n  _s();\n  const {\n    t,\n    i18n\n  } = useTranslation(\"global\");\n  const [selectedLanguage, setSelectedLanguage] = useState(\"\");\n  const [selectedTheme, setSelectedTheme] = useState(\"standard-dark\");\n  const [autosaveInterval, setAutosaveInterval] = useState(0);\n  const saveSettings = async (lang = selectedLanguage, theme = selectedTheme, autosave = autosaveInterval) => {\n    try {\n      await invoke(\"setting_change\", {\n        lang,\n        theme,\n        autosave\n      });\n    } catch (error) {\n      console.error(\"Error invoking theme change:\", error);\n    }\n  };\n  useEffect(() => {\n    saveSettings();\n  }, [selectedLanguage, selectedTheme, autosaveInterval]);\n  const loadSettings = async () => {\n    setSelectedLanguage(Settings.language);\n    setSelectedTheme(Settings.theme);\n    setAutosaveInterval(Settings.autosaveInterval);\n    console.log(\"Зчитування налаштувань успішне\");\n  };\n  useEffect(() => {\n    loadSettings();\n  }, []);\n  const handleLanguageChange = lang => {\n    i18n.changeLanguage(lang);\n    setSelectedLanguage(lang);\n  };\n  const handleLanguageSelectChange = event => {\n    const lang = event.target.value;\n    handleLanguageChange(lang);\n  };\n  const handleThemeChange = async themeName => {\n    setSelectedTheme(themeName);\n    try {\n      await invoke(\"theme_change\", {\n        themeName\n      });\n    } catch (error) {\n      console.error(\"Error invoking theme change:\", error);\n    }\n  };\n  const handleThemeSelectChange = event => {\n    const themeName = event.target.value;\n    handleThemeChange(themeName);\n  };\n  const handleAutosaveSelectChange = event => {\n    const value = event.target.value;\n    setAutosaveInterval(value);\n  };\n  useEffect(() => {\n    const interval = parseInt(autosaveInterval, 10);\n    let adjustedInterval = interval * 60;\n    if (interval === 10) {\n      adjustedInterval = 10 * 60;\n    }\n    if (adjustedInterval > 0) {\n      const intervalId = setInterval(() => {\n        onSave();\n      }, adjustedInterval * 1000);\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }, [autosaveInterval, onSave]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: `help-container ${visible ? \"visible\" : \"hidden\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"help-close-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"help-content-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"help-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"NUB IDE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u0426\\u0435 \\u0441\\u0435\\u0440\\u0435\\u0434\\u043E\\u0432\\u0438\\u0449\\u0435 \\u0440\\u043E\\u0437\\u0440\\u043E\\u0431\\u043A\\u0438 \\u0441\\u0442\\u0432\\u043E\\u0440\\u0435\\u043D\\u0435 \\u0441\\u043F\\u0435\\u0446\\u0456\\u0430\\u043B\\u044C\\u043D\\u043E \\u0434\\u043B\\u044F \\u043C\\u043E\\u0432 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u0443\\u0432\\u0430\\u043D\\u043D\\u044F NukLang, \\u0423\\u0434\\u0430\\u0432 \\u0442\\u0430 Based\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          \"aria-label\": \"Select Language\",\n          onChange: handleLanguageSelectChange,\n          value: selectedLanguage,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ua\",\n            children: \"Ukrainian\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"en\",\n            children: \"English\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          \"aria-label\": \"Select Theme\",\n          onChange: handleThemeSelectChange,\n          value: selectedTheme,\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"azure-sky\",\n            children: \"Azure Sky\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          \"aria-label\": \"Select test\",\n          onChange: handleAutosaveSelectChange,\n          value: autosaveInterval,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"0\",\n            children: \"\\u041D\\u0456\\u043A\\u043E\\u043B\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1\",\n            children: \"\\u041A\\u043E\\u0436\\u043D\\u0443 \\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\\u0443\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"\\u041A\\u043E\\u0436\\u043D\\u0456 \\u043F'\\u044F\\u0442\\u044C \\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"10\",\n            children: \"\\u041A\\u043E\\u0436\\u043D\\u0456 \\u0434\\u0435\\u0441\\u044F\\u0442\\u044C \\u0445\\u0432\\u0438\\u043B\\u0438\\u043D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(Help, \"g3cfheyCdzoaYqzIE4PDoPjHmcE=\", false, function () {\n  return [useTranslation];\n});\n_c = Help;\nvar _c;\n$RefreshReg$(_c, \"Help\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Form","useTranslation","invoke","Settings","jsxDEV","_jsxDEV","Help","onClose","visible","onSave","_s","t","i18n","selectedLanguage","setSelectedLanguage","selectedTheme","setSelectedTheme","autosaveInterval","setAutosaveInterval","saveSettings","lang","theme","autosave","error","console","loadSettings","language","log","handleLanguageChange","changeLanguage","handleLanguageSelectChange","event","target","value","handleThemeChange","themeName","handleThemeSelectChange","handleAutosaveSelectChange","interval","parseInt","adjustedInterval","intervalId","setInterval","clearInterval","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Select","onChange","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/src/Components/Help_Component/Help.jsx"],"sourcesContent":["// import Form from \"react-bootstrap/Form\";\n// import { useTranslation } from \"react-i18next\";\n// import { invoke } from \"@tauri-apps/api/tauri\";\n// import { Container, Row } from \"react-bootstrap\";\n// import React, { useState, useEffect } from \"react\";\n// import Settings from \"../../Settings/Settings.json\";\n// import \"./Help.css\";\n\n// export default function Help({ onClose, visible, onSave }) {\n//   const { t, i18n } = useTranslation(\"global\");\n//   const [selectedLanguage, setSelectedLanguage] = useState(\"\"); // початкове значення мови\n//   const [selectedTheme, setSelectedTheme] = useState(\"standard-dark\"); // початкова тема\n//   const [autosaveInterval, setAutosaveInterval] = useState(0); // початковий інтервал автозбереження\n\n//   // Запис налаштувань\n//   const saveSettings = async (\n//     lang = selectedLanguage,\n//     theme = selectedTheme,\n//     autosave = autosaveInterval\n//   ) => {\n//     try {\n//       await invoke(\"setting_change\", { lang, theme, autosave });\n//     } catch (error) {\n//       console.error(\"Error invoking theme change:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     saveSettings();\n//   }, [selectedLanguage, selectedTheme, autosaveInterval]);\n\n//   // Читання налаштувань\n//   const loadSettings = async () => {\n//     setSelectedLanguage(Settings.language);\n//     handleLanguageChange(Settings.language);\n//     setSelectedTheme(Settings.theme);\n//     handleThemeChange(Settings.theme);\n//     setAutosaveInterval(Settings.autosaveInterval);\n//     console.log(\"Зчитування налаштувань успішне\");\n//   };\n\n//   useEffect(() => {\n//     loadSettings();\n//   }, []);\n\n//   useEffect(() => {\n//     const storedLang = localStorage.getItem(\"language\");\n//     if (storedLang) {\n//       handleLanguageChange(storedLang);\n//     } else {\n//       handleLanguageChange(\"ua\");\n//     }\n//   }, []);\n\n//   const handleLanguageChange = (lang) => {\n//     i18n.changeLanguage(lang);\n//     setSelectedLanguage(lang);\n//     localStorage.setItem(\"language\", lang);\n//   };\n\n//   // Зміна мови через select\n//   const handleLanguageSelectChange = (event) => {\n//     const lang = event.target.value;\n//     handleLanguageChange(lang);\n//   };\n\n//   // Зміна теми через select\n//   const handleThemeChange = async (themeName) => {\n//     setSelectedTheme(themeName);\n//     try {\n//       await invoke(\"theme_change\", { themeName });\n//     } catch (error) {\n//       console.error(\"Error invoking theme change:\", error);\n//     }\n//   };\n\n//   const handleThemeSelectChange = (event) => {\n//     const themeName = event.target.value;\n//     handleThemeChange(themeName);\n//   };\n\n//   // Встановлення значення автозбереження через select\n//   const handleAutosaveSelectChange = (event) => {\n//     const value = event.target.value;\n//     setAutosaveInterval(value);\n//   };\n\n//   useEffect(() => {\n//     const interval = parseInt(autosaveInterval, 10);\n//     let adjustedInterval = interval * 60;\n//     if (interval === 10) {\n//       adjustedInterval = 10 * 60;\n//     }\n\n//     if (adjustedInterval > 0) {\n//       const intervalId = setInterval(() => {\n//         onSave();\n//       }, adjustedInterval * 1000);\n\n//       return () => {\n//         clearInterval(intervalId);\n//       };\n//     }\n//   }, [autosaveInterval, onSave]);\n\n//   return (\n//     <Container className={`help-container ${visible ? \"visible\" : \"hidden\"}`}>\n//       <Row className=\"help-close-button\">\n//         <button onClick={onClose}>\n//           <b>X</b>\n//         </button>\n//       </Row>\n//       <Row className=\"help-content-container\">\n//         <div className=\"help-content\">\n//           <h1>NUB IDE</h1>\n//           <p>\n//             Це середовище розробки створене спеціально для мов програмування\n//             NukLang, Удав та Based\n//           </p>\n//           <p>Його основною ідеєю є робота через термінал, але не повна</p>\n//           <p>Інтерпретатори мов та компілятори були встановлені автоматично</p>\n//           <p>\n//             Оскільки мови не сильно працюють із сторонніми файлами, то робота у\n//             даному редакторі коду також здійснюється у межах одного файлу\n//           </p>\n//           <hr></hr>\n//           <p>Ide має такі команди для терміналу:</p>\n//           <p>- cd [path]</p>\n//           <p>- ls </p>\n//           <p>- pwd</p>\n//           <p>- open - відкриває файл</p>\n//           <p>- save - зберігає файл</p>\n//           <p>- save as - зберегти файл як</p>\n//           <p>- translate - викликає меню з вибором мови інтерфейсу</p>\n//           <p>- exit - закриває все IDE</p>\n//           <hr></hr>\n//           {/* Обрати мову */}\n//           <p>Обрати мову</p>\n//           <Form.Select\n//             aria-label=\"Select Language\"\n//             onChange={handleLanguageSelectChange}\n//             value={selectedLanguage}\n//           >\n//             <option value=\"ua\">Ukrainian</option>\n//             <option value=\"en\">English</option>\n//           </Form.Select>\n//           {/* Обрати тему */}\n//           <p>Обрати тему</p>\n//           <Form.Select\n//             aria-label=\"Select Theme\"\n//             onChange={handleThemeSelectChange}\n//             value={selectedTheme}\n//           >\n//             <option value=\"azure-sky\">Azure Sky</option>\n//             <option value=\"based\">Based</option>\n//             <option value=\"dracula\">Dracula</option>\n//             <option value=\"lemon-sorbet\">Lemon Sorbet</option>\n//             <option value=\"monokai\">Monokai</option>\n//             <option value=\"niklang\">NikLang</option>\n//             <option value=\"one-dark-pro\">One Dark Pro</option>\n//             <option value=\"pink-rabbit\">Pink Rabbit</option>\n//             <option value=\"solarized-dark\">Solarized Dark</option>\n//             <option value=\"solarized-light\">Solarized Light</option>\n//             <option value=\"standard-dark\">Standard Dark</option>\n//             <option value=\"standard-light\">Standard Light</option>\n//             <option value=\"tomorrow\">Tomorrow</option>\n//             <option value=\"udav\">Udav</option>\n//             <option value=\"vanilla-cream\">Vanilla Cream</option>\n//           </Form.Select>\n//           {/* Автозбереження */}\n//           <p>Автозбереження</p>\n//           <Form.Select\n//             aria-label=\"Select test\"\n//             onChange={handleAutosaveSelectChange}\n//             value={autosaveInterval}\n//           >\n//             <option value=\"0\">Ніколи</option>\n//             <option value=\"1\">Кожну хвилину</option>\n//             <option value=\"5\">Кожні п'ять хвилин</option>\n//             <option value=\"10\">Кожні десять хвилин</option>\n//           </Form.Select>\n//         </div>\n//       </Row>\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Form } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { invoke } from \"@tauri-apps/api/tauri\";\nimport Settings from \"../../Settings/Settings.json\";\nimport \"./Help.css\";\n\nexport default function Help({ onClose, visible, onSave }) {\n  const { t, i18n } = useTranslation(\"global\");\n  const [selectedLanguage, setSelectedLanguage] = useState(\"\");\n  const [selectedTheme, setSelectedTheme] = useState(\"standard-dark\");\n  const [autosaveInterval, setAutosaveInterval] = useState(0);\n\n  const saveSettings = async (\n    lang = selectedLanguage,\n    theme = selectedTheme,\n    autosave = autosaveInterval\n  ) => {\n    try {\n      await invoke(\"setting_change\", { lang, theme, autosave });\n    } catch (error) {\n      console.error(\"Error invoking theme change:\", error);\n    }\n  };\n\n  useEffect(() => {\n    saveSettings();\n  }, [selectedLanguage, selectedTheme, autosaveInterval]);\n\n  const loadSettings = async () => {\n    setSelectedLanguage(Settings.language);\n    setSelectedTheme(Settings.theme);\n    setAutosaveInterval(Settings.autosaveInterval);\n    console.log(\"Зчитування налаштувань успішне\");\n  };\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const handleLanguageChange = (lang) => {\n    i18n.changeLanguage(lang);\n    setSelectedLanguage(lang);\n  };\n\n  const handleLanguageSelectChange = (event) => {\n    const lang = event.target.value;\n    handleLanguageChange(lang);\n  };\n\n  const handleThemeChange = async (themeName) => {\n    setSelectedTheme(themeName);\n    try {\n      await invoke(\"theme_change\", { themeName });\n    } catch (error) {\n      console.error(\"Error invoking theme change:\", error);\n    }\n  };\n\n  const handleThemeSelectChange = (event) => {\n    const themeName = event.target.value;\n    handleThemeChange(themeName);\n  };\n\n  const handleAutosaveSelectChange = (event) => {\n    const value = event.target.value;\n    setAutosaveInterval(value);\n  };\n\n  useEffect(() => {\n    const interval = parseInt(autosaveInterval, 10);\n    let adjustedInterval = interval * 60;\n    if (interval === 10) {\n      adjustedInterval = 10 * 60;\n    }\n\n    if (adjustedInterval > 0) {\n      const intervalId = setInterval(() => {\n        onSave();\n      }, adjustedInterval * 1000);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }, [autosaveInterval, onSave]);\n\n  return (\n    <Container className={`help-container ${visible ? \"visible\" : \"hidden\"}`}>\n      <Row className=\"help-close-button\">\n        <button onClick={onClose}>\n          <b>X</b>\n        </button>\n      </Row>\n      <Row className=\"help-content-container\">\n        <div className=\"help-content\">\n          <h1>NUB IDE</h1>\n          <p>\n            Це середовище розробки створене спеціально для мов програмування\n            NukLang, Удав та Based\n          </p>\n          {/* Ваш інші рядки та пункти */}\n          <Form.Select\n            aria-label=\"Select Language\"\n            onChange={handleLanguageSelectChange}\n            value={selectedLanguage}\n          >\n            <option value=\"ua\">Ukrainian</option>\n            <option value=\"en\">English</option>\n          </Form.Select>\n          {/* Інші вибірки */}\n          <Form.Select\n            aria-label=\"Select Theme\"\n            onChange={handleThemeSelectChange}\n            value={selectedTheme}\n          >\n            <option value=\"azure-sky\">Azure Sky</option>\n            {/* Інші теми */}\n          </Form.Select>\n          {/* Вибір інтервалу */}\n          <Form.Select\n            aria-label=\"Select test\"\n            onChange={handleAutosaveSelectChange}\n            value={autosaveInterval}\n          >\n            <option value=\"0\">Ніколи</option>\n            <option value=\"1\">Кожну хвилину</option>\n            <option value=\"5\">Кожні п'ять хвилин</option>\n            <option value=\"10\">Кожні десять хвилин</option>\n          </Form.Select>\n        </div>\n      </Row>\n    </Container>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,GAAG,EAAEC,IAAI,QAAQ,iBAAiB;AACtD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,SAASC,IAAIA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EACzD,MAAM;IAAEC,CAAC;IAAEC;EAAK,CAAC,GAAGX,cAAc,CAAC,QAAQ,CAAC;EAC5C,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,eAAe,CAAC;EACnE,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAE3D,MAAMuB,YAAY,GAAG,MAAAA,CACnBC,IAAI,GAAGP,gBAAgB,EACvBQ,KAAK,GAAGN,aAAa,EACrBO,QAAQ,GAAGL,gBAAgB,KACxB;IACH,IAAI;MACF,MAAMf,MAAM,CAAC,gBAAgB,EAAE;QAAEkB,IAAI;QAAEC,KAAK;QAAEC;MAAS,CAAC,CAAC;IAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED1B,SAAS,CAAC,MAAM;IACdsB,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACN,gBAAgB,EAAEE,aAAa,EAAEE,gBAAgB,CAAC,CAAC;EAEvD,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/BX,mBAAmB,CAACX,QAAQ,CAACuB,QAAQ,CAAC;IACtCV,gBAAgB,CAACb,QAAQ,CAACkB,KAAK,CAAC;IAChCH,mBAAmB,CAACf,QAAQ,CAACc,gBAAgB,CAAC;IAC9CO,OAAO,CAACG,GAAG,CAAC,gCAAgC,CAAC;EAC/C,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd4B,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,oBAAoB,GAAIR,IAAI,IAAK;IACrCR,IAAI,CAACiB,cAAc,CAACT,IAAI,CAAC;IACzBN,mBAAmB,CAACM,IAAI,CAAC;EAC3B,CAAC;EAED,MAAMU,0BAA0B,GAAIC,KAAK,IAAK;IAC5C,MAAMX,IAAI,GAAGW,KAAK,CAACC,MAAM,CAACC,KAAK;IAC/BL,oBAAoB,CAACR,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMc,iBAAiB,GAAG,MAAOC,SAAS,IAAK;IAC7CnB,gBAAgB,CAACmB,SAAS,CAAC;IAC3B,IAAI;MACF,MAAMjC,MAAM,CAAC,cAAc,EAAE;QAAEiC;MAAU,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,MAAMa,uBAAuB,GAAIL,KAAK,IAAK;IACzC,MAAMI,SAAS,GAAGJ,KAAK,CAACC,MAAM,CAACC,KAAK;IACpCC,iBAAiB,CAACC,SAAS,CAAC;EAC9B,CAAC;EAED,MAAME,0BAA0B,GAAIN,KAAK,IAAK;IAC5C,MAAME,KAAK,GAAGF,KAAK,CAACC,MAAM,CAACC,KAAK;IAChCf,mBAAmB,CAACe,KAAK,CAAC;EAC5B,CAAC;EAEDpC,SAAS,CAAC,MAAM;IACd,MAAMyC,QAAQ,GAAGC,QAAQ,CAACtB,gBAAgB,EAAE,EAAE,CAAC;IAC/C,IAAIuB,gBAAgB,GAAGF,QAAQ,GAAG,EAAE;IACpC,IAAIA,QAAQ,KAAK,EAAE,EAAE;MACnBE,gBAAgB,GAAG,EAAE,GAAG,EAAE;IAC5B;IAEA,IAAIA,gBAAgB,GAAG,CAAC,EAAE;MACxB,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;QACnCjC,MAAM,CAAC,CAAC;MACV,CAAC,EAAE+B,gBAAgB,GAAG,IAAI,CAAC;MAE3B,OAAO,MAAM;QACXG,aAAa,CAACF,UAAU,CAAC;MAC3B,CAAC;IACH;EACF,CAAC,EAAE,CAACxB,gBAAgB,EAAER,MAAM,CAAC,CAAC;EAE9B,oBACEJ,OAAA,CAACP,SAAS;IAAC8C,SAAS,EAAG,kBAAiBpC,OAAO,GAAG,SAAS,GAAG,QAAS,EAAE;IAAAqC,QAAA,gBACvExC,OAAA,CAACN,GAAG;MAAC6C,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChCxC,OAAA;QAAQyC,OAAO,EAAEvC,OAAQ;QAAAsC,QAAA,eACvBxC,OAAA;UAAAwC,QAAA,EAAG;QAAC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN7C,OAAA,CAACN,GAAG;MAAC6C,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACrCxC,OAAA;QAAKuC,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BxC,OAAA;UAAAwC,QAAA,EAAI;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChB7C,OAAA;UAAAwC,QAAA,EAAG;QAGH;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAEJ7C,OAAA,CAACL,IAAI,CAACmD,MAAM;UACV,cAAW,iBAAiB;UAC5BC,QAAQ,EAAEtB,0BAA2B;UACrCG,KAAK,EAAEpB,gBAAiB;UAAAgC,QAAA,gBAExBxC,OAAA;YAAQ4B,KAAK,EAAC,IAAI;YAAAY,QAAA,EAAC;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACrC7C,OAAA;YAAQ4B,KAAK,EAAC,IAAI;YAAAY,QAAA,EAAC;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eAEd7C,OAAA,CAACL,IAAI,CAACmD,MAAM;UACV,cAAW,cAAc;UACzBC,QAAQ,EAAEhB,uBAAwB;UAClCH,KAAK,EAAElB,aAAc;UAAA8B,QAAA,eAErBxC,OAAA;YAAQ4B,KAAK,EAAC,WAAW;YAAAY,QAAA,EAAC;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEjC,CAAC,eAEd7C,OAAA,CAACL,IAAI,CAACmD,MAAM;UACV,cAAW,aAAa;UACxBC,QAAQ,EAAEf,0BAA2B;UACrCJ,KAAK,EAAEhB,gBAAiB;UAAA4B,QAAA,gBAExBxC,OAAA;YAAQ4B,KAAK,EAAC,GAAG;YAAAY,QAAA,EAAC;UAAM;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjC7C,OAAA;YAAQ4B,KAAK,EAAC,GAAG;YAAAY,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxC7C,OAAA;YAAQ4B,KAAK,EAAC,GAAG;YAAAY,QAAA,EAAC;UAAkB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC7C7C,OAAA;YAAQ4B,KAAK,EAAC,IAAI;YAAAY,QAAA,EAAC;UAAmB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB;AAACxC,EAAA,CA/HuBJ,IAAI;EAAA,QACNL,cAAc;AAAA;AAAAoD,EAAA,GADZ/C,IAAI;AAAA,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}