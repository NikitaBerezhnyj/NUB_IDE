{"ast":null,"code":"var _jsxFileName = \"/home/nikita/\\u041F\\u0440\\u043E\\u0454\\u043A\\u0442\\u0438/Rust/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\n// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         // Autopairing parentheses\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, selectionEnd, value } = event.target;\n//                 if (event.data === '(') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ')' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '{') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '}' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '[') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ']' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\n// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         // Autopairing parentheses\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 if (event.data === '(') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ')' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '{') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '}' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '[') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ']' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '\"') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '\"' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === \"'\") {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + \"'\" + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === ')' && value[selectionStart] === ')') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '}' && value[selectionStart] === '}') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === ']' && value[selectionStart] === ']') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport '../Standard-Component-style.css';\nimport './Code_Editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CodeEditor() {\n  _s();\n  const [text, setText] = useState('');\n  const [history, setHistory] = useState([]);\n  const [currentStep, setCurrentStep] = useState(-1);\n  const textareaRef = useRef(null);\n  const undo = () => {\n    if (currentStep > 0) {\n      setText(history[currentStep - 1]);\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const redo = () => {\n    if (currentStep < history.length - 1) {\n      setText(history[currentStep + 1]);\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  useEffect(() => {\n    const handleUndoRedo = event => {\n      if (event.ctrlKey && event.key === 'z') {\n        event.preventDefault();\n        undo();\n      } else if (event.ctrlKey && event.key === 'y') {\n        event.preventDefault();\n        redo();\n      }\n    };\n    window.addEventListener('keydown', handleUndoRedo);\n    return () => {\n      window.removeEventListener('keydown', handleUndoRedo);\n    };\n  }, [undo, redo]);\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    const lineNumbersEle = document.getElementById('line-numbers');\n    const displayLineNumbers = () => {\n      const lines = text.split('\\n');\n      lineNumbersEle.innerHTML = Array.from({\n        length: lines.length\n      }, (_, i) => `<div>${i + 1}</div>`).join('');\n    };\n    displayLineNumbers();\n\n    // Autopairing parentheses\n    const handleInput = event => {\n      if (event.inputType === \"insertText\") {\n        const {\n          selectionStart,\n          value\n        } = event.target;\n        if (event.data === '(' || event.data === '{' || event.data === '[' || event.data === '\"' || event.data === \"'\") {\n          event.preventDefault();\n          const closingChar = event.data === '(' ? ')' : event.data === '{' ? '}' : event.data === '[' ? ']' : event.data === '\"' ? '\"' : \"'\";\n          setText(value.substring(0, selectionStart) + event.data + closingChar + value.substring(selectionStart));\n          textarea.selectionStart = selectionStart + 1;\n          textarea.selectionEnd = selectionStart + 1;\n        }\n      }\n    };\n    textarea.addEventListener('input', handleInput);\n    return () => {\n      textarea.removeEventListener('input', handleInput);\n    };\n  }, [text]);\n  const handleChange = event => {\n    setText(event.target.value);\n    // Save changes to history\n    const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n    setHistory(newHistory);\n    setCurrentStep(newHistory.length - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-numbers\",\n      className: \"code-lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      id: \"textarea\",\n      value: text,\n      onChange: handleChange,\n      className: \"code-editor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 9\n  }, this);\n}\n_s(CodeEditor, \"M8yTNiUaaRJbB3uiV69+fPu/wXc=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Container","jsxDEV","_jsxDEV","CodeEditor","_s","text","setText","history","setHistory","currentStep","setCurrentStep","textareaRef","undo","redo","length","handleUndoRedo","event","ctrlKey","key","preventDefault","window","addEventListener","removeEventListener","textarea","current","lineNumbersEle","document","getElementById","displayLineNumbers","lines","split","innerHTML","Array","from","_","i","join","handleInput","inputType","selectionStart","value","target","data","closingChar","substring","selectionEnd","handleChange","newHistory","slice","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","_c","$RefreshReg$"],"sources":["/home/nikita/Проєкти/Rust/nub-ide/src/Components/Code_Editor_Component/Code_Editor.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         // Autopairing parentheses\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, selectionEnd, value } = event.target;\n//                 if (event.data === '(') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ')' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '{') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '}' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '[') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ']' + value.substring(selectionEnd));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { Container } from 'react-bootstrap';\n// import '../Standard-Component-style.css';\n// import './Code_Editor.css';\n\n// export default function CodeEditor() {\n//     const [text, setText] = useState('');\n//     const [history, setHistory] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(-1);\n\n//     const undo = () => {\n//         if (currentStep > 0) {\n//             setText(history[currentStep - 1]);\n//             setCurrentStep(currentStep - 1);\n//         }\n//     };\n\n//     const redo = () => {\n//         if (currentStep < history.length - 1) {\n//             setText(history[currentStep + 1]);\n//             setCurrentStep(currentStep + 1);\n//         }\n//     };\n\n//     useEffect(() => {\n//         const handleUndoRedo = (event) => {\n//             if (event.ctrlKey && event.key === 'z') {\n//                 event.preventDefault();\n//                 undo();\n//             } else if (event.ctrlKey && event.key === 'y') {\n//                 event.preventDefault();\n//                 redo();\n//             }\n//         };\n\n//         window.addEventListener('keydown', handleUndoRedo);\n\n//         return () => {\n//             window.removeEventListener('keydown', handleUndoRedo);\n//         };\n//     }, [undo, redo]);\n\n//     useEffect(() => {\n//         const textarea = document.getElementById('textarea');\n//         const lineNumbersEle = document.getElementById('line-numbers');\n\n//         const displayLineNumbers = () => {\n//             const lines = text.split('\\n');\n//             lineNumbersEle.innerHTML = Array.from({\n//                 length: lines.length,\n//             }, (_, i) => `<div>${i + 1}</div>`).join('');\n//         };\n\n//         displayLineNumbers();\n\n//         // Autopairing parentheses\n//         const handleInput = (event) => {\n//             if (event.inputType === \"insertText\") {\n//                 const { selectionStart, value } = event.target;\n//                 if (event.data === '(') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ')' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '{') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '}' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '[') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + ']' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '\"') {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + '\"' + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === \"'\") {\n//                     event.preventDefault();\n//                     setText(value.substring(0, selectionStart) + \"'\" + value.substring(selectionStart));\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === ')' && value[selectionStart] === ')') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === '}' && value[selectionStart] === '}') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 } else if (event.data === ']' && value[selectionStart] === ']') {\n//                     event.preventDefault();\n//                     textarea.selectionStart = selectionStart + 1;\n//                     textarea.selectionEnd = selectionStart + 1;\n//                 }\n//             }\n//         };\n\n//         textarea.addEventListener('input', handleInput);\n\n//         return () => {\n//             textarea.removeEventListener('input', handleInput);\n//         };\n//     }, [text]);\n\n//     const handleChange = (event) => {\n//         setText(event.target.value);\n//         // Save changes to history\n//         const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n//         setHistory(newHistory);\n//         setCurrentStep(newHistory.length - 1);\n//     };\n\n//     return (\n//         <Container className='code-editor-container'>\n//             <div id=\"line-numbers\" className=\"code-lines\"></div>\n//             <textarea id=\"textarea\" value={text} onChange={handleChange} className='code-editor'></textarea>\n//         </Container>\n//     );\n// }\n\n\n\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Container } from 'react-bootstrap';\nimport '../Standard-Component-style.css';\nimport './Code_Editor.css';\n\nexport default function CodeEditor() {\n    const [text, setText] = useState('');\n    const [history, setHistory] = useState([]);\n    const [currentStep, setCurrentStep] = useState(-1);\n    const textareaRef = useRef(null);\n\n    const undo = () => {\n        if (currentStep > 0) {\n            setText(history[currentStep - 1]);\n            setCurrentStep(currentStep - 1);\n        }\n    };\n\n    const redo = () => {\n        if (currentStep < history.length - 1) {\n            setText(history[currentStep + 1]);\n            setCurrentStep(currentStep + 1);\n        }\n    };\n\n    useEffect(() => {\n        const handleUndoRedo = (event) => {\n            if (event.ctrlKey && event.key === 'z') {\n                event.preventDefault();\n                undo();\n            } else if (event.ctrlKey && event.key === 'y') {\n                event.preventDefault();\n                redo();\n            }\n        };\n\n        window.addEventListener('keydown', handleUndoRedo);\n\n        return () => {\n            window.removeEventListener('keydown', handleUndoRedo);\n        };\n    }, [undo, redo]);\n\n    useEffect(() => {\n        const textarea = textareaRef.current;\n        const lineNumbersEle = document.getElementById('line-numbers');\n\n        const displayLineNumbers = () => {\n            const lines = text.split('\\n');\n            lineNumbersEle.innerHTML = Array.from({\n                length: lines.length,\n            }, (_, i) => `<div>${i + 1}</div>`).join('');\n        };\n\n        displayLineNumbers();\n\n        // Autopairing parentheses\n        const handleInput = (event) => {\n            if (event.inputType === \"insertText\") {\n                const { selectionStart, value } = event.target;\n                if (event.data === '(' || event.data === '{' || event.data === '[' || event.data === '\"' || event.data === \"'\") {\n                    event.preventDefault();\n                    const closingChar = event.data === '(' ? ')' : (event.data === '{' ? '}' : (event.data === '[' ? ']' : (event.data === '\"' ? '\"' : \"'\")));\n                    setText(value.substring(0, selectionStart) + event.data + closingChar + value.substring(selectionStart));\n                    textarea.selectionStart = selectionStart + 1;\n                    textarea.selectionEnd = selectionStart + 1;\n                }\n            }\n        };\n\n        textarea.addEventListener('input', handleInput);\n\n        return () => {\n            textarea.removeEventListener('input', handleInput);\n        };\n    }, [text]);\n\n    const handleChange = (event) => {\n        setText(event.target.value);\n        // Save changes to history\n        const newHistory = [...history.slice(0, currentStep + 1), event.target.value];\n        setHistory(newHistory);\n        setCurrentStep(newHistory.length - 1);\n    };\n\n    return (\n        <Container className='code-editor-container'>\n            <div id=\"line-numbers\" className=\"code-lines\"></div>\n            <textarea \n                ref={textareaRef}\n                id=\"textarea\" \n                value={text} \n                onChange={handleChange} \n                className='code-editor'>\n            </textarea>\n        </Container>\n    );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}