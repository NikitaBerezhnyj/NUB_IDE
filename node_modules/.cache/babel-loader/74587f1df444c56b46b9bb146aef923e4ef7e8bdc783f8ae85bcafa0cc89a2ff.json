{"ast":null,"code":"import { invokeTauriCommand } from './tauri.js';\nimport { transformCallback } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n  return invokeTauriCommand({\n    __tauriModule: 'Event',\n    message: {\n      cmd: 'unlisten',\n      event,\n      eventId\n    }\n  });\n}\n/**\n * Emits an event to the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param [windowLabel] The label of the window to which the event is sent, if null/undefined the event will be sent to all windows\n * @param [payload] Event payload\n * @returns\n */\nasync function emit(event, windowLabel, payload) {\n  await invokeTauriCommand({\n    __tauriModule: 'Event',\n    message: {\n      cmd: 'emit',\n      event,\n      windowLabel,\n      payload\n    }\n  });\n}\n/**\n * Listen to an event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @return A promise resolving to a function to unlisten to the event.\n */\nasync function listen(event, windowLabel, handler) {\n  return invokeTauriCommand({\n    __tauriModule: 'Event',\n    message: {\n      cmd: 'listen',\n      event,\n      windowLabel,\n      handler: transformCallback(handler)\n    }\n  }).then(eventId => {\n    return async () => _unlisten(event, eventId);\n  });\n}\n/**\n * Listen to an one-off event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n */\nasync function once(event, windowLabel, handler) {\n  return listen(event, windowLabel, eventData => {\n    handler(eventData);\n    _unlisten(event, eventData.id).catch(() => {});\n  });\n}\nexport { emit, listen, once };","map":{"version":3,"names":["invokeTauriCommand","transformCallback","_unlisten","event","eventId","__tauriModule","message","cmd","emit","windowLabel","payload","listen","handler","then","once","eventData","id","catch"],"sources":["/home/nikita/Проєкти/NUB_Project/nub-ide/node_modules/@tauri-apps/api/helpers/event.js"],"sourcesContent":["import { invokeTauriCommand } from './tauri.js';\nimport { transformCallback } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'unlisten',\n            event,\n            eventId\n        }\n    });\n}\n/**\n * Emits an event to the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param [windowLabel] The label of the window to which the event is sent, if null/undefined the event will be sent to all windows\n * @param [payload] Event payload\n * @returns\n */\nasync function emit(event, windowLabel, payload) {\n    await invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'emit',\n            event,\n            windowLabel,\n            payload\n        }\n    });\n}\n/**\n * Listen to an event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @return A promise resolving to a function to unlisten to the event.\n */\nasync function listen(event, windowLabel, handler) {\n    return invokeTauriCommand({\n        __tauriModule: 'Event',\n        message: {\n            cmd: 'listen',\n            event,\n            windowLabel,\n            handler: transformCallback(handler)\n        }\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listen to an one-off event from the backend.\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @returns A promise resolving to a function to unlisten to the event.\n */\nasync function once(event, windowLabel, handler) {\n    return listen(event, windowLabel, (eventData) => {\n        handler(eventData);\n        _unlisten(event, eventData.id).catch(() => { });\n    });\n}\n\nexport { emit, listen, once };\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,YAAY;AAC/C,SAASC,iBAAiB,QAAQ,aAAa;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,SAASA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACrC,OAAOJ,kBAAkB,CAAC;IACtBK,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE;MACLC,GAAG,EAAE,UAAU;MACfJ,KAAK;MACLC;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,IAAIA,CAACL,KAAK,EAAEM,WAAW,EAAEC,OAAO,EAAE;EAC7C,MAAMV,kBAAkB,CAAC;IACrBK,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE;MACLC,GAAG,EAAE,MAAM;MACXJ,KAAK;MACLM,WAAW;MACXC;IACJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,MAAMA,CAACR,KAAK,EAAEM,WAAW,EAAEG,OAAO,EAAE;EAC/C,OAAOZ,kBAAkB,CAAC;IACtBK,aAAa,EAAE,OAAO;IACtBC,OAAO,EAAE;MACLC,GAAG,EAAE,QAAQ;MACbJ,KAAK;MACLM,WAAW;MACXG,OAAO,EAAEX,iBAAiB,CAACW,OAAO;IACtC;EACJ,CAAC,CAAC,CAACC,IAAI,CAAET,OAAO,IAAK;IACjB,OAAO,YAAYF,SAAS,CAACC,KAAK,EAAEC,OAAO,CAAC;EAChD,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeU,IAAIA,CAACX,KAAK,EAAEM,WAAW,EAAEG,OAAO,EAAE;EAC7C,OAAOD,MAAM,CAACR,KAAK,EAAEM,WAAW,EAAGM,SAAS,IAAK;IAC7CH,OAAO,CAACG,SAAS,CAAC;IAClBb,SAAS,CAACC,KAAK,EAAEY,SAAS,CAACC,EAAE,CAAC,CAACC,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;EACnD,CAAC,CAAC;AACN;AAEA,SAAST,IAAI,EAAEG,MAAM,EAAEG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}